
airspy_rom_to_ram.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <vector_table>:
       0:	e0 1f 09 10 a9 13 00 00 a5 13 00 00 11 07 00 00     ................
      10:	31 07 00 00 35 07 00 00 39 07 00 00 00 00 00 00     1...5...9.......
	...
      2c:	a5 13 00 00 a5 13 00 00 00 00 00 00 a5 13 00 00     ................
      3c:	a5 13 00 00 a1 13 00 00 5d 02 00 00 09 02 00 00     ........].......
      4c:	00 00 00 00 a1 13 00 00 a1 13 00 00 a1 13 00 00     ................
      5c:	a1 13 00 00 a1 13 00 00 a1 13 00 00 a1 13 00 00     ................
      6c:	a1 13 00 00 a1 13 00 00 a1 13 00 00 a1 13 00 00     ................
      7c:	a1 13 00 00 a1 13 00 00 a1 13 00 00 a1 13 00 00     ................
      8c:	a1 13 00 00 a1 13 00 00 a1 13 00 00 a1 13 00 00     ................
      9c:	a1 13 00 00 a1 13 00 00 a1 13 00 00 a1 13 00 00     ................
      ac:	a1 13 00 00 a1 13 00 00 a1 13 00 00 a1 13 00 00     ................
      bc:	a1 13 00 00 a1 13 00 00 a1 13 00 00 a1 13 00 00     ................
      cc:	a1 13 00 00 a1 13 00 00 a1 13 00 00 a1 13 00 00     ................
      dc:	a1 13 00 00 a1 13 00 00 a1 13 00 00 a1 13 00 00     ................
      ec:	a1 13 00 00 00 00 00 00 a1 13 00 00 a1 13 00 00     ................
      fc:	a1 13 00 00 00 00 00 00 a1 13 00 00 a1 13 00 00     ................
     10c:	a1 13 00 00 a1 13 00 00                             ........

00000114 <set_packing_state>:
void set_packing_state(uint8_t state)
{
  if(state == 0)
  {
    use_packing = 0;
    *usb_bulk_buffer_length = 0x4000;
     114:	4b07      	ldr	r3, [pc, #28]	; (134 <set_packing_state+0x20>)
     116:	681b      	ldr	r3, [r3, #0]
  set_packing->raw = 0;
}

void set_packing_state(uint8_t state)
{
  if(state == 0)
     118:	b130      	cbz	r0, 128 <set_packing_state+0x14>
    use_packing = 0;
    *usb_bulk_buffer_length = 0x4000;
  }
  else
  {
    use_packing = 1;
     11a:	4a07      	ldr	r2, [pc, #28]	; (138 <set_packing_state+0x24>)
     11c:	2101      	movs	r1, #1
    *usb_bulk_buffer_length = 0x1800;
     11e:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
    use_packing = 0;
    *usb_bulk_buffer_length = 0x4000;
  }
  else
  {
    use_packing = 1;
     122:	6011      	str	r1, [r2, #0]
    *usb_bulk_buffer_length = 0x1800;
     124:	6018      	str	r0, [r3, #0]
     126:	4770      	bx	lr

void set_packing_state(uint8_t state)
{
  if(state == 0)
  {
    use_packing = 0;
     128:	4903      	ldr	r1, [pc, #12]	; (138 <set_packing_state+0x24>)
    *usb_bulk_buffer_length = 0x4000;
     12a:	f44f 4280 	mov.w	r2, #16384	; 0x4000

void set_packing_state(uint8_t state)
{
  if(state == 0)
  {
    use_packing = 0;
     12e:	6008      	str	r0, [r1, #0]
    *usb_bulk_buffer_length = 0x4000;
     130:	601a      	str	r2, [r3, #0]
     132:	4770      	bx	lr
     134:	1008000c 	.word	0x1008000c
     138:	10080028 	.word	0x10080028

0000013c <adchs_start>:
    *usb_bulk_buffer_length = 0x1800;
  }
}

void adchs_start(uint8_t chan_num)
{
     13c:	b538      	push	{r3, r4, r5, lr}
     13e:	4605      	mov	r5, r0
  int i;
  uint32_t *dst;

  /* Disable IRQ globally */
  __asm__("cpsid i");
     140:	b672      	cpsid	i

  if(first_start == 0)
     142:	4c26      	ldr	r4, [pc, #152]	; (1dc <adchs_start+0xa0>)
     144:	6823      	ldr	r3, [r4, #0]
     146:	2b00      	cmp	r3, #0
     148:	d03f      	beq.n	1ca <adchs_start+0x8e>
    *usb_bulk_buffer_length = 0x1800;
  }
}

void adchs_start(uint8_t chan_num)
{
     14a:	f643 73fc 	movw	r3, #16380	; 0x3ffc
    first_start = 1;
  }

  /* Clear ADCHS Buffer */
  dst = (uint32_t *)ADCHS_DATA_BUFFER;
  for(i=0; i<(ADCHS_DATA_BUFFER_SIZE_BYTE/4); i++)
     14e:	f64b 74fc 	movw	r4, #49148	; 0xbffc
    *usb_bulk_buffer_length = 0x1800;
  }
}

void adchs_start(uint8_t chan_num)
{
     152:	f2c2 0300 	movt	r3, #8192	; 0x2000

  /* Clear ADCHS Buffer */
  dst = (uint32_t *)ADCHS_DATA_BUFFER;
  for(i=0; i<(ADCHS_DATA_BUFFER_SIZE_BYTE/4); i++)
  {
    dst[i] = 0;
     156:	2000      	movs	r0, #0
    first_start = 1;
  }

  /* Clear ADCHS Buffer */
  dst = (uint32_t *)ADCHS_DATA_BUFFER;
  for(i=0; i<(ADCHS_DATA_BUFFER_SIZE_BYTE/4); i++)
     158:	f2c2 0400 	movt	r4, #8192	; 0x2000
     15c:	1d1a      	adds	r2, r3, #4
  {
    dst[i] = 0;
     15e:	6058      	str	r0, [r3, #4]
     160:	3308      	adds	r3, #8
    first_start = 1;
  }

  /* Clear ADCHS Buffer */
  dst = (uint32_t *)ADCHS_DATA_BUFFER;
  for(i=0; i<(ADCHS_DATA_BUFFER_SIZE_BYTE/4); i++)
     162:	42a3      	cmp	r3, r4
  {
    dst[i] = 0;
     164:	6050      	str	r0, [r2, #4]
    first_start = 1;
  }

  /* Clear ADCHS Buffer */
  dst = (uint32_t *)ADCHS_DATA_BUFFER;
  for(i=0; i<(ADCHS_DATA_BUFFER_SIZE_BYTE/4); i++)
     166:	d1f9      	bne.n	15c <adchs_start+0x20>
        
}

static __inline__ void clr_usb_buffer_offset(void)
{  
  if(use_packing)
     168:	4c1d      	ldr	r4, [pc, #116]	; (1e0 <adchs_start+0xa4>)
     16a:	6821      	ldr	r1, [r4, #0]
     16c:	bb11      	cbnz	r1, 1b4 <adchs_start+0x78>
    usb_bulk_buffer_offset[0] = ADCHS_DATA_TRANSFER_SIZE_BYTE / 2;
    usb_bulk_buffer_offset_m4[0] = ADCHS_DATA_TRANSFER_SIZE_BYTE;
  }
  else
  {
    usb_bulk_buffer_offset[0] = ADCHS_DATA_TRANSFER_SIZE_BYTE;
     16e:	4b1d      	ldr	r3, [pc, #116]	; (1e4 <adchs_start+0xa8>)
     170:	6818      	ldr	r0, [r3, #0]
     172:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     176:	6002      	str	r2, [r0, #0]
  }
  
  last_offset_m4 = 0;
  *last_offset_m0 = 0;
     178:	481b      	ldr	r0, [pc, #108]	; (1e8 <adchs_start+0xac>)
  else
  {
    usb_bulk_buffer_offset[0] = ADCHS_DATA_TRANSFER_SIZE_BYTE;
  }
  
  last_offset_m4 = 0;
     17a:	491c      	ldr	r1, [pc, #112]	; (1ec <adchs_start+0xb0>)
  *last_offset_m0 = 0;
     17c:	6802      	ldr	r2, [r0, #0]
  else
  {
    usb_bulk_buffer_offset[0] = ADCHS_DATA_TRANSFER_SIZE_BYTE;
  }
  
  last_offset_m4 = 0;
     17e:	2300      	movs	r3, #0
     180:	600b      	str	r3, [r1, #0]
  *last_offset_m0 = 0;
     182:	6013      	str	r3, [r2, #0]
  {
    dst[i] = 0;
  }
  clr_usb_buffer_offset();

  ADCHS_init();
     184:	f000 fa84 	bl	690 <ADCHS_init>
  ADCHS_desc_init(chan_num);
     188:	4628      	mov	r0, r5
     18a:	f000 fab1 	bl	6f0 <ADCHS_desc_init>
  ADCHS_DMA_init((uint32_t)ADCHS_DATA_BUFFER, use_packing);
     18e:	6822      	ldr	r2, [r4, #0]
     190:	f44f 4080 	mov.w	r0, #16384	; 0x4000
     194:	f2c2 0000 	movt	r0, #8192	; 0x2000
     198:	b2d1      	uxtb	r1, r2
     19a:	f000 f9e9 	bl	570 <ADCHS_DMA_init>

  led_on();
     19e:	f000 fe2f 	bl	e00 <led_on>
  LPC_ADCHS->TRIGGER = 1;
     1a2:	2000      	movs	r0, #0
     1a4:	f2c4 000f 	movt	r0, #16399	; 0x400f
     1a8:	2301      	movs	r3, #1
     1aa:	6103      	str	r3, [r0, #16]
  __asm("dsb");
     1ac:	f3bf 8f4f 	dsb	sy
  
  /* Enable IRQ globally */
  __asm__("cpsie i");
     1b0:	b662      	cpsie	i
     1b2:	bd38      	pop	{r3, r4, r5, pc}

static __inline__ void clr_usb_buffer_offset(void)
{  
  if(use_packing)
  {
    usb_bulk_buffer_offset[0] = ADCHS_DATA_TRANSFER_SIZE_BYTE / 2;
     1b4:	490b      	ldr	r1, [pc, #44]	; (1e4 <adchs_start+0xa8>)
    usb_bulk_buffer_offset_m4[0] = ADCHS_DATA_TRANSFER_SIZE_BYTE;
     1b6:	4b0e      	ldr	r3, [pc, #56]	; (1f0 <adchs_start+0xb4>)

static __inline__ void clr_usb_buffer_offset(void)
{  
  if(use_packing)
  {
    usb_bulk_buffer_offset[0] = ADCHS_DATA_TRANSFER_SIZE_BYTE / 2;
     1b8:	6808      	ldr	r0, [r1, #0]
    usb_bulk_buffer_offset_m4[0] = ADCHS_DATA_TRANSFER_SIZE_BYTE;
     1ba:	681b      	ldr	r3, [r3, #0]

static __inline__ void clr_usb_buffer_offset(void)
{  
  if(use_packing)
  {
    usb_bulk_buffer_offset[0] = ADCHS_DATA_TRANSFER_SIZE_BYTE / 2;
     1bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    usb_bulk_buffer_offset_m4[0] = ADCHS_DATA_TRANSFER_SIZE_BYTE;
     1c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000

static __inline__ void clr_usb_buffer_offset(void)
{  
  if(use_packing)
  {
    usb_bulk_buffer_offset[0] = ADCHS_DATA_TRANSFER_SIZE_BYTE / 2;
     1c4:	6002      	str	r2, [r0, #0]
    usb_bulk_buffer_offset_m4[0] = ADCHS_DATA_TRANSFER_SIZE_BYTE;
     1c6:	6019      	str	r1, [r3, #0]
     1c8:	e7d6      	b.n	178 <adchs_start+0x3c>
  /* Disable IRQ globally */
  __asm__("cpsid i");

  if(first_start == 0)
  {
    cpu_clock_pll1_high_speed(&airspy_conf->airspy_m4_init_conf.pll1_hs);
     1ca:	480a      	ldr	r0, [pc, #40]	; (1f4 <adchs_start+0xb8>)
     1cc:	6800      	ldr	r0, [r0, #0]
     1ce:	3030      	adds	r0, #48	; 0x30
     1d0:	f000 fdda 	bl	d88 <cpu_clock_pll1_high_speed>
    first_start = 1;
     1d4:	2101      	movs	r1, #1
     1d6:	6021      	str	r1, [r4, #0]
     1d8:	e7b7      	b.n	14a <adchs_start+0xe>
     1da:	bf00      	nop
     1dc:	10080038 	.word	0x10080038
     1e0:	10080028 	.word	0x10080028
     1e4:	10080008 	.word	0x10080008
     1e8:	10080010 	.word	0x10080010
     1ec:	10080020 	.word	0x10080020
     1f0:	10080034 	.word	0x10080034
     1f4:	10080018 	.word	0x10080018

000001f8 <adchs_stop>:
  /* Enable IRQ globally */
  __asm__("cpsie i");
}

void adchs_stop(void)
{
     1f8:	b508      	push	{r3, lr}
  /* Disable IRQ globally */
  __asm__("cpsid i");
     1fa:	b672      	cpsid	i

  ADCHS_deinit();
     1fc:	f000 fa3c 	bl	678 <ADCHS_deinit>

//  cpu_clock_pll1_low_speed(&airspy_conf->airspy_m4_init_conf.pll1_ls);

  led_off();
     200:	f000 fe06 	bl	e10 <led_off>

  /* Enable IRQ globally */
  __asm__("cpsie i");
     204:	b662      	cpsie	i
     206:	bd08      	pop	{r3, pc}

00000208 <dma_isr>:
    stat_adchs.dma_err_cnt++; // Count DMA Error
    LPC_GPDMA->INTERRCLR |= status;
  } 
#endif

  status = LPC_GPDMA->INTTCSTAT;
     208:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     20c:	f2c4 0300 	movt	r3, #16384	; 0x4000
     210:	685a      	ldr	r2, [r3, #4]
  if( status & INTTC0 )
     212:	07d2      	lsls	r2, r2, #31
     214:	d511      	bpl.n	23a <dma_isr+0x32>
  {
    LPC_GPDMA->INTTCCLEAR |= INTTC0; /* Clear Chan0 */
     216:	6898      	ldr	r0, [r3, #8]
     218:	f040 0101 	orr.w	r1, r0, #1
     21c:	6099      	str	r1, [r3, #8]

    if(use_packing)
     21e:	4b0c      	ldr	r3, [pc, #48]	; (250 <dma_isr+0x48>)
     220:	681a      	ldr	r2, [r3, #0]
     222:	b95a      	cbnz	r2, 23c <dma_isr+0x34>
    {
        set_usb_buffer_offset_m4( inc_mask_usb_buffer_offset_m4(get_usb_buffer_offset_m4(), 8192));    
    }
    else
    {
        set_usb_buffer_offset( inc_mask_usb_buffer_offset(get_usb_buffer_offset(), USB_DATA_TRANSFER_SIZE_BYTE) );
     224:	480b      	ldr	r0, [pc, #44]	; (254 <dma_isr+0x4c>)
     226:	6801      	ldr	r1, [r0, #0]
     228:	680b      	ldr	r3, [r1, #0]
     22a:	f503 4280 	add.w	r2, r3, #16384	; 0x4000
     22e:	0450      	lsls	r0, r2, #17
     230:	0c43      	lsrs	r3, r0, #17
     232:	600b      	str	r3, [r1, #0]
It also sets the local event register, see Power management (sleep mode, deep sleep mode of System Control Register for more details).
Instruction for Cortex M0, M3/M4 */
__attribute__ ((always_inline)) static inline void signal_sev(void)
{
  /* make sure all data transactions complete before next instruction is executed */
  __asm("dsb");
     234:	f3bf 8f4f 	dsb	sy
  __asm("sev");
     238:	bf40      	sev
     23a:	4770      	bx	lr
  {
    LPC_GPDMA->INTTCCLEAR |= INTTC0; /* Clear Chan0 */

    if(use_packing)
    {
        set_usb_buffer_offset_m4( inc_mask_usb_buffer_offset_m4(get_usb_buffer_offset_m4(), 8192));    
     23c:	4906      	ldr	r1, [pc, #24]	; (258 <dma_isr+0x50>)
     23e:	680a      	ldr	r2, [r1, #0]
     240:	6810      	ldr	r0, [r2, #0]
     242:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
     246:	0459      	lsls	r1, r3, #17
     248:	0c48      	lsrs	r0, r1, #17
     24a:	6010      	str	r0, [r2, #0]
     24c:	4770      	bx	lr
     24e:	bf00      	nop
     250:	10080028 	.word	0x10080028
     254:	10080008 	.word	0x10080008
     258:	10080034 	.word	0x10080034

0000025c <m0core_isr>:
    stat_adchs.dma_irq_cycles_idx = 0;
#endif
}

void m0core_isr(void)
{
     25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t adchs_start_stop_cmd;
  uint8_t samplerate_cmd;
  uint8_t packing_cmd;
  uint8_t packing_state;

  SLAVE_TXEV_QUIT();
     25e:	f44f 5250 	mov.w	r2, #13312	; 0x3400
  start_adchs->raw  = 0;
}

static __inline__ uint8_t get_samplerate(uint8_t *conf_number)
{
  *conf_number = set_samplerate->conf;
     262:	4c26      	ldr	r4, [pc, #152]	; (2fc <m0core_isr+0xa0>)
  uint8_t adchs_start_stop_cmd;
  uint8_t samplerate_cmd;
  uint8_t packing_cmd;
  uint8_t packing_state;

  SLAVE_TXEV_QUIT();
     264:	f2c4 0204 	movt	r2, #16388	; 0x4004
  start_adchs->raw  = 0;
}

static __inline__ uint8_t get_samplerate(uint8_t *conf_number)
{
  *conf_number = set_samplerate->conf;
     268:	6823      	ldr	r3, [r4, #0]
  uint8_t adchs_start_stop_cmd;
  uint8_t samplerate_cmd;
  uint8_t packing_cmd;
  uint8_t packing_state;

  SLAVE_TXEV_QUIT();
     26a:	2100      	movs	r1, #0
     26c:	6011      	str	r1, [r2, #0]
  start_adchs->raw  = 0;
}

static __inline__ uint8_t get_samplerate(uint8_t *conf_number)
{
  *conf_number = set_samplerate->conf;
     26e:	785d      	ldrb	r5, [r3, #1]
  return(set_samplerate->cmd);
     270:	781a      	ldrb	r2, [r3, #0]
  uint8_t packing_state;

  SLAVE_TXEV_QUIT();

  samplerate_cmd = get_samplerate(&adchs_conf);
  if(samplerate_cmd == SET_SAMPLERATE_CMD)
     272:	2a01      	cmp	r2, #1
  start_adchs->raw  = 0;
}

static __inline__ uint8_t get_samplerate(uint8_t *conf_number)
{
  *conf_number = set_samplerate->conf;
     274:	b2e9      	uxtb	r1, r5
  uint8_t packing_state;

  SLAVE_TXEV_QUIT();

  samplerate_cmd = get_samplerate(&adchs_conf);
  if(samplerate_cmd == SET_SAMPLERATE_CMD)
     276:	d026      	beq.n	2c6 <m0core_isr+0x6a>
  set_samplerate->raw = 0;
}

static __inline__ uint8_t get_packing(uint8_t *packing_state)
{
  *packing_state = set_packing->conf;
     278:	4d21      	ldr	r5, [pc, #132]	; (300 <m0core_isr+0xa4>)
     27a:	682a      	ldr	r2, [r5, #0]
     27c:	7850      	ldrb	r0, [r2, #1]
  return(set_packing->cmd);
     27e:	7813      	ldrb	r3, [r2, #0]
    }
    ack_samplerate();
  }
  
  packing_cmd = get_packing(&packing_state);
  if(packing_cmd == SET_PACKING_CMD)
     280:	2b01      	cmp	r3, #1
     282:	d034      	beq.n	2ee <m0core_isr+0x92>
  *last_offset_m0 = 0;
}

static __inline__ uint32_t get_start_stop_adchs(void)
{
  return(start_adchs->cmd);
     284:	4d1f      	ldr	r5, [pc, #124]	; (304 <m0core_isr+0xa8>)
     286:	682b      	ldr	r3, [r5, #0]
     288:	781c      	ldrb	r4, [r3, #0]
    set_packing_state(packing_state);
    ack_packing();
  }

  adchs_start_stop_cmd = get_start_stop_adchs();
  switch(adchs_start_stop_cmd)
     28a:	2c01      	cmp	r4, #1
     28c:	d002      	beq.n	294 <m0core_isr+0x38>
     28e:	2c02      	cmp	r4, #2
     290:	d00d      	beq.n	2ae <m0core_isr+0x52>
     292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    case START_ADCHS_CMD:
      if(adchs_started == 0)
     294:	4f1c      	ldr	r7, [pc, #112]	; (308 <m0core_isr+0xac>)
     296:	683e      	ldr	r6, [r7, #0]
     298:	b936      	cbnz	r6, 2a8 <m0core_isr+0x4c>
      {
        adchs_start(DEFAULT_ADCHS_CHAN);
     29a:	4630      	mov	r0, r6
     29c:	f7ff ff4e 	bl	13c <adchs_start>
        adchs_started = 1;
        adchs_stopped = 0;
     2a0:	481a      	ldr	r0, [pc, #104]	; (30c <m0core_isr+0xb0>)
     2a2:	682b      	ldr	r3, [r5, #0]
  {
    case START_ADCHS_CMD:
      if(adchs_started == 0)
      {
        adchs_start(DEFAULT_ADCHS_CHAN);
        adchs_started = 1;
     2a4:	603c      	str	r4, [r7, #0]
        adchs_stopped = 0;
     2a6:	6006      	str	r6, [r0, #0]
}

/* Acknowledge Start/Stop ADCHS by clearing the data */
static __inline__ void ack_start_stop_adchs(void)
{
  start_adchs->raw  = 0;
     2a8:	2200      	movs	r2, #0
     2aa:	601a      	str	r2, [r3, #0]
     2ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
      ack_start_stop_adchs();
    break;

    case STOP_ADCHS_CMD:
      if(adchs_stopped == 0)
     2ae:	4e17      	ldr	r6, [pc, #92]	; (30c <m0core_isr+0xb0>)
     2b0:	6834      	ldr	r4, [r6, #0]
     2b2:	2c00      	cmp	r4, #0
     2b4:	d1f8      	bne.n	2a8 <m0core_isr+0x4c>
      {
        adchs_stop();
     2b6:	f7ff ff9f 	bl	1f8 <adchs_stop>
        adchs_stopped = 1;
        adchs_started = 0;
     2ba:	4913      	ldr	r1, [pc, #76]	; (308 <m0core_isr+0xac>)
     2bc:	682b      	ldr	r3, [r5, #0]

    case STOP_ADCHS_CMD:
      if(adchs_stopped == 0)
      {
        adchs_stop();
        adchs_stopped = 1;
     2be:	2201      	movs	r2, #1
     2c0:	6032      	str	r2, [r6, #0]
        adchs_started = 0;
     2c2:	600c      	str	r4, [r1, #0]
     2c4:	e7f0      	b.n	2a8 <m0core_isr+0x4c>
  if(samplerate_cmd == SET_SAMPLERATE_CMD)
  {
    if((adchs_conf & AIRSPY_SAMPLERATE_CONF_ALT) == AIRSPY_SAMPLERATE_CONF_ALT)
    {
      adchs_conf = adchs_conf & (~AIRSPY_SAMPLERATE_CONF_ALT);
      sys_clock_samplerate(&airspy_conf->airspy_m0_m4_alt_conf[adchs_conf].airspy_m4_conf);
     2c6:	4a12      	ldr	r2, [pc, #72]	; (310 <m0core_isr+0xb4>)
  SLAVE_TXEV_QUIT();

  samplerate_cmd = get_samplerate(&adchs_conf);
  if(samplerate_cmd == SET_SAMPLERATE_CMD)
  {
    if((adchs_conf & AIRSPY_SAMPLERATE_CONF_ALT) == AIRSPY_SAMPLERATE_CONF_ALT)
     2c8:	b26d      	sxtb	r5, r5
    {
      adchs_conf = adchs_conf & (~AIRSPY_SAMPLERATE_CONF_ALT);
      sys_clock_samplerate(&airspy_conf->airspy_m0_m4_alt_conf[adchs_conf].airspy_m4_conf);
     2ca:	6813      	ldr	r3, [r2, #0]
  SLAVE_TXEV_QUIT();

  samplerate_cmd = get_samplerate(&adchs_conf);
  if(samplerate_cmd == SET_SAMPLERATE_CMD)
  {
    if((adchs_conf & AIRSPY_SAMPLERATE_CONF_ALT) == AIRSPY_SAMPLERATE_CONF_ALT)
     2cc:	2d00      	cmp	r5, #0
    {
      adchs_conf = adchs_conf & (~AIRSPY_SAMPLERATE_CONF_ALT);
      sys_clock_samplerate(&airspy_conf->airspy_m0_m4_alt_conf[adchs_conf].airspy_m4_conf);
     2ce:	bfba      	itte	lt
     2d0:	f001 017f 	andlt.w	r1, r1, #127	; 0x7f
     2d4:	f8d3 0080 	ldrlt.w	r0, [r3, #128]	; 0x80
    }else
    {
      sys_clock_samplerate(&airspy_conf->airspy_m0_m4_conf[adchs_conf].airspy_m4_conf);
     2d8:	6f98      	ldrge	r0, [r3, #120]	; 0x78
     2da:	eb01 0141 	add.w	r1, r1, r1, lsl #1
     2de:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
     2e2:	f000 fa2b 	bl	73c <sys_clock_samplerate>
}

/* Acknowledge set_samplerate by clearing the data */
static __inline__ void ack_samplerate(void)
{
  set_samplerate->raw = 0;
     2e6:	6820      	ldr	r0, [r4, #0]
     2e8:	2400      	movs	r4, #0
     2ea:	6004      	str	r4, [r0, #0]
     2ec:	e7c4      	b.n	278 <m0core_isr+0x1c>
  }
  
  packing_cmd = get_packing(&packing_state);
  if(packing_cmd == SET_PACKING_CMD)
  {
    set_packing_state(packing_state);
     2ee:	f7ff ff11 	bl	114 <set_packing_state>
  return(set_packing->cmd);
}

static __inline__ void ack_packing(void)
{
  set_packing->raw = 0;
     2f2:	6829      	ldr	r1, [r5, #0]
     2f4:	2000      	movs	r0, #0
     2f6:	6008      	str	r0, [r1, #0]
     2f8:	e7c4      	b.n	284 <m0core_isr+0x28>
     2fa:	bf00      	nop
     2fc:	10080000 	.word	0x10080000
     300:	10080014 	.word	0x10080014
     304:	10080004 	.word	0x10080004
     308:	10080024 	.word	0x10080024
     30c:	10080030 	.word	0x10080030
     310:	10080018 	.word	0x10080018

00000314 <m0_startup>:
    break;
  }
}

void m0_startup(void)
{
     314:	b570      	push	{r4, r5, r6, lr}
  uint32_t *src, *dest;

  /* Halt M0 core (in case it was running) */
  ipc_halt_m0();
     316:	f000 ffef 	bl	12f8 <ipc_halt_m0>

  /* Copy M0 code from M4 embedded addr to final addr M0 */
  dest = &cm0_exec_baseaddr;
  for(src = (uint32_t *)&m0_bin[0]; src < (uint32_t *)(&m0_bin[0]+m0_bin_size); )
     31a:	4b14      	ldr	r3, [pc, #80]	; (36c <m0_startup+0x58>)
     31c:	4a14      	ldr	r2, [pc, #80]	; (370 <m0_startup+0x5c>)
     31e:	681c      	ldr	r4, [r3, #0]
     320:	18a4      	adds	r4, r4, r2
     322:	4294      	cmp	r4, r2
     324:	d91c      	bls.n	360 <m0_startup+0x4c>
  {
    *dest++ = *src++;
     326:	4613      	mov	r3, r2
     328:	43d0      	mvns	r0, r2
     32a:	f853 5b04 	ldr.w	r5, [r3], #4
     32e:	4911      	ldr	r1, [pc, #68]	; (374 <m0_startup+0x60>)
     330:	1820      	adds	r0, r4, r0
  /* Halt M0 core (in case it was running) */
  ipc_halt_m0();

  /* Copy M0 code from M4 embedded addr to final addr M0 */
  dest = &cm0_exec_baseaddr;
  for(src = (uint32_t *)&m0_bin[0]; src < (uint32_t *)(&m0_bin[0]+m0_bin_size); )
     332:	429c      	cmp	r4, r3
  {
    *dest++ = *src++;
     334:	600d      	str	r5, [r1, #0]
     336:	f3c0 0080 	ubfx	r0, r0, #2, #1
  /* Halt M0 core (in case it was running) */
  ipc_halt_m0();

  /* Copy M0 code from M4 embedded addr to final addr M0 */
  dest = &cm0_exec_baseaddr;
  for(src = (uint32_t *)&m0_bin[0]; src < (uint32_t *)(&m0_bin[0]+m0_bin_size); )
     33a:	d911      	bls.n	360 <m0_startup+0x4c>
     33c:	b130      	cbz	r0, 34c <m0_startup+0x38>
  {
    *dest++ = *src++;
     33e:	6818      	ldr	r0, [r3, #0]
     340:	f102 0308 	add.w	r3, r2, #8
  /* Halt M0 core (in case it was running) */
  ipc_halt_m0();

  /* Copy M0 code from M4 embedded addr to final addr M0 */
  dest = &cm0_exec_baseaddr;
  for(src = (uint32_t *)&m0_bin[0]; src < (uint32_t *)(&m0_bin[0]+m0_bin_size); )
     344:	429c      	cmp	r4, r3
  {
    *dest++ = *src++;
     346:	f841 0f04 	str.w	r0, [r1, #4]!
  /* Halt M0 core (in case it was running) */
  ipc_halt_m0();

  /* Copy M0 code from M4 embedded addr to final addr M0 */
  dest = &cm0_exec_baseaddr;
  for(src = (uint32_t *)&m0_bin[0]; src < (uint32_t *)(&m0_bin[0]+m0_bin_size); )
     34a:	d909      	bls.n	360 <m0_startup+0x4c>
  {
    *dest++ = *src++;
     34c:	461a      	mov	r2, r3
     34e:	685e      	ldr	r6, [r3, #4]
     350:	f852 5b04 	ldr.w	r5, [r2], #4
     354:	608e      	str	r6, [r1, #8]
     356:	1d13      	adds	r3, r2, #4
     358:	604d      	str	r5, [r1, #4]
     35a:	3108      	adds	r1, #8
  /* Halt M0 core (in case it was running) */
  ipc_halt_m0();

  /* Copy M0 code from M4 embedded addr to final addr M0 */
  dest = &cm0_exec_baseaddr;
  for(src = (uint32_t *)&m0_bin[0]; src < (uint32_t *)(&m0_bin[0]+m0_bin_size); )
     35c:	429c      	cmp	r4, r3
     35e:	d8f5      	bhi.n	34c <m0_startup+0x38>
  {
    *dest++ = *src++;
  }

  ipc_start_m0( (uint32_t)(&cm0_exec_baseaddr) );
     360:	4804      	ldr	r0, [pc, #16]	; (374 <m0_startup+0x60>)
}
     362:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  for(src = (uint32_t *)&m0_bin[0]; src < (uint32_t *)(&m0_bin[0]+m0_bin_size); )
  {
    *dest++ = *src++;
  }

  ipc_start_m0( (uint32_t)(&cm0_exec_baseaddr) );
     366:	f000 bfe1 	b.w	132c <ipc_start_m0>
     36a:	bf00      	nop
     36c:	00004b80 	.word	0x00004b80
     370:	00001c50 	.word	0x00001c50
     374:	2000c000 	.word	0x2000c000

00000378 <main>:
  ipc_start_m0s( (uint32_t)(&cm0s_exec_baseaddr) );
}

void scs_dwt_cycle_counter_enabled(void)
{
  SCS_DEMCR |= SCS_DEMCR_TRCENA;
     378:	f64e 52fc 	movw	r2, #60924	; 0xedfc
     37c:	f2ce 0200 	movt	r2, #57344	; 0xe000
  SCS_DWT_CTRL  |= SCS_DWT_CTRL_CYCCNTENA;
     380:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  ipc_start_m0s( (uint32_t)(&cm0s_exec_baseaddr) );
}

void scs_dwt_cycle_counter_enabled(void)
{
  SCS_DEMCR |= SCS_DEMCR_TRCENA;
     384:	6811      	ldr	r1, [r2, #0]
  SCS_DWT_CTRL  |= SCS_DWT_CTRL_CYCCNTENA;
}

int main(void)
{
     386:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
}

void scs_dwt_cycle_counter_enabled(void)
{
  SCS_DEMCR |= SCS_DEMCR_TRCENA;
  SCS_DWT_CTRL  |= SCS_DWT_CTRL_CYCCNTENA;
     38a:	f2ce 0300 	movt	r3, #57344	; 0xe000
  ipc_start_m0s( (uint32_t)(&cm0s_exec_baseaddr) );
}

void scs_dwt_cycle_counter_enabled(void)
{
  SCS_DEMCR |= SCS_DEMCR_TRCENA;
     38e:	f041 7080 	orr.w	r0, r1, #16777216	; 0x1000000
     392:	6010      	str	r0, [r2, #0]
  SCS_DWT_CTRL  |= SCS_DWT_CTRL_CYCCNTENA;
     394:	681c      	ldr	r4, [r3, #0]
        
}

static __inline__ void clr_usb_buffer_offset(void)
{  
  if(use_packing)
     396:	f8df b180 	ldr.w	fp, [pc, #384]	; 518 <main+0x1a0>
}

void scs_dwt_cycle_counter_enabled(void)
{
  SCS_DEMCR |= SCS_DEMCR_TRCENA;
  SCS_DWT_CTRL  |= SCS_DWT_CTRL_CYCCNTENA;
     39a:	f044 0501 	orr.w	r5, r4, #1
}

int main(void)
{
     39e:	b085      	sub	sp, #20
}

void scs_dwt_cycle_counter_enabled(void)
{
  SCS_DEMCR |= SCS_DEMCR_TRCENA;
  SCS_DWT_CTRL  |= SCS_DWT_CTRL_CYCCNTENA;
     3a0:	601d      	str	r5, [r3, #0]
}

int main(void)
{
  scs_dwt_cycle_counter_enabled();
  pin_setup();
     3a2:	f000 fd57 	bl	e54 <pin_setup>
  sys_clock_init();
     3a6:	f000 fa43 	bl	830 <sys_clock_init>

  nvic_set_priority(NVIC_DMA_IRQ, 255);
     3aa:	2002      	movs	r0, #2
     3ac:	21ff      	movs	r1, #255	; 0xff
     3ae:	f001 f953 	bl	1658 <nvic_set_priority>
  nvic_set_priority(NVIC_M0CORE_IRQ, 1);
     3b2:	2001      	movs	r0, #1
     3b4:	4601      	mov	r1, r0
     3b6:	f001 f94f 	bl	1658 <nvic_set_priority>
        
}

static __inline__ void clr_usb_buffer_offset(void)
{  
  if(use_packing)
     3ba:	f8db 6000 	ldr.w	r6, [fp]
     3be:	2e00      	cmp	r6, #0
     3c0:	f000 808d 	beq.w	4de <main+0x166>
  {
    usb_bulk_buffer_offset[0] = ADCHS_DATA_TRANSFER_SIZE_BYTE / 2;
    usb_bulk_buffer_offset_m4[0] = ADCHS_DATA_TRANSFER_SIZE_BYTE;
     3c4:	4c4a      	ldr	r4, [pc, #296]	; (4f0 <main+0x178>)

static __inline__ void clr_usb_buffer_offset(void)
{  
  if(use_packing)
  {
    usb_bulk_buffer_offset[0] = ADCHS_DATA_TRANSFER_SIZE_BYTE / 2;
     3c6:	484b      	ldr	r0, [pc, #300]	; (4f4 <main+0x17c>)
    usb_bulk_buffer_offset_m4[0] = ADCHS_DATA_TRANSFER_SIZE_BYTE;
     3c8:	9403      	str	r4, [sp, #12]
     3ca:	9e03      	ldr	r6, [sp, #12]

static __inline__ void clr_usb_buffer_offset(void)
{  
  if(use_packing)
  {
    usb_bulk_buffer_offset[0] = ADCHS_DATA_TRANSFER_SIZE_BYTE / 2;
     3cc:	6805      	ldr	r5, [r0, #0]
    usb_bulk_buffer_offset_m4[0] = ADCHS_DATA_TRANSFER_SIZE_BYTE;
     3ce:	6837      	ldr	r7, [r6, #0]

static __inline__ void clr_usb_buffer_offset(void)
{  
  if(use_packing)
  {
    usb_bulk_buffer_offset[0] = ADCHS_DATA_TRANSFER_SIZE_BYTE / 2;
     3d0:	9002      	str	r0, [sp, #8]
     3d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    usb_bulk_buffer_offset_m4[0] = ADCHS_DATA_TRANSFER_SIZE_BYTE;
     3d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000

static __inline__ void clr_usb_buffer_offset(void)
{  
  if(use_packing)
  {
    usb_bulk_buffer_offset[0] = ADCHS_DATA_TRANSFER_SIZE_BYTE / 2;
     3da:	602a      	str	r2, [r5, #0]
    usb_bulk_buffer_offset_m4[0] = ADCHS_DATA_TRANSFER_SIZE_BYTE;
     3dc:	603b      	str	r3, [r7, #0]
  {
    usb_bulk_buffer_offset[0] = ADCHS_DATA_TRANSFER_SIZE_BYTE;
  }
  
  last_offset_m4 = 0;
  *last_offset_m0 = 0;
     3de:	4946      	ldr	r1, [pc, #280]	; (4f8 <main+0x180>)
  else
  {
    usb_bulk_buffer_offset[0] = ADCHS_DATA_TRANSFER_SIZE_BYTE;
  }
  
  last_offset_m4 = 0;
     3e0:	f8df c138 	ldr.w	ip, [pc, #312]	; 51c <main+0x1a4>
  *last_offset_m0 = 0;
     3e4:	680d      	ldr	r5, [r1, #0]
}

/* Acknowledge Start/Stop ADCHS by clearing the data */
static __inline__ void ack_start_stop_adchs(void)
{
  start_adchs->raw  = 0;
     3e6:	4f45      	ldr	r7, [pc, #276]	; (4fc <main+0x184>)
  else
  {
    usb_bulk_buffer_offset[0] = ADCHS_DATA_TRANSFER_SIZE_BYTE;
  }
  
  last_offset_m4 = 0;
     3e8:	2400      	movs	r4, #0
     3ea:	f8cc 4000 	str.w	r4, [ip]
  nvic_set_priority(NVIC_DMA_IRQ, 255);
  nvic_set_priority(NVIC_M0CORE_IRQ, 1);

  clr_usb_buffer_offset();

  nvic_enable_irq(NVIC_DMA_IRQ);
     3ee:	2002      	movs	r0, #2
  {
    usb_bulk_buffer_offset[0] = ADCHS_DATA_TRANSFER_SIZE_BYTE;
  }
  
  last_offset_m4 = 0;
  *last_offset_m0 = 0;
     3f0:	602c      	str	r4, [r5, #0]
  nvic_set_priority(NVIC_DMA_IRQ, 255);
  nvic_set_priority(NVIC_M0CORE_IRQ, 1);

  clr_usb_buffer_offset();

  nvic_enable_irq(NVIC_DMA_IRQ);
     3f2:	f8cd c004 	str.w	ip, [sp, #4]
     3f6:	f001 f921 	bl	163c <nvic_enable_irq>
  nvic_enable_irq(NVIC_M0CORE_IRQ);
     3fa:	2001      	movs	r0, #1
     3fc:	f001 f91e 	bl	163c <nvic_enable_irq>

  adchs_stop();
     400:	f7ff fefa 	bl	1f8 <adchs_stop>
  adchs_stopped = 1;
  adchs_started = 0;
  
  use_packing = 0;
  *usb_bulk_buffer_length = 0x4000;
     404:	483e      	ldr	r0, [pc, #248]	; (500 <main+0x188>)

  nvic_enable_irq(NVIC_DMA_IRQ);
  nvic_enable_irq(NVIC_M0CORE_IRQ);

  adchs_stop();
  adchs_stopped = 1;
     406:	493f      	ldr	r1, [pc, #252]	; (504 <main+0x18c>)
  adchs_started = 0;
  
  use_packing = 0;
  *usb_bulk_buffer_length = 0x4000;
     408:	6806      	ldr	r6, [r0, #0]
  nvic_enable_irq(NVIC_DMA_IRQ);
  nvic_enable_irq(NVIC_M0CORE_IRQ);

  adchs_stop();
  adchs_stopped = 1;
  adchs_started = 0;
     40a:	4d3f      	ldr	r5, [pc, #252]	; (508 <main+0x190>)
}

/* Acknowledge Start/Stop ADCHS by clearing the data */
static __inline__ void ack_start_stop_adchs(void)
{
  start_adchs->raw  = 0;
     40c:	683a      	ldr	r2, [r7, #0]
  adchs_stop();
  adchs_stopped = 1;
  adchs_started = 0;
  
  use_packing = 0;
  *usb_bulk_buffer_length = 0x4000;
     40e:	f44f 4080 	mov.w	r0, #16384	; 0x4000

  nvic_enable_irq(NVIC_DMA_IRQ);
  nvic_enable_irq(NVIC_M0CORE_IRQ);

  adchs_stop();
  adchs_stopped = 1;
     412:	2301      	movs	r3, #1
     414:	600b      	str	r3, [r1, #0]
  adchs_started = 0;
     416:	602c      	str	r4, [r5, #0]
  
  use_packing = 0;
     418:	f8cb 4000 	str.w	r4, [fp]
  *usb_bulk_buffer_length = 0x4000;
     41c:	6030      	str	r0, [r6, #0]
}

/* Acknowledge set_samplerate by clearing the data */
static __inline__ void ack_samplerate(void)
{
  set_samplerate->raw = 0;
     41e:	4e3b      	ldr	r6, [pc, #236]	; (50c <main+0x194>)
}

/* Acknowledge Start/Stop ADCHS by clearing the data */
static __inline__ void ack_start_stop_adchs(void)
{
  start_adchs->raw  = 0;
     420:	6014      	str	r4, [r2, #0]
}

/* Acknowledge set_samplerate by clearing the data */
static __inline__ void ack_samplerate(void)
{
  set_samplerate->raw = 0;
     422:	6837      	ldr	r7, [r6, #0]
  return(set_packing->cmd);
}

static __inline__ void ack_packing(void)
{
  set_packing->raw = 0;
     424:	4a3a      	ldr	r2, [pc, #232]	; (510 <main+0x198>)
}

/* Acknowledge set_samplerate by clearing the data */
static __inline__ void ack_samplerate(void)
{
  set_samplerate->raw = 0;
     426:	603c      	str	r4, [r7, #0]
  return(set_packing->cmd);
}

static __inline__ void ack_packing(void)
{
  set_packing->raw = 0;
     428:	6813      	ldr	r3, [r2, #0]
     42a:	601c      	str	r4, [r3, #0]
  m0s_startup();
#else
  // Halt M0s
  ipc_halt_m0s();
  // Disable M0 Sub
  CCU1_CLK_PERIPH_CORE_CFG &= ~(1);
     42c:	f241 7410 	movw	r4, #5904	; 0x1710
     430:	f2c4 0405 	movt	r4, #16389	; 0x4005
  ack_start_stop_adchs();
  ack_samplerate();
  ack_packing();

  /* Start M0 */
  m0_startup();
     434:	f7ff ff6e 	bl	314 <m0_startup>
#ifdef ENABLE_M0S
  /* Start M0s */
  m0s_startup();
#else
  // Halt M0s
  ipc_halt_m0s();
     438:	f000 ff98 	bl	136c <ipc_halt_m0s>
  // Disable M0 Sub
  CCU1_CLK_PERIPH_CORE_CFG &= ~(1);
     43c:	6825      	ldr	r5, [r4, #0]
#endif

  usb_bulk_buffer_offset_m4 = &usb_bulk_buffer_offset_uint32_m4;
     43e:	4935      	ldr	r1, [pc, #212]	; (514 <main+0x19c>)
     440:	9e03      	ldr	r6, [sp, #12]
  
    if(use_packing)
    {
      /* Thanks to Pierre HB9FUF for the initial packing proof-of-concept */    
      uint32_t offset = get_usb_buffer_offset_m4();
      if(offset != last_offset_m4)
     442:	f8dd c004 	ldr.w	ip, [sp, #4]
  m0s_startup();
#else
  // Halt M0s
  ipc_halt_m0s();
  // Disable M0 Sub
  CCU1_CLK_PERIPH_CORE_CFG &= ~(1);
     446:	f025 0001 	bic.w	r0, r5, #1
     44a:	6020      	str	r0, [r4, #0]
#endif

  usb_bulk_buffer_offset_m4 = &usb_bulk_buffer_offset_uint32_m4;
     44c:	460c      	mov	r4, r1
     44e:	6031      	str	r1, [r6, #0]
If the event register is 1, WFE clears it to 0 and completes immediately.
Instruction for Cortex M0, M3/M4
*/
__attribute__ ((always_inline)) static inline void signal_wfe(void)
{
  __asm("wfe");
     450:	bf20      	wfe
  
  while(true)
  {
    signal_wfe();
  
    if(use_packing)
     452:	f8db 7000 	ldr.w	r7, [fp]
     456:	2f00      	cmp	r7, #0
     458:	d0fa      	beq.n	450 <main+0xd8>
    {
      /* Thanks to Pierre HB9FUF for the initial packing proof-of-concept */    
      uint32_t offset = get_usb_buffer_offset_m4();
     45a:	f8d4 e000 	ldr.w	lr, [r4]
      if(offset != last_offset_m4)
     45e:	f8dc 3000 	ldr.w	r3, [ip]
     462:	459e      	cmp	lr, r3
     464:	d0f4      	beq.n	450 <main+0xd8>
      {
        pack((uint32_t*)&usb_bulk_buffer[offset], (uint32_t*)&usb_bulk_buffer[offset], 0x1000);
     466:	f10e 5200 	add.w	r2, lr, #536870912	; 0x20000000
     46a:	f502 4080 	add.w	r0, r2, #16384	; 0x4000
}*/

__attribute__ ((always_inline)) static void pack(uint32_t* input, uint32_t* output, uint32_t length)
{
  register uint32_t *a0 asm("r0") = input;
  register uint32_t *a1 asm("r1") = output;
     46e:	4601      	mov	r1, r0
  register uint32_t a2 asm("r2") = length;
     470:	f44f 5280 	mov.w	r2, #4096	; 0x1000

  asm volatile("1:\n\t"
     474:	e8b0 00f0 	ldmia.w	r0!, {r4, r5, r6, r7}
     478:	ea4f 4814 	mov.w	r8, r4, lsr #16
     47c:	f3c5 130b 	ubfx	r3, r5, #4, #12
     480:	ea43 2808 	orr.w	r8, r3, r8, lsl #8
     484:	ea48 5804 	orr.w	r8, r8, r4, lsl #20
     488:	0c2b      	lsrs	r3, r5, #16
     48a:	072d      	lsls	r5, r5, #28
     48c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     490:	ea45 6516 	orr.w	r5, r5, r6, lsr #24
     494:	fa1f f986 	uxth.w	r9, r6
     498:	ea45 1909 	orr.w	r9, r5, r9, lsl #4
     49c:	0c36      	lsrs	r6, r6, #16
     49e:	fa1f fa87 	uxth.w	sl, r7
     4a2:	ea4f 3a0a 	mov.w	sl, sl, lsl #12
     4a6:	ea4a 6a06 	orr.w	sl, sl, r6, lsl #24
     4aa:	ea4a 4a17 	orr.w	sl, sl, r7, lsr #16
     4ae:	e8a1 0700 	stmia.w	r1!, {r8, r9, sl}
     4b2:	3a08      	subs	r2, #8
     4b4:	d1de      	bne.n	474 <main+0xfc>
      /* Thanks to Pierre HB9FUF for the initial packing proof-of-concept */    
      uint32_t offset = get_usb_buffer_offset_m4();
      if(offset != last_offset_m4)
      {
        pack((uint32_t*)&usb_bulk_buffer[offset], (uint32_t*)&usb_bulk_buffer[offset], 0x1000);
        set_usb_buffer_offset( inc_mask_usb_buffer_offset(get_usb_buffer_offset(), 0x2000));    
     4b6:	9c02      	ldr	r4, [sp, #8]
     4b8:	6821      	ldr	r1, [r4, #0]
     4ba:	680d      	ldr	r5, [r1, #0]
     4bc:	f505 5000 	add.w	r0, r5, #8192	; 0x2000
     4c0:	0446      	lsls	r6, r0, #17
     4c2:	0c77      	lsrs	r7, r6, #17
     4c4:	600f      	str	r7, [r1, #0]
It also sets the local event register, see Power management (sleep mode, deep sleep mode of System Control Register for more details).
Instruction for Cortex M0, M3/M4 */
__attribute__ ((always_inline)) static inline void signal_sev(void)
{
  /* make sure all data transactions complete before next instruction is executed */
  __asm("dsb");
     4c6:	f3bf 8f4f 	dsb	sy
  __asm("sev");
     4ca:	bf40      	sev
        signal_sev();
        last_offset_m4 = offset;
     4cc:	f240 0320 	movw	r3, #32
     4d0:	f2c1 0308 	movt	r3, #4104	; 0x1008
     4d4:	9a03      	ldr	r2, [sp, #12]
     4d6:	f8c3 e000 	str.w	lr, [r3]
     4da:	6814      	ldr	r4, [r2, #0]
     4dc:	e7b8      	b.n	450 <main+0xd8>
    usb_bulk_buffer_offset[0] = ADCHS_DATA_TRANSFER_SIZE_BYTE / 2;
    usb_bulk_buffer_offset_m4[0] = ADCHS_DATA_TRANSFER_SIZE_BYTE;
  }
  else
  {
    usb_bulk_buffer_offset[0] = ADCHS_DATA_TRANSFER_SIZE_BYTE;
     4de:	4f05      	ldr	r7, [pc, #20]	; (4f4 <main+0x17c>)
     4e0:	4a03      	ldr	r2, [pc, #12]	; (4f0 <main+0x178>)
     4e2:	683b      	ldr	r3, [r7, #0]
     4e4:	9702      	str	r7, [sp, #8]
     4e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     4ea:	9203      	str	r2, [sp, #12]
     4ec:	6019      	str	r1, [r3, #0]
     4ee:	e776      	b.n	3de <main+0x66>
     4f0:	10080034 	.word	0x10080034
     4f4:	10080008 	.word	0x10080008
     4f8:	10080010 	.word	0x10080010
     4fc:	10080004 	.word	0x10080004
     500:	1008000c 	.word	0x1008000c
     504:	10080030 	.word	0x10080030
     508:	10080024 	.word	0x10080024
     50c:	10080000 	.word	0x10080000
     510:	10080014 	.word	0x10080014
     514:	1008002c 	.word	0x1008002c
     518:	10080028 	.word	0x10080028
     51c:	10080020 	.word	0x10080020

00000520 <ADCHS_DMA_init_stop>:
t_gpdma_lli adchs_dma_lli[ADCHS_DMA_NUM_LLI] __attribute__ ((aligned(16)));

void ADCHS_DMA_init_stop(void)
{
  /* clear all interrupts on channel 0 */
  LPC_GPDMA->INTTCCLEAR = 0x01;
     520:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     524:	f2c4 0200 	movt	r2, #16384	; 0x4000
  LPC_GPDMA->INTERRCLR = 0x01;

  /* Setup the DMAMUX */
  CREG_DMAMUX &= ~(0x3<<(ADCHS_DMA_WRITE*2));
     528:	f243 131c 	movw	r3, #12572	; 0x311c
     52c:	f2c4 0304 	movt	r3, #16388	; 0x4004
t_gpdma_lli adchs_dma_lli[ADCHS_DMA_NUM_LLI] __attribute__ ((aligned(16)));

void ADCHS_DMA_init_stop(void)
{
  /* clear all interrupts on channel 0 */
  LPC_GPDMA->INTTCCLEAR = 0x01;
     530:	2001      	movs	r0, #1
     532:	6090      	str	r0, [r2, #8]
  LPC_GPDMA->INTERRCLR = 0x01;
     534:	6110      	str	r0, [r2, #16]

  /* Setup the DMAMUX */
  CREG_DMAMUX &= ~(0x3<<(ADCHS_DMA_WRITE*2));
     536:	6819      	ldr	r1, [r3, #0]
     538:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
     53c:	6019      	str	r1, [r3, #0]
  CREG_DMAMUX |= 0x3<<(ADCHS_DMA_WRITE*2);
     53e:	6819      	ldr	r1, [r3, #0]
     540:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
     544:	6019      	str	r1, [r3, #0]
  CREG_DMAMUX &= ~(0x3<<(ADCHS_DMA_READ*2));
     546:	6819      	ldr	r1, [r3, #0]
     548:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
     54c:	6019      	str	r1, [r3, #0]
  CREG_DMAMUX |= 0x3<<(ADCHS_DMA_READ*2);
     54e:	6819      	ldr	r1, [r3, #0]
     550:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
     554:	6019      	str	r1, [r3, #0]

  LPC_GPDMA->CONFIG = 0x01; /* Enable DMA channels, little endian */
  while ( !(LPC_GPDMA->CONFIG & 0x01) );
     556:	4611      	mov	r1, r2
  CREG_DMAMUX &= ~(0x3<<(ADCHS_DMA_WRITE*2));
  CREG_DMAMUX |= 0x3<<(ADCHS_DMA_WRITE*2);
  CREG_DMAMUX &= ~(0x3<<(ADCHS_DMA_READ*2));
  CREG_DMAMUX |= 0x3<<(ADCHS_DMA_READ*2);

  LPC_GPDMA->CONFIG = 0x01; /* Enable DMA channels, little endian */
     558:	6310      	str	r0, [r2, #48]	; 0x30
  while ( !(LPC_GPDMA->CONFIG & 0x01) );
     55a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
     55c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     560:	07d2      	lsls	r2, r2, #31
     562:	f2c4 0300 	movt	r3, #16384	; 0x4000
     566:	d5f8      	bpl.n	55a <ADCHS_DMA_init_stop+0x3a>

  /* Disable Channel before to change settings */
  LPC_GPDMA->CONFIG = 0x00; /* Disable DMA channels, little endian */
     568:	2000      	movs	r0, #0
     56a:	6318      	str	r0, [r3, #48]	; 0x30
     56c:	4770      	bx	lr
     56e:	bf00      	nop

00000570 <ADCHS_DMA_init>:
}

void ADCHS_DMA_init(uint32_t dest_addr, uint8_t packed)
{
     570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     574:	4604      	mov	r4, r0
     576:	460e      	mov	r6, r1
  uint32_t nb_dma_transfer;
  int i;

  ADCHS_DMA_init_stop();
     578:	f7ff ffd2 	bl	520 <ADCHS_DMA_init_stop>
  nb_dma_transfer = ADCHS_DATA_BUFFER_SIZE_BYTE / (ADC_FIFO_LEVEL * ADCHS_DMA_NUM_LLI);
  nb_dma_transfer = (nb_dma_transfer * ADC_FIFO_LEVEL) / 4;

  for(i=0; i<ADCHS_DMA_NUM_LLI; i++)
  {
    adchs_dma_lli[i].src_addr = ADCHS_DMA_READ_SRC;
     57c:	4b23      	ldr	r3, [pc, #140]	; (60c <ADCHS_DMA_init+0x9c>)
     57e:	f44f 7200 	mov.w	r2, #512	; 0x200
     582:	f2c4 020f 	movt	r2, #16399	; 0x400f
    adchs_dma_lli[i].dst_addr = ((uint32_t)dest_addr) + (nb_dma_transfer*4*i);
    /* Modulo with round rubin last LLI point to First in infinite loop */
    adchs_dma_lli[i].next_lli = (uint32_t)(&adchs_dma_lli[(i+1)%ADCHS_DMA_NUM_LLI]);

    adchs_dma_lli[i].control = ( (nb_dma_transfer) << 0) |
     586:	f44f 5020 	mov.w	r0, #10240	; 0x2800
  for(i=0; i<ADCHS_DMA_NUM_LLI; i++)
  {
    adchs_dma_lli[i].src_addr = ADCHS_DMA_READ_SRC;
    adchs_dma_lli[i].dst_addr = ((uint32_t)dest_addr) + (nb_dma_transfer*4*i);
    /* Modulo with round rubin last LLI point to First in infinite loop */
    adchs_dma_lli[i].next_lli = (uint32_t)(&adchs_dma_lli[(i+1)%ADCHS_DMA_NUM_LLI]);
     58a:	f103 0510 	add.w	r5, r3, #16

    adchs_dma_lli[i].control = ( (nb_dma_transfer) << 0) |
     58e:	f6c0 3049 	movt	r0, #2889	; 0xb49
  nb_dma_transfer = (nb_dma_transfer * ADC_FIFO_LEVEL) / 4;

  for(i=0; i<ADCHS_DMA_NUM_LLI; i++)
  {
    adchs_dma_lli[i].src_addr = ADCHS_DMA_READ_SRC;
    adchs_dma_lli[i].dst_addr = ((uint32_t)dest_addr) + (nb_dma_transfer*4*i);
     592:	f504 5900 	add.w	r9, r4, #8192	; 0x2000
    /* Modulo with round rubin last LLI point to First in infinite loop */
    adchs_dma_lli[i].next_lli = (uint32_t)(&adchs_dma_lli[(i+1)%ADCHS_DMA_NUM_LLI]);
     596:	f103 0820 	add.w	r8, r3, #32
  nb_dma_transfer = (nb_dma_transfer * ADC_FIFO_LEVEL) / 4;

  for(i=0; i<ADCHS_DMA_NUM_LLI; i++)
  {
    adchs_dma_lli[i].src_addr = ADCHS_DMA_READ_SRC;
    adchs_dma_lli[i].dst_addr = ((uint32_t)dest_addr) + (nb_dma_transfer*4*i);
     59a:	f504 4c80 	add.w	ip, r4, #16384	; 0x4000
    /* Modulo with round rubin last LLI point to First in infinite loop */
    adchs_dma_lli[i].next_lli = (uint32_t)(&adchs_dma_lli[(i+1)%ADCHS_DMA_NUM_LLI]);
     59e:	f103 0730 	add.w	r7, r3, #48	; 0x30
  nb_dma_transfer = (nb_dma_transfer * ADC_FIFO_LEVEL) / 4;

  for(i=0; i<ADCHS_DMA_NUM_LLI; i++)
  {
    adchs_dma_lli[i].src_addr = ADCHS_DMA_READ_SRC;
    adchs_dma_lli[i].dst_addr = ((uint32_t)dest_addr) + (nb_dma_transfer*4*i);
     5a2:	f504 41c0 	add.w	r1, r4, #24576	; 0x6000
    /* Modulo with round rubin last LLI point to First in infinite loop */
    adchs_dma_lli[i].next_lli = (uint32_t)(&adchs_dma_lli[(i+1)%ADCHS_DMA_NUM_LLI]);
     5a6:	e883 0034 	stmia.w	r3, {r2, r4, r5}
  nb_dma_transfer = ADCHS_DATA_BUFFER_SIZE_BYTE / (ADC_FIFO_LEVEL * ADCHS_DMA_NUM_LLI);
  nb_dma_transfer = (nb_dma_transfer * ADC_FIFO_LEVEL) / 4;

  for(i=0; i<ADCHS_DMA_NUM_LLI; i++)
  {
    adchs_dma_lli[i].src_addr = ADCHS_DMA_READ_SRC;
     5aa:	611a      	str	r2, [r3, #16]
     5ac:	621a      	str	r2, [r3, #32]
     5ae:	631a      	str	r2, [r3, #48]	; 0x30

  if(packed)
  {
    for(i=0; i<ADCHS_DMA_NUM_LLI; i++)
    {
      adchs_dma_lli[i].control |= (0x1UL << 31);
     5b0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
    adchs_dma_lli[i].src_addr = ADCHS_DMA_READ_SRC;
    adchs_dma_lli[i].dst_addr = ((uint32_t)dest_addr) + (nb_dma_transfer*4*i);
    /* Modulo with round rubin last LLI point to First in infinite loop */
    adchs_dma_lli[i].next_lli = (uint32_t)(&adchs_dma_lli[(i+1)%ADCHS_DMA_NUM_LLI]);

    adchs_dma_lli[i].control = ( (nb_dma_transfer) << 0) |
     5b4:	60d8      	str	r0, [r3, #12]
  nb_dma_transfer = (nb_dma_transfer * ADC_FIFO_LEVEL) / 4;

  for(i=0; i<ADCHS_DMA_NUM_LLI; i++)
  {
    adchs_dma_lli[i].src_addr = ADCHS_DMA_READ_SRC;
    adchs_dma_lli[i].dst_addr = ((uint32_t)dest_addr) + (nb_dma_transfer*4*i);
     5b6:	f8c3 9014 	str.w	r9, [r3, #20]
    /* Modulo with round rubin last LLI point to First in infinite loop */
    adchs_dma_lli[i].next_lli = (uint32_t)(&adchs_dma_lli[(i+1)%ADCHS_DMA_NUM_LLI]);
     5ba:	f8c3 8018 	str.w	r8, [r3, #24]
  nb_dma_transfer = (nb_dma_transfer * ADC_FIFO_LEVEL) / 4;

  for(i=0; i<ADCHS_DMA_NUM_LLI; i++)
  {
    adchs_dma_lli[i].src_addr = ADCHS_DMA_READ_SRC;
    adchs_dma_lli[i].dst_addr = ((uint32_t)dest_addr) + (nb_dma_transfer*4*i);
     5be:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
    /* Modulo with round rubin last LLI point to First in infinite loop */
    adchs_dma_lli[i].next_lli = (uint32_t)(&adchs_dma_lli[(i+1)%ADCHS_DMA_NUM_LLI]);
     5c2:	629f      	str	r7, [r3, #40]	; 0x28

    adchs_dma_lli[i].control = ( (nb_dma_transfer) << 0) |
     5c4:	62d8      	str	r0, [r3, #44]	; 0x2c
  nb_dma_transfer = (nb_dma_transfer * ADC_FIFO_LEVEL) / 4;

  for(i=0; i<ADCHS_DMA_NUM_LLI; i++)
  {
    adchs_dma_lli[i].src_addr = ADCHS_DMA_READ_SRC;
    adchs_dma_lli[i].dst_addr = ((uint32_t)dest_addr) + (nb_dma_transfer*4*i);
     5c6:	6359      	str	r1, [r3, #52]	; 0x34
    /* Modulo with round rubin last LLI point to First in infinite loop */
    adchs_dma_lli[i].next_lli = (uint32_t)(&adchs_dma_lli[(i+1)%ADCHS_DMA_NUM_LLI]);
     5c8:	639b      	str	r3, [r3, #56]	; 0x38

  if(packed)
  {
    for(i=0; i<ADCHS_DMA_NUM_LLI; i++)
    {
      adchs_dma_lli[i].control |= (0x1UL << 31);
     5ca:	f6c8 3249 	movt	r2, #35657	; 0x8b49
                               (0x0 << 26)  |
                               (0x1 << 27)  |
                               (0x0UL << 31);
  }

  if(packed)
     5ce:	b1d6      	cbz	r6, 606 <ADCHS_DMA_init+0x96>
  {
    for(i=0; i<ADCHS_DMA_NUM_LLI; i++)
    {
      adchs_dma_lli[i].control |= (0x1UL << 31);
     5d0:	60da      	str	r2, [r3, #12]
     5d2:	61da      	str	r2, [r3, #28]
     5d4:	62da      	str	r2, [r3, #44]	; 0x2c
     5d6:	63da      	str	r2, [r3, #60]	; 0x3c
  {
    adchs_dma_lli[(ADCHS_DMA_NUM_LLI/2)-1].control |= (0x1UL << 31);
    adchs_dma_lli[i-1].control |= (0x1UL << 31);
  }

  LPC_GPDMA->C0SRCADDR = adchs_dma_lli[0].src_addr;
     5d8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
     5dc:	6819      	ldr	r1, [r3, #0]
     5de:	f2c4 0000 	movt	r0, #16384	; 0x4000
     5e2:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
  LPC_GPDMA->C0DESTADDR = adchs_dma_lli[0].dst_addr;
     5e6:	685a      	ldr	r2, [r3, #4]
     5e8:	f8c0 2104 	str.w	r2, [r0, #260]	; 0x104
  LPC_GPDMA->C0CONTROL = adchs_dma_lli[0].control;
     5ec:	68db      	ldr	r3, [r3, #12]
  LPC_GPDMA->C0LLI     = (uint32_t)(&adchs_dma_lli[1]); // must be pointing to the second LLI as the first is used when initializing
  LPC_GPDMA->C0CONFIG =  (0x1)        |          // Enable bit
     5ee:	f24d 0111 	movw	r1, #53265	; 0xd011
                         (0x0 << 6)   |
                         (0x2 << 11)  |
                         (0x1 << 14)  |
                         (0x1 << 15);

  LPC_GPDMA->CONFIG = 0x01; /* Enable DMA channels, little endian */
     5f2:	2201      	movs	r2, #1
    adchs_dma_lli[i-1].control |= (0x1UL << 31);
  }

  LPC_GPDMA->C0SRCADDR = adchs_dma_lli[0].src_addr;
  LPC_GPDMA->C0DESTADDR = adchs_dma_lli[0].dst_addr;
  LPC_GPDMA->C0CONTROL = adchs_dma_lli[0].control;
     5f4:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  LPC_GPDMA->C0LLI     = (uint32_t)(&adchs_dma_lli[1]); // must be pointing to the second LLI as the first is used when initializing
     5f8:	f8c0 5108 	str.w	r5, [r0, #264]	; 0x108
  LPC_GPDMA->C0CONFIG =  (0x1)        |          // Enable bit
     5fc:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
                         (0x0 << 6)   |
                         (0x2 << 11)  |
                         (0x1 << 14)  |
                         (0x1 << 15);

  LPC_GPDMA->CONFIG = 0x01; /* Enable DMA channels, little endian */
     600:	6302      	str	r2, [r0, #48]	; 0x30
     602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      adchs_dma_lli[i].control |= (0x1UL << 31);
    }
  }
  else
  {
    adchs_dma_lli[(ADCHS_DMA_NUM_LLI/2)-1].control |= (0x1UL << 31);
     606:	61da      	str	r2, [r3, #28]
    adchs_dma_lli[i-1].control |= (0x1UL << 31);
     608:	63da      	str	r2, [r3, #60]	; 0x3c
     60a:	e7e5      	b.n	5d8 <ADCHS_DMA_init+0x68>
     60c:	10080040 	.word	0x10080040

00000610 <ADCHS_init_stop>:
}

void ADCHS_init_stop(void)
{
  /* Reset ADCHS using RGU */
  RESET_CTRL1 = RESET_CTRL1_ADCHS;
     610:	f243 1304 	movw	r3, #12548	; 0x3104
     614:	f2c4 0305 	movt	r3, #16389	; 0x4005
  /* Wait end of Reset */
  while( (RESET_ACTIVE_STATUS1 & RESET_CTRL1_ADCHS) != RESET_CTRL1_ADCHS );
     618:	f243 1254 	movw	r2, #12628	; 0x3154
}

void ADCHS_init_stop(void)
{
  /* Reset ADCHS using RGU */
  RESET_CTRL1 = RESET_CTRL1_ADCHS;
     61c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
     620:	6019      	str	r1, [r3, #0]
  /* Wait end of Reset */
  while( (RESET_ACTIVE_STATUS1 & RESET_CTRL1_ADCHS) != RESET_CTRL1_ADCHS );
     622:	f2c4 0205 	movt	r2, #16389	; 0x4005
     626:	6810      	ldr	r0, [r2, #0]
     628:	00c1      	lsls	r1, r0, #3
     62a:	d5fc      	bpl.n	626 <ADCHS_init_stop+0x16>

  LPC_ADCHS->CLR_EN0 = STATUS0_CLEAR_MASK;
     62c:	2300      	movs	r3, #0
     62e:	f2c4 030f 	movt	r3, #16399	; 0x400f
     632:	227f      	movs	r2, #127	; 0x7f
     634:	f8c3 2f00 	str.w	r2, [r3, #3840]	; 0xf00
  LPC_ADCHS->CLR_STAT0 = STATUS0_CLEAR_MASK;

  while(LPC_ADCHS->STATUS0 & STATUS0_CLEAR);
     638:	4619      	mov	r1, r3
  RESET_CTRL1 = RESET_CTRL1_ADCHS;
  /* Wait end of Reset */
  while( (RESET_ACTIVE_STATUS1 & RESET_CTRL1_ADCHS) != RESET_CTRL1_ADCHS );

  LPC_ADCHS->CLR_EN0 = STATUS0_CLEAR_MASK;
  LPC_ADCHS->CLR_STAT0 = STATUS0_CLEAR_MASK;
     63a:	f8c3 2f10 	str.w	r2, [r3, #3856]	; 0xf10

  while(LPC_ADCHS->STATUS0 & STATUS0_CLEAR);
     63e:	f8d1 0f0c 	ldr.w	r0, [r1, #3852]	; 0xf0c
     642:	2300      	movs	r3, #0
     644:	f010 0f7d 	tst.w	r0, #125	; 0x7d
     648:	f2c4 030f 	movt	r3, #16399	; 0x400f
     64c:	d1f7      	bne.n	63e <ADCHS_init_stop+0x2e>

  LPC_ADCHS->CLR_EN1 = STATUS1_CLEAR_MASK;
     64e:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
     652:	f8c3 2f20 	str.w	r2, [r3, #3872]	; 0xf20
  LPC_ADCHS->CLR_STAT1 = STATUS1_CLEAR_MASK;
  while(LPC_ADCHS->STATUS1);
     656:	4619      	mov	r1, r3
  LPC_ADCHS->CLR_STAT0 = STATUS0_CLEAR_MASK;

  while(LPC_ADCHS->STATUS0 & STATUS0_CLEAR);

  LPC_ADCHS->CLR_EN1 = STATUS1_CLEAR_MASK;
  LPC_ADCHS->CLR_STAT1 = STATUS1_CLEAR_MASK;
     658:	f8c3 2f30 	str.w	r2, [r3, #3888]	; 0xf30
  while(LPC_ADCHS->STATUS1);
     65c:	f8d1 0f2c 	ldr.w	r0, [r1, #3884]	; 0xf2c
     660:	2300      	movs	r3, #0
     662:	f2c4 030f 	movt	r3, #16399	; 0x400f
     666:	2800      	cmp	r0, #0
     668:	d1f8      	bne.n	65c <ADCHS_init_stop+0x4c>

  LPC_ADCHS->POWER_DOWN = (0<<0);
  LPC_ADCHS->FLUSH = 1;
     66a:	2201      	movs	r2, #1
  LPC_ADCHS->FIFO_CFG = ADC_FIFO_LEVEL<<1 | 0x1;
     66c:	2111      	movs	r1, #17

  LPC_ADCHS->CLR_EN1 = STATUS1_CLEAR_MASK;
  LPC_ADCHS->CLR_STAT1 = STATUS1_CLEAR_MASK;
  while(LPC_ADCHS->STATUS1);

  LPC_ADCHS->POWER_DOWN = (0<<0);
     66e:	6198      	str	r0, [r3, #24]
  LPC_ADCHS->FLUSH = 1;
     670:	601a      	str	r2, [r3, #0]
  LPC_ADCHS->FIFO_CFG = ADC_FIFO_LEVEL<<1 | 0x1;
     672:	60d9      	str	r1, [r3, #12]
     674:	4770      	bx	lr
     676:	bf00      	nop

00000678 <ADCHS_deinit>:
}

void ADCHS_deinit(void)
{
     678:	b508      	push	{r3, lr}
  ADCHS_DMA_init_stop();
     67a:	f7ff ff51 	bl	520 <ADCHS_DMA_init_stop>
  ADCHS_init_stop();
     67e:	f7ff ffc7 	bl	610 <ADCHS_init_stop>
  LPC_ADCHS->POWER_CONTROL = 0x0;
     682:	2300      	movs	r3, #0
     684:	f2c4 030f 	movt	r3, #16399	; 0x400f
     688:	2200      	movs	r2, #0
     68a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
     68e:	bd08      	pop	{r3, pc}

00000690 <ADCHS_init>:
}

/* Initialized ADCHS for freq between 0 to less than 30MSPS */
void ADCHS_init(void)
{
     690:	b508      	push	{r3, lr}
  uint32_t i;

  ADCHS_init_stop();
     692:	f7ff ffbd 	bl	610 <ADCHS_init_stop>

  LPC_ADCHS->CONFIG =
     696:	2300      	movs	r3, #0
     698:	f2c4 030f 	movt	r3, #16399	; 0x400f
  ( 0x0  << 4 ) |
  ( 0x0  << 5 ) |
  ( 0x90 << 6 );

  /* Configure and Enable ADCHS for fADC less than 30MS/s */
  LPC_ADCHS->POWER_CONTROL =
     69c:	f44f 6282 	mov.w	r2, #1040	; 0x410
     6a0:	f2c0 0206 	movt	r2, #6
{
  uint32_t i;

  ADCHS_init_stop();

  LPC_ADCHS->CONFIG =
     6a4:	f242 4101 	movw	r1, #9217	; 0x2401
     6a8:	61d9      	str	r1, [r3, #28]
  ( 0x0  << 4 ) |
  ( 0x0  << 5 ) |
  ( 0x90 << 6 );

  /* Configure and Enable ADCHS for fADC less than 30MS/s */
  LPC_ADCHS->POWER_CONTROL =
     6aa:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  (0x1 << 4)   |
  (0x1 << 10)  |
  (0 << 16)    |
  (1 << 17)    |
  (1 << 18);
  LPC_ADCHS->ADC_SPEED = 0x0;
     6ae:	2200      	movs	r2, #0
     6b0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

  LPC_ADCHS->FLUSH = 1;
     6b4:	2201      	movs	r2, #1
     6b6:	2005      	movs	r0, #5

  for(i = 0; i < 5; i++ )
  {
    while( LPC_ADCHS->FIFO_STS ); /* Wait until FIFO empty. */
     6b8:	4619      	mov	r1, r3
  (0 << 16)    |
  (1 << 17)    |
  (1 << 18);
  LPC_ADCHS->ADC_SPEED = 0x0;

  LPC_ADCHS->FLUSH = 1;
     6ba:	601a      	str	r2, [r3, #0]

  for(i = 0; i < 5; i++ )
  {
    while( LPC_ADCHS->FIFO_STS ); /* Wait until FIFO empty. */
     6bc:	688a      	ldr	r2, [r1, #8]
     6be:	2300      	movs	r3, #0
     6c0:	f2c4 030f 	movt	r3, #16399	; 0x400f
     6c4:	2a00      	cmp	r2, #0
     6c6:	d1f9      	bne.n	6bc <ADCHS_init+0x2c>
  (1 << 18);
  LPC_ADCHS->ADC_SPEED = 0x0;

  LPC_ADCHS->FLUSH = 1;

  for(i = 0; i < 5; i++ )
     6c8:	3801      	subs	r0, #1
     6ca:	d1f7      	bne.n	6bc <ADCHS_init+0x2c>
  {
    while( LPC_ADCHS->FIFO_STS ); /* Wait until FIFO empty. */
  }

  /* Configure Threshold A & B to default value (even if not used) */
  LPC_ADCHS->THR_A = 0x00FFF000;
     6cc:	f44f 4270 	mov.w	r2, #61440	; 0xf000
     6d0:	f2c0 02ff 	movt	r2, #255	; 0xff
  LPC_ADCHS->THR_B = 0x00FFF000;

  /* Configure Interrupt 0 & 1 Enable register to default value (even if not used) */
  LPC_ADCHS->CLR_EN0   = STATUS0_CLEAR_MASK;
     6d4:	207f      	movs	r0, #127	; 0x7f
  LPC_ADCHS->CLR_STAT0 = STATUS0_CLEAR_MASK;
  LPC_ADCHS->CLR_EN1   = STATUS1_CLEAR_MASK;
     6d6:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
  {
    while( LPC_ADCHS->FIFO_STS ); /* Wait until FIFO empty. */
  }

  /* Configure Threshold A & B to default value (even if not used) */
  LPC_ADCHS->THR_A = 0x00FFF000;
     6da:	621a      	str	r2, [r3, #32]
  LPC_ADCHS->THR_B = 0x00FFF000;
     6dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure Interrupt 0 & 1 Enable register to default value (even if not used) */
  LPC_ADCHS->CLR_EN0   = STATUS0_CLEAR_MASK;
     6de:	f8c3 0f00 	str.w	r0, [r3, #3840]	; 0xf00
  LPC_ADCHS->CLR_STAT0 = STATUS0_CLEAR_MASK;
     6e2:	f8c3 0f10 	str.w	r0, [r3, #3856]	; 0xf10
  LPC_ADCHS->CLR_EN1   = STATUS1_CLEAR_MASK;
     6e6:	f8c3 1f20 	str.w	r1, [r3, #3872]	; 0xf20
  LPC_ADCHS->CLR_STAT1 = STATUS1_CLEAR_MASK;
     6ea:	f8c3 1f30 	str.w	r1, [r3, #3888]	; 0xf30
     6ee:	bd08      	pop	{r3, pc}

000006f0 <ADCHS_desc_init>:

}

void ADCHS_desc_init(uint8_t chan_num)
{
  LPC_ADCHS->DSCR_STS =
     6f0:	2300      	movs	r3, #0
     6f2:	f2c4 030f 	movt	r3, #16399	; 0x400f
  (0 << 4)        |
  (0 << 5)        |
  (0x2 << 6)      |
  (1 << 8)        |
  (0 << 22)       |
  (1 << 24)       |
     6f6:	f040 4001 	orr.w	r0, r0, #2164260864	; 0x81000000
     6fa:	f440 72c0 	orr.w	r2, r0, #384	; 0x180

}

void ADCHS_desc_init(uint8_t chan_num)
{
  LPC_ADCHS->DSCR_STS =
     6fe:	2101      	movs	r1, #1
  (0 << 4)        |
  (0 << 5)        |
  (0x1 << 6)      |
  (0 << 8)        |
  (0 << 22)       |
  (1 << 24)       |
     700:	f040 0040 	orr.w	r0, r0, #64	; 0x40

}

void ADCHS_desc_init(uint8_t chan_num)
{
  LPC_ADCHS->DSCR_STS =
     704:	6159      	str	r1, [r3, #20]
    (1<<0) |
    (0<<1);

  LPC_ADCHS->DESCRIPTOR_1[0] =
     706:	f8c3 2320 	str.w	r2, [r3, #800]	; 0x320
  (1 << 8)        |
  (0 << 22)       |
  (1 << 24)       |
  (0x1U << 31);

  LPC_ADCHS->DESCRIPTOR_0[0] =
     70a:	f8c3 0300 	str.w	r0, [r3, #768]	; 0x300
     70e:	4770      	bx	lr

00000710 <hard_fault_handler>:
  __asm__("B hard_fault_handler_c");
  __asm__("_MSP:");
  __asm__("MRS R0, MSP");
  __asm__("B hard_fault_handler_c");
#elif defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7EM__)
  __asm__("TST LR, #4");
     710:	f01e 0f04 	tst.w	lr, #4
  __asm__("ITE EQ");
     714:	bf0c      	ite	eq
  __asm__("MRSEQ R0, MSP");
     716:	f3ef 8008 	mrseq	r0, MSP
  __asm__("MRSNE R0, PSP");
     71a:	f3ef 8009 	mrsne	r0, PSP
  __asm__("B hard_fault_handler_c");
     71e:	f000 b801 	b.w	724 <hard_fault_handler_c>
     722:	bf00      	nop

00000724 <hard_fault_handler_c>:
volatile hard_fault_stack_t* hard_fault_stack_pt;

__attribute__((used)) void hard_fault_handler_c(uint32_t* args)
{
  /* hard_fault_stack_pt contains registers saved before the hard fault */
  hard_fault_stack_pt = (hard_fault_stack_t*)args;
     724:	4b01      	ldr	r3, [pc, #4]	; (72c <hard_fault_handler_c+0x8>)
     726:	6018      	str	r0, [r3, #0]
      if( SCB->CFSR & CSCB_CFSR_BFSR_PRECISERR ) {
      }
    }
  }
  */
  __asm("BKPT #0\n") ; // Break into the debugger
     728:	be00      	bkpt	0x0000
     72a:	e7fe      	b.n	72a <hard_fault_handler_c+0x6>
     72c:	10080080 	.word	0x10080080

00000730 <mem_manage_handler>:

  while(1);
}

void mem_manage_handler() {
     730:	e7fe      	b.n	730 <mem_manage_handler>
     732:	bf00      	nop

00000734 <bus_fault_handler>:
  while(1);
}

void bus_fault_handler() {
     734:	e7fe      	b.n	734 <bus_fault_handler>
     736:	bf00      	nop

00000738 <usage_fault_handler>:
  while(1);
}

void usage_fault_handler() {
     738:	e7fe      	b.n	738 <usage_fault_handler>
     73a:	bf00      	nop

0000073c <sys_clock_samplerate>:

  while(1);
}

void sys_clock_samplerate(const airspy_sys_samplerate_t* const pt_airspy_sys_samplerate)
{
     73c:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t pll0audio_npdiv;
  uint32_t pll0audio_ctrl_flags;

  pll0audio_mdiv = pt_airspy_sys_samplerate->pll0audio_mdiv;
  pll0audio_npdiv = pt_airspy_sys_samplerate->pll0audio_npdiv;
  pll0audio_ctrl_flags = pt_airspy_sys_samplerate->pll0audio_ctrl_flags;
     73e:	e890 00e0 	ldmia.w	r0, {r5, r6, r7}

  /* Power Down ADCHS Clock */
  CGU_BASE_ADCHS_CLK = CGU_BASE_ADCHS_CLK_PD;
     742:	228c      	movs	r2, #140	; 0x8c
  /* Power Down PLL0AUDIO */
  CGU_PLL0AUDIO_CTRL = CGU_PLL0AUDIO_CTRL_PD;
     744:	2430      	movs	r4, #48	; 0x30
  /* Power Down IDIVB */
  CGU_IDIVB_CTRL = CGU_IDIVB_CTRL_PD;
     746:	214c      	movs	r1, #76	; 0x4c
  pll0audio_mdiv = pt_airspy_sys_samplerate->pll0audio_mdiv;
  pll0audio_npdiv = pt_airspy_sys_samplerate->pll0audio_npdiv;
  pll0audio_ctrl_flags = pt_airspy_sys_samplerate->pll0audio_ctrl_flags;

  /* Power Down ADCHS Clock */
  CGU_BASE_ADCHS_CLK = CGU_BASE_ADCHS_CLK_PD;
     748:	f2c4 0205 	movt	r2, #16389	; 0x4005
  /* Power Down PLL0AUDIO */
  CGU_PLL0AUDIO_CTRL = CGU_PLL0AUDIO_CTRL_PD;
     74c:	f2c4 0405 	movt	r4, #16389	; 0x4005
  /* Power Down IDIVB */
  CGU_IDIVB_CTRL = CGU_IDIVB_CTRL_PD;
     750:	f2c4 0105 	movt	r1, #16389	; 0x4005
  pll0audio_mdiv = pt_airspy_sys_samplerate->pll0audio_mdiv;
  pll0audio_npdiv = pt_airspy_sys_samplerate->pll0audio_npdiv;
  pll0audio_ctrl_flags = pt_airspy_sys_samplerate->pll0audio_ctrl_flags;

  /* Power Down ADCHS Clock */
  CGU_BASE_ADCHS_CLK = CGU_BASE_ADCHS_CLK_PD;
     754:	2301      	movs	r3, #1
     756:	6013      	str	r3, [r2, #0]
  /* Power Down PLL0AUDIO */
  CGU_PLL0AUDIO_CTRL = CGU_PLL0AUDIO_CTRL_PD;
     758:	6023      	str	r3, [r4, #0]
  /* Power Down IDIVB */
  CGU_IDIVB_CTRL = CGU_IDIVB_CTRL_PD;
     75a:	600b      	str	r3, [r1, #0]

  if( (pll0audio_mdiv == 0) &&
     75c:	b90d      	cbnz	r5, 762 <sys_clock_samplerate+0x26>
     75e:	2e00      	cmp	r6, #0
     760:	d032      	beq.n	7c8 <sys_clock_samplerate+0x8c>

  }else
  {
    /* ADCHS Clock CGU_BASE_ADCHS_CLK => Clock Source PLL0AUDIO */
    /* Use CGU_SRC_GP_CLKIN as clock source for PLL0AUDIO */
    CGU_PLL0AUDIO_CTRL = CGU_PLL0AUDIO_CTRL_PD
     762:	2030      	movs	r0, #48	; 0x30
     764:	f2c4 0005 	movt	r0, #16389	; 0x4005
     768:	f640 0101 	movw	r1, #2049	; 0x801
     76c:	f2c0 4100 	movt	r1, #1024	; 0x400
        | CGU_PLL0AUDIO_CTRL_AUTOBLOCK
        | CGU_PLL0AUDIO_CTRL_CLK_SEL(CGU_SRC_GP_CLKIN);
    while (CGU_PLL0AUDIO_STAT & CGU_PLL0AUDIO_STAT_LOCK);
     770:	222c      	movs	r2, #44	; 0x2c

  }else
  {
    /* ADCHS Clock CGU_BASE_ADCHS_CLK => Clock Source PLL0AUDIO */
    /* Use CGU_SRC_GP_CLKIN as clock source for PLL0AUDIO */
    CGU_PLL0AUDIO_CTRL = CGU_PLL0AUDIO_CTRL_PD
     772:	6001      	str	r1, [r0, #0]
        | CGU_PLL0AUDIO_CTRL_AUTOBLOCK
        | CGU_PLL0AUDIO_CTRL_CLK_SEL(CGU_SRC_GP_CLKIN);
    while (CGU_PLL0AUDIO_STAT & CGU_PLL0AUDIO_STAT_LOCK);
     774:	f2c4 0205 	movt	r2, #16389	; 0x4005
     778:	6813      	ldr	r3, [r2, #0]
     77a:	07d9      	lsls	r1, r3, #31
     77c:	d4fc      	bmi.n	778 <sys_clock_samplerate+0x3c>
    /* configure PLL0AUDIO to produce xxMHz */
    /* PLL Register settings (SEL_EXT=1):
       Mdec=31=PLL0_MDIV[16:0] => CGU_PLL0AUDIO_MDIV
       Ndec=0=PLL0_NPDIV[21:12], Pdec=21=PLL0_NPDIV[6:0] => CGU_PLL0AUDIO_NP_DIV
   */
    CGU_PLL0AUDIO_MDIV = pll0audio_mdiv;
     77e:	2034      	movs	r0, #52	; 0x34
    CGU_PLL0AUDIO_NP_DIV = pll0audio_npdiv;
     780:	2138      	movs	r1, #56	; 0x38
    /* configure PLL0AUDIO to produce xxMHz */
    /* PLL Register settings (SEL_EXT=1):
       Mdec=31=PLL0_MDIV[16:0] => CGU_PLL0AUDIO_MDIV
       Ndec=0=PLL0_NPDIV[21:12], Pdec=21=PLL0_NPDIV[6:0] => CGU_PLL0AUDIO_NP_DIV
   */
    CGU_PLL0AUDIO_MDIV = pll0audio_mdiv;
     782:	f2c4 0005 	movt	r0, #16389	; 0x4005
    CGU_PLL0AUDIO_NP_DIV = pll0audio_npdiv;
     786:	f2c4 0105 	movt	r1, #16389	; 0x4005
    CGU_PLL0AUDIO_CTRL |= (CGU_PLL0AUDIO_CTRL_PD
     78a:	2330      	movs	r3, #48	; 0x30
     78c:	f2c4 0305 	movt	r3, #16389	; 0x4005
    /* configure PLL0AUDIO to produce xxMHz */
    /* PLL Register settings (SEL_EXT=1):
       Mdec=31=PLL0_MDIV[16:0] => CGU_PLL0AUDIO_MDIV
       Ndec=0=PLL0_NPDIV[21:12], Pdec=21=PLL0_NPDIV[6:0] => CGU_PLL0AUDIO_NP_DIV
   */
    CGU_PLL0AUDIO_MDIV = pll0audio_mdiv;
     790:	6005      	str	r5, [r0, #0]
    CGU_PLL0AUDIO_NP_DIV = pll0audio_npdiv;
     792:	600e      	str	r6, [r1, #0]
    CGU_PLL0AUDIO_CTRL |= (CGU_PLL0AUDIO_CTRL_PD
     794:	681a      	ldr	r2, [r3, #0]
     796:	ea47 0002 	orr.w	r0, r7, r2
     79a:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
     79e:	f041 0211 	orr.w	r2, r1, #17
     7a2:	601a      	str	r2, [r3, #0]
        | pll0audio_ctrl_flags
        | CGU_PLL0AUDIO_CTRL_SEL_EXT
        | CGU_PLL0AUDIO_CTRL_CLKEN);

    /* power on PLL0AUDIO and wait until stable */
    CGU_PLL0AUDIO_CTRL &= ~CGU_PLL0AUDIO_CTRL_PD;
     7a4:	6818      	ldr	r0, [r3, #0]
    while (!(CGU_PLL0AUDIO_STAT & CGU_PLL0AUDIO_STAT_LOCK));
     7a6:	222c      	movs	r2, #44	; 0x2c
        | pll0audio_ctrl_flags
        | CGU_PLL0AUDIO_CTRL_SEL_EXT
        | CGU_PLL0AUDIO_CTRL_CLKEN);

    /* power on PLL0AUDIO and wait until stable */
    CGU_PLL0AUDIO_CTRL &= ~CGU_PLL0AUDIO_CTRL_PD;
     7a8:	f020 0101 	bic.w	r1, r0, #1
     7ac:	6019      	str	r1, [r3, #0]
    while (!(CGU_PLL0AUDIO_STAT & CGU_PLL0AUDIO_STAT_LOCK));
     7ae:	f2c4 0205 	movt	r2, #16389	; 0x4005
     7b2:	6813      	ldr	r3, [r2, #0]
     7b4:	07db      	lsls	r3, r3, #31
     7b6:	d5fc      	bpl.n	7b2 <sys_clock_samplerate+0x76>

    /* use PLL0AUDIO as clock source for ADCHS */
    CGU_BASE_ADCHS_CLK = CGU_BASE_ADCHS_CLK_AUTOBLOCK
     7b8:	208c      	movs	r0, #140	; 0x8c
     7ba:	f2c4 0005 	movt	r0, #16389	; 0x4005
     7be:	f04f 2208 	mov.w	r2, #134219776	; 0x8000800
     7c2:	6002      	str	r2, [r0, #0]
        | CGU_BASE_ADCHS_CLK_CLK_SEL(CGU_SRC_PLL0AUDIO);
  }
}
     7c4:	bcf0      	pop	{r4, r5, r6, r7}
     7c6:	4770      	bx	lr
  CGU_IDIVB_CTRL = CGU_IDIVB_CTRL_PD;

  if( (pll0audio_mdiv == 0) &&
      (pll0audio_npdiv == 0) )
  {
    if( pt_airspy_sys_samplerate->idivb == 0)
     7c8:	7b03      	ldrb	r3, [r0, #12]
     7ca:	b92b      	cbnz	r3, 7d8 <sys_clock_samplerate+0x9c>
    {
      /* Do not use IDIVB direct connection CGU_SRC_GP_CLKIN to ACHS_CLK */
      /* ADCHS Clock CGU_BASE_ADCHS_CLK => Clock Source CLK_IN */
      CGU_BASE_ADCHS_CLK = CGU_BASE_ADCHS_CLK_AUTOBLOCK
     7cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
     7d0:	f2c0 4100 	movt	r1, #1024	; 0x400
     7d4:	6011      	str	r1, [r2, #0]
     7d6:	e7f5      	b.n	7c4 <sys_clock_samplerate+0x88>
          | CGU_BASE_ADCHS_CLK_CLK_SEL(CGU_SRC_GP_CLKIN);
    }else
    {
      /* ADCHS Clock CGU_BASE_ADCHS_CLK => Clock Source IDIVB */
      /* Use CGU_SRC_GP_CLKIN as clock source for IDIVB */
      CGU_IDIVB_CTRL = CGU_IDIVB_CTRL_IDIV(pt_airspy_sys_samplerate->idivb)
     7d8:	0098      	lsls	r0, r3, #2
          | CGU_IDIVB_CTRL_AUTOBLOCK
          | CGU_IDIVB_CTRL_CLK_SEL(CGU_SRC_GP_CLKIN);
     7da:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000

      /* ADCHS Clock CGU_BASE_ADCHS_CLK => Clock Source CLK_IDIVB */
      CGU_BASE_ADCHS_CLK = CGU_BASE_ADCHS_CLK_AUTOBLOCK
     7de:	f44f 6300 	mov.w	r3, #2048	; 0x800
    {
      /* ADCHS Clock CGU_BASE_ADCHS_CLK => Clock Source IDIVB */
      /* Use CGU_SRC_GP_CLKIN as clock source for IDIVB */
      CGU_IDIVB_CTRL = CGU_IDIVB_CTRL_IDIV(pt_airspy_sys_samplerate->idivb)
          | CGU_IDIVB_CTRL_AUTOBLOCK
          | CGU_IDIVB_CTRL_CLK_SEL(CGU_SRC_GP_CLKIN);
     7e2:	4318      	orrs	r0, r3

      /* ADCHS Clock CGU_BASE_ADCHS_CLK => Clock Source CLK_IDIVB */
      CGU_BASE_ADCHS_CLK = CGU_BASE_ADCHS_CLK_AUTOBLOCK
     7e4:	f6c0 5300 	movt	r3, #3328	; 0xd00
          | CGU_BASE_ADCHS_CLK_CLK_SEL(CGU_SRC_GP_CLKIN);
    }else
    {
      /* ADCHS Clock CGU_BASE_ADCHS_CLK => Clock Source IDIVB */
      /* Use CGU_SRC_GP_CLKIN as clock source for IDIVB */
      CGU_IDIVB_CTRL = CGU_IDIVB_CTRL_IDIV(pt_airspy_sys_samplerate->idivb)
     7e8:	6008      	str	r0, [r1, #0]
          | CGU_IDIVB_CTRL_AUTOBLOCK
          | CGU_IDIVB_CTRL_CLK_SEL(CGU_SRC_GP_CLKIN);

      /* ADCHS Clock CGU_BASE_ADCHS_CLK => Clock Source CLK_IDIVB */
      CGU_BASE_ADCHS_CLK = CGU_BASE_ADCHS_CLK_AUTOBLOCK
     7ea:	6013      	str	r3, [r2, #0]
     7ec:	e7ea      	b.n	7c4 <sys_clock_samplerate+0x88>
     7ee:	bf00      	nop

000007f0 <cpu_clock_pll1_low_speed>:
  /* Configure PLL1 Clock */
  /* Integer mode:
    FCLKOUT = M*(FCLKIN/N)
    FCCO = 2*P*FCLKOUT = 2*P*M*(FCLKIN/N)
  */
  pll_reg = CGU_PLL1_CTRL;
     7f0:	2144      	movs	r1, #68	; 0x44
     7f2:	f2c4 0105 	movt	r1, #16389	; 0x4005
 Connect PLL1 to M4/M0 core, Peripheral, APB1, APB3.
 Init I2C0 & I2C1.
This function is mainly used to lower power consumption.
*/
void cpu_clock_pll1_low_speed(const airspy_pll1_ls_t* const pt_airspy_pll1_ls_conf)
{
     7f6:	b470      	push	{r4, r5, r6}
    FCLKOUT = M*(FCLKIN/N)
    FCCO = 2*P*FCLKOUT = 2*P*M*(FCLKIN/N)
  */
  pll_reg = CGU_PLL1_CTRL;
  /* Clear PLL1 bits */
  pll_reg &= ~( CGU_PLL1_CTRL_CLK_SEL_MASK | CGU_PLL1_CTRL_PD | CGU_PLL1_CTRL_FBSEL |  /* CLK SEL, PowerDown , FBSEL */
     7f8:	f64c 433c 	movw	r3, #52284	; 0xcc3c
  /* Configure PLL1 Clock */
  /* Integer mode:
    FCLKOUT = M*(FCLKIN/N)
    FCCO = 2*P*FCLKOUT = 2*P*M*(FCLKIN/N)
  */
  pll_reg = CGU_PLL1_CTRL;
     7fc:	680e      	ldr	r6, [r1, #0]
          CGU_PLL1_CTRL_BYPASS | /* BYPASS */
          CGU_PLL1_CTRL_DIRECT | /* DIRECT */
          CGU_PLL1_CTRL_PSEL_MASK | CGU_PLL1_CTRL_MSEL_MASK | CGU_PLL1_CTRL_NSEL_MASK ); /* PSEL, MSEL, NSEL- divider ratios */
  /* Set PLL1 */
  pll_reg |= CGU_PLL1_CTRL_CLK_SEL(CGU_SRC_GP_CLKIN)
        | CGU_PLL1_CTRL_PSEL(pll1_psel)
     7fe:	6805      	ldr	r5, [r0, #0]
        | CGU_PLL1_CTRL_NSEL(pll1_nsel)
        | CGU_PLL1_CTRL_MSEL(pll1_msel)
     800:	6882      	ldr	r2, [r0, #8]
          CGU_PLL1_CTRL_DIRECT | /* DIRECT */
          CGU_PLL1_CTRL_PSEL_MASK | CGU_PLL1_CTRL_MSEL_MASK | CGU_PLL1_CTRL_NSEL_MASK ); /* PSEL, MSEL, NSEL- divider ratios */
  /* Set PLL1 */
  pll_reg |= CGU_PLL1_CTRL_CLK_SEL(CGU_SRC_GP_CLKIN)
        | CGU_PLL1_CTRL_PSEL(pll1_psel)
        | CGU_PLL1_CTRL_NSEL(pll1_nsel)
     802:	6844      	ldr	r4, [r0, #4]
    FCLKOUT = M*(FCLKIN/N)
    FCCO = 2*P*FCLKOUT = 2*P*M*(FCLKIN/N)
  */
  pll_reg = CGU_PLL1_CTRL;
  /* Clear PLL1 bits */
  pll_reg &= ~( CGU_PLL1_CTRL_CLK_SEL_MASK | CGU_PLL1_CTRL_PD | CGU_PLL1_CTRL_FBSEL |  /* CLK SEL, PowerDown , FBSEL */
     804:	f2ce 0300 	movt	r3, #57344	; 0xe000
     808:	4033      	ands	r3, r6
          CGU_PLL1_CTRL_DIRECT | /* DIRECT */
          CGU_PLL1_CTRL_PSEL_MASK | CGU_PLL1_CTRL_MSEL_MASK | CGU_PLL1_CTRL_NSEL_MASK ); /* PSEL, MSEL, NSEL- divider ratios */
  /* Set PLL1 */
  pll_reg |= CGU_PLL1_CTRL_CLK_SEL(CGU_SRC_GP_CLKIN)
        | CGU_PLL1_CTRL_PSEL(pll1_psel)
        | CGU_PLL1_CTRL_NSEL(pll1_nsel)
     80a:	ea43 2005 	orr.w	r0, r3, r5, lsl #8
        | CGU_PLL1_CTRL_MSEL(pll1_msel)
     80e:	f040 6380 	orr.w	r3, r0, #67108864	; 0x4000000
     812:	f043 00c0 	orr.w	r0, r3, #192	; 0xc0
  pll_reg &= ~( CGU_PLL1_CTRL_CLK_SEL_MASK | CGU_PLL1_CTRL_PD | CGU_PLL1_CTRL_FBSEL |  /* CLK SEL, PowerDown , FBSEL */
          CGU_PLL1_CTRL_BYPASS | /* BYPASS */
          CGU_PLL1_CTRL_DIRECT | /* DIRECT */
          CGU_PLL1_CTRL_PSEL_MASK | CGU_PLL1_CTRL_MSEL_MASK | CGU_PLL1_CTRL_NSEL_MASK ); /* PSEL, MSEL, NSEL- divider ratios */
  /* Set PLL1 */
  pll_reg |= CGU_PLL1_CTRL_CLK_SEL(CGU_SRC_GP_CLKIN)
     816:	ea40 3304 	orr.w	r3, r0, r4, lsl #12
     81a:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
        | CGU_PLL1_CTRL_MSEL(pll1_msel)
        | CGU_PLL1_CTRL_FBSEL
        | CGU_PLL1_CTRL_DIRECT;
  CGU_PLL1_CTRL = pll_reg;
  /* wait until stable */
  while (!(CGU_PLL1_STAT & CGU_PLL1_STAT_LOCK));
     81e:	2240      	movs	r2, #64	; 0x40
        | CGU_PLL1_CTRL_PSEL(pll1_psel)
        | CGU_PLL1_CTRL_NSEL(pll1_nsel)
        | CGU_PLL1_CTRL_MSEL(pll1_msel)
        | CGU_PLL1_CTRL_FBSEL
        | CGU_PLL1_CTRL_DIRECT;
  CGU_PLL1_CTRL = pll_reg;
     820:	6008      	str	r0, [r1, #0]
  /* wait until stable */
  while (!(CGU_PLL1_STAT & CGU_PLL1_STAT_LOCK));
     822:	f2c4 0205 	movt	r2, #16389	; 0x4005
     826:	6811      	ldr	r1, [r2, #0]
     828:	07c8      	lsls	r0, r1, #31
     82a:	d5fc      	bpl.n	826 <cpu_clock_pll1_low_speed+0x36>

}
     82c:	bc70      	pop	{r4, r5, r6}
     82e:	4770      	bx	lr

00000830 <sys_clock_init>:

  /*
   * 12MHz clock is entering LPC XTAL1/OSC input now.
   */
  /* set xtal oscillator to low frequency mode */
  CGU_XTAL_OSC_CTRL &= ~CGU_XTAL_OSC_CTRL_HF;
     830:	2218      	movs	r2, #24
     832:	f2c4 0205 	movt	r2, #16389	; 0x4005
Configure PLL1 to min speed (48MHz) => see cpu_clock_pll1_low_speed() .
Configure PLL0USB @480MHz for USB0.
Note: PLL1 clock is used by M4/M0 core, Peripheral, APB1, APB3.
*/
void sys_clock_init(void) 
{
     836:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /*
   * 12MHz clock is entering LPC XTAL1/OSC input now.
   */
  /* set xtal oscillator to low frequency mode */
  CGU_XTAL_OSC_CTRL &= ~CGU_XTAL_OSC_CTRL_HF;
     83a:	6811      	ldr	r1, [r2, #0]
     83c:	f021 0004 	bic.w	r0, r1, #4
     840:	6010      	str	r0, [r2, #0]

  /* power on the oscillator and wait until stable */
  CGU_XTAL_OSC_CTRL &= ~CGU_XTAL_OSC_CTRL_ENABLE;
     842:	6814      	ldr	r4, [r2, #0]
     844:	f024 0501 	bic.w	r5, r4, #1
Configure PLL1 to min speed (48MHz) => see cpu_clock_pll1_low_speed() .
Configure PLL0USB @480MHz for USB0.
Note: PLL1 clock is used by M4/M0 core, Peripheral, APB1, APB3.
*/
void sys_clock_init(void) 
{
     848:	b095      	sub	sp, #84	; 0x54
   */
  /* set xtal oscillator to low frequency mode */
  CGU_XTAL_OSC_CTRL &= ~CGU_XTAL_OSC_CTRL_HF;

  /* power on the oscillator and wait until stable */
  CGU_XTAL_OSC_CTRL &= ~CGU_XTAL_OSC_CTRL_ENABLE;
     84a:	f242 7610 	movw	r6, #10000	; 0x2710
     84e:	6015      	str	r5, [r2, #0]
void delay(uint32_t duration)
{
  uint32_t i;

  for (i = 0; i < duration; i++)
    __asm__("nop");
     850:	bf00      	nop
     852:	1e73      	subs	r3, r6, #1
     854:	bf00      	nop

void delay(uint32_t duration)
{
  uint32_t i;

  for (i = 0; i < duration; i++)
     856:	1e5e      	subs	r6, r3, #1
     858:	d1fa      	bne.n	850 <sys_clock_init+0x20>
     defined in User Manual 10503.pdf Rev1.8 See Fig 30. BASE_M4_CLK ramp-up procedure 
  */
  delay(WAIT_CPU_CLOCK_INIT_DELAY);

  /* Use CGU_SRC_XTAL as clock source for BASE_M4_CLK (CPU) */
  CGU_BASE_M4_CLK = (CGU_BASE_M4_CLK_CLK_SEL(CGU_SRC_XTAL) | CGU_BASE_M4_CLK_AUTOBLOCK);
     85a:	276c      	movs	r7, #108	; 0x6c

  /* Use CGU_SRC_XTAL as clock source for Peripheral */
  CGU_BASE_PERIPH_CLK = CGU_BASE_PERIPH_CLK_AUTOBLOCK
     85c:	2464      	movs	r4, #100	; 0x64
      | CGU_BASE_PERIPH_CLK_CLK_SEL(CGU_SRC_XTAL);

  /* Use CGU_SRC_XTAL as clock source for APB1 */
  CGU_BASE_APB1_CLK = CGU_BASE_APB1_CLK_AUTOBLOCK
     85e:	2180      	movs	r1, #128	; 0x80
      | CGU_BASE_APB1_CLK_CLK_SEL(CGU_SRC_XTAL);

  /* Use CGU_SRC_XTAL as clock source for APB3 */
  CGU_BASE_APB3_CLK = CGU_BASE_APB3_CLK_AUTOBLOCK
     860:	2284      	movs	r2, #132	; 0x84
  /* Use CGU_SRC_XTAL as clock source for Peripheral */
  CGU_BASE_PERIPH_CLK = CGU_BASE_PERIPH_CLK_AUTOBLOCK
      | CGU_BASE_PERIPH_CLK_CLK_SEL(CGU_SRC_XTAL);

  /* Use CGU_SRC_XTAL as clock source for APB1 */
  CGU_BASE_APB1_CLK = CGU_BASE_APB1_CLK_AUTOBLOCK
     862:	f2c4 0105 	movt	r1, #16389	; 0x4005
      | CGU_BASE_APB1_CLK_CLK_SEL(CGU_SRC_XTAL);

  /* Use CGU_SRC_XTAL as clock source for APB3 */
  CGU_BASE_APB3_CLK = CGU_BASE_APB3_CLK_AUTOBLOCK
     866:	f2c4 0205 	movt	r2, #16389	; 0x4005
     defined in User Manual 10503.pdf Rev1.8 See Fig 30. BASE_M4_CLK ramp-up procedure 
  */
  delay(WAIT_CPU_CLOCK_INIT_DELAY);

  /* Use CGU_SRC_XTAL as clock source for BASE_M4_CLK (CPU) */
  CGU_BASE_M4_CLK = (CGU_BASE_M4_CLK_CLK_SEL(CGU_SRC_XTAL) | CGU_BASE_M4_CLK_AUTOBLOCK);
     86a:	f2c4 0705 	movt	r7, #16389	; 0x4005

  /* Use CGU_SRC_XTAL as clock source for Peripheral */
  CGU_BASE_PERIPH_CLK = CGU_BASE_PERIPH_CLK_AUTOBLOCK
     86e:	f2c4 0405 	movt	r4, #16389	; 0x4005
     defined in User Manual 10503.pdf Rev1.8 See Fig 30. BASE_M4_CLK ramp-up procedure 
  */
  delay(WAIT_CPU_CLOCK_INIT_DELAY);

  /* Use CGU_SRC_XTAL as clock source for BASE_M4_CLK (CPU) */
  CGU_BASE_M4_CLK = (CGU_BASE_M4_CLK_CLK_SEL(CGU_SRC_XTAL) | CGU_BASE_M4_CLK_AUTOBLOCK);
     872:	f44f 6500 	mov.w	r5, #2048	; 0x800
     876:	f2c0 6500 	movt	r5, #1536	; 0x600
     87a:	603d      	str	r5, [r7, #0]
   *   CLK5 -> NC
   *   CLK6 -> NC
   *   CLK7 -> LPC4370 Main Clock xxMHz.
   */
  /* Configure I2C0 (for SI5351C) to about 375kHz (12MHz/(2*16)=0.375MHz) when we switch over to APB1 clock = 12MHz */
  i2c0_init(16);
     87c:	2010      	movs	r0, #16

  /* Use CGU_SRC_XTAL as clock source for BASE_M4_CLK (CPU) */
  CGU_BASE_M4_CLK = (CGU_BASE_M4_CLK_CLK_SEL(CGU_SRC_XTAL) | CGU_BASE_M4_CLK_AUTOBLOCK);

  /* Use CGU_SRC_XTAL as clock source for Peripheral */
  CGU_BASE_PERIPH_CLK = CGU_BASE_PERIPH_CLK_AUTOBLOCK
     87e:	6025      	str	r5, [r4, #0]
      | CGU_BASE_PERIPH_CLK_CLK_SEL(CGU_SRC_XTAL);

  /* Use CGU_SRC_XTAL as clock source for APB1 */
  CGU_BASE_APB1_CLK = CGU_BASE_APB1_CLK_AUTOBLOCK
     880:	600d      	str	r5, [r1, #0]
    /* SI5351C detected continue init using AirSpy NOS configuration */
    addr = (uint32_t)&airspy_nos_conf;
    addr = (addr | ROMFLASH_BASE_ADDR); /* Fix with Addr from ROMFLASH */
    src = (unsigned char *)addr;
    /* Copy the configuration from Flash to SRAM */
    for (dest = (unsigned char *)airspy_conf; (uint32_t)dest < (((uint32_t)airspy_conf) + AIRSPY_CONF_MAX_DATA_SIZE); )
     882:	4c21      	ldr	r4, [pc, #132]	; (908 <sys_clock_init+0xd8>)
  /* Use CGU_SRC_XTAL as clock source for APB1 */
  CGU_BASE_APB1_CLK = CGU_BASE_APB1_CLK_AUTOBLOCK
      | CGU_BASE_APB1_CLK_CLK_SEL(CGU_SRC_XTAL);

  /* Use CGU_SRC_XTAL as clock source for APB3 */
  CGU_BASE_APB3_CLK = CGU_BASE_APB3_CLK_AUTOBLOCK
     884:	6015      	str	r5, [r2, #0]
   *   CLK5 -> NC
   *   CLK6 -> NC
   *   CLK7 -> LPC4370 Main Clock xxMHz.
   */
  /* Configure I2C0 (for SI5351C) to about 375kHz (12MHz/(2*16)=0.375MHz) when we switch over to APB1 clock = 12MHz */
  i2c0_init(16);
     886:	f000 fc59 	bl	113c <i2c0_init>

  if (si5351c_disable_oeb_pin_control() == true)
     88a:	f000 fbc3 	bl	1014 <si5351c_disable_oeb_pin_control>
    /* SI5351C detected continue init using AirSpy NOS configuration */
    addr = (uint32_t)&airspy_nos_conf;
    addr = (addr | ROMFLASH_BASE_ADDR); /* Fix with Addr from ROMFLASH */
    src = (unsigned char *)addr;
    /* Copy the configuration from Flash to SRAM */
    for (dest = (unsigned char *)airspy_conf; (uint32_t)dest < (((uint32_t)airspy_conf) + AIRSPY_CONF_MAX_DATA_SIZE); )
     88e:	4f1f      	ldr	r7, [pc, #124]	; (90c <sys_clock_init+0xdc>)
     890:	6823      	ldr	r3, [r4, #0]
     892:	19d9      	adds	r1, r3, r7
   *   CLK7 -> LPC4370 Main Clock xxMHz.
   */
  /* Configure I2C0 (for SI5351C) to about 375kHz (12MHz/(2*16)=0.375MHz) when we switch over to APB1 clock = 12MHz */
  i2c0_init(16);

  if (si5351c_disable_oeb_pin_control() == true)
     894:	2800      	cmp	r0, #0
     896:	f000 81ed 	beq.w	c74 <conf_data_share_size+0x74>
  {
    /* SI5351C detected continue init using AirSpy NOS configuration */
    addr = (uint32_t)&airspy_nos_conf;
    addr = (addr | ROMFLASH_BASE_ADDR); /* Fix with Addr from ROMFLASH */
     89a:	4e1d      	ldr	r6, [pc, #116]	; (910 <sys_clock_init+0xe0>)
    src = (unsigned char *)addr;
    /* Copy the configuration from Flash to SRAM */
    for (dest = (unsigned char *)airspy_conf; (uint32_t)dest < (((uint32_t)airspy_conf) + AIRSPY_CONF_MAX_DATA_SIZE); )
     89c:	428b      	cmp	r3, r1

  if (si5351c_disable_oeb_pin_control() == true)
  {
    /* SI5351C detected continue init using AirSpy NOS configuration */
    addr = (uint32_t)&airspy_nos_conf;
    addr = (addr | ROMFLASH_BASE_ADDR); /* Fix with Addr from ROMFLASH */
     89e:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
    src = (unsigned char *)addr;
    /* Copy the configuration from Flash to SRAM */
    for (dest = (unsigned char *)airspy_conf; (uint32_t)dest < (((uint32_t)airspy_conf) + AIRSPY_CONF_MAX_DATA_SIZE); )
     8a2:	4618      	mov	r0, r3
     8a4:	f080 823b 	bcs.w	d1e <conf_data_share_size+0x11e>
/*
Configure PLL1 to min speed (48MHz) => see cpu_clock_pll1_low_speed() .
Configure PLL0USB @480MHz for USB0.
Note: PLL1 clock is used by M4/M0 core, Peripheral, APB1, APB3.
*/
void sys_clock_init(void) 
     8a8:	1a1a      	subs	r2, r3, r0
    addr = (addr | ROMFLASH_BASE_ADDR); /* Fix with Addr from ROMFLASH */
    src = (unsigned char *)addr;
    /* Copy the configuration from Flash to SRAM */
    for (dest = (unsigned char *)airspy_conf; (uint32_t)dest < (((uint32_t)airspy_conf) + AIRSPY_CONF_MAX_DATA_SIZE); )
    {
      *dest++ = *src++;
     8aa:	5d91      	ldrb	r1, [r2, r6]
     8ac:	f803 1b01 	strb.w	r1, [r3], #1
    /* SI5351C detected continue init using AirSpy NOS configuration */
    addr = (uint32_t)&airspy_nos_conf;
    addr = (addr | ROMFLASH_BASE_ADDR); /* Fix with Addr from ROMFLASH */
    src = (unsigned char *)addr;
    /* Copy the configuration from Flash to SRAM */
    for (dest = (unsigned char *)airspy_conf; (uint32_t)dest < (((uint32_t)airspy_conf) + AIRSPY_CONF_MAX_DATA_SIZE); )
     8b0:	6825      	ldr	r5, [r4, #0]
     8b2:	19ea      	adds	r2, r5, r7
     8b4:	4293      	cmp	r3, r2
     8b6:	d3f7      	bcc.n	8a8 <sys_clock_init+0x78>
  addr += (sizeof_struct_u16 * nb_struct_u16);
  /* 3rd Expansion Conf Point SI5351C Addr */ 
  airspy_conf->si5351c_config = (si5351c_conf_t*)addr;

  /* Set default r820t_conf_rw.if_freq to airspy_m0_m4_conf[0] => r820t_if_freq  */
  airspy_conf->r820t_conf_rw.if_freq = airspy_conf->airspy_m0_m4_conf[0].airspy_m0_conf.r820t_if_freq;
     8b8:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
  /* 1st Expansion Conf Point M0/M4 Addr */
  airspy_conf->airspy_m0_m4_conf = (airspy_m0_m4_conf_t*)addr;
  sizeof_struct_u16 = airspy_conf->sizeof_airspy_m0_m4_conf_t;
  nb_struct_u16 = airspy_conf->nb_airspy_m0_m4_conf_t;

  addr += (sizeof_struct_u16 * nb_struct_u16);
     8bc:	f8b5 1074 	ldrh.w	r1, [r5, #116]	; 0x74
  addr += (sizeof_struct_u16 * nb_struct_u16);
  /* 3rd Expansion Conf Point SI5351C Addr */ 
  airspy_conf->si5351c_config = (si5351c_conf_t*)addr;

  /* Set default r820t_conf_rw.if_freq to airspy_m0_m4_conf[0] => r820t_if_freq  */
  airspy_conf->r820t_conf_rw.if_freq = airspy_conf->airspy_m0_m4_conf[0].airspy_m0_conf.r820t_if_freq;
     8c0:	652b      	str	r3, [r5, #80]	; 0x50
  /* 1st Expansion Conf Point M0/M4 Addr */
  airspy_conf->airspy_m0_m4_conf = (airspy_m0_m4_conf_t*)addr;
  sizeof_struct_u16 = airspy_conf->sizeof_airspy_m0_m4_conf_t;
  nb_struct_u16 = airspy_conf->nb_airspy_m0_m4_conf_t;

  addr += (sizeof_struct_u16 * nb_struct_u16);
     8c2:	f8b5 e076 	ldrh.w	lr, [r5, #118]	; 0x76
  /* 2nd Expansion Conf Point M0/M4 ALT Addr */ 
  airspy_conf->airspy_m0_m4_alt_conf = (airspy_m0_m4_conf_t*)addr;
  sizeof_struct_u16 = airspy_conf->sizeof_airspy_m0_m4_alt_conf_t;
  nb_struct_u16 = airspy_conf->nb_airspy_m0_m4_alt_conf_t;

  addr += (sizeof_struct_u16 * nb_struct_u16);
     8c6:	f8b5 707e 	ldrh.w	r7, [r5, #126]	; 0x7e
     8ca:	f8b5 607c 	ldrh.w	r6, [r5, #124]	; 0x7c
  airspy_calib_flash = (airspy_calib_t*)(addr);
  airspy_calib.header = airspy_calib_flash->header;
  airspy_calib.timestamp = airspy_calib_flash->timestamp;
  airspy_calib.correction_ppb = airspy_calib_flash->correction_ppb;

  if((airspy_conf->conf_hw.hardware_type & HW_FEATURE_SI5351C) == HW_FEATURE_SI5351C)
     8ce:	6868      	ldr	r0, [r5, #4]
  airspy_conf->r820t_conf_rw.if_freq = airspy_conf->airspy_m0_m4_conf[0].airspy_m0_conf.r820t_if_freq;

  /* Load calibration data */
  addr = (ROMFLASH_BASE_ADDR + AIRSPY_FLASH_CALIB_OFFSET); /* Addr from Flash Configuration 0 (Calibration Data) */
  airspy_calib_flash = (airspy_calib_t*)(addr);
  airspy_calib.header = airspy_calib_flash->header;
     8d0:	2300      	movs	r3, #0
     8d2:	f2c8 0302 	movt	r3, #32770	; 0x8002
      *dest++ = *src++;
    }
  }

  /* Compute & update 1st, 2nd & 3rd Expansion Conf Point Addr */
  addr = ((uint32_t)(&airspy_conf->si5351c_config)) + (sizeof(void *));
     8d6:	f105 028c 	add.w	r2, r5, #140	; 0x8c
  /* 1st Expansion Conf Point M0/M4 Addr */
  airspy_conf->airspy_m0_m4_conf = (airspy_m0_m4_conf_t*)addr;
  sizeof_struct_u16 = airspy_conf->sizeof_airspy_m0_m4_conf_t;
  nb_struct_u16 = airspy_conf->nb_airspy_m0_m4_conf_t;

  addr += (sizeof_struct_u16 * nb_struct_u16);
     8da:	fb0e 2101 	mla	r1, lr, r1, r2
  /* 2nd Expansion Conf Point M0/M4 ALT Addr */ 
  airspy_conf->airspy_m0_m4_alt_conf = (airspy_m0_m4_conf_t*)addr;
  sizeof_struct_u16 = airspy_conf->sizeof_airspy_m0_m4_alt_conf_t;
  nb_struct_u16 = airspy_conf->nb_airspy_m0_m4_alt_conf_t;

  addr += (sizeof_struct_u16 * nb_struct_u16);
     8de:	fb07 1606 	mla	r6, r7, r6, r1
  /* Load calibration data */
  addr = (ROMFLASH_BASE_ADDR + AIRSPY_FLASH_CALIB_OFFSET); /* Addr from Flash Configuration 0 (Calibration Data) */
  airspy_calib_flash = (airspy_calib_t*)(addr);
  airspy_calib.header = airspy_calib_flash->header;
  airspy_calib.timestamp = airspy_calib_flash->timestamp;
  airspy_calib.correction_ppb = airspy_calib_flash->correction_ppb;
     8e2:	f8d3 8008 	ldr.w	r8, [r3, #8]
  airspy_conf->r820t_conf_rw.if_freq = airspy_conf->airspy_m0_m4_conf[0].airspy_m0_conf.r820t_if_freq;

  /* Load calibration data */
  addr = (ROMFLASH_BASE_ADDR + AIRSPY_FLASH_CALIB_OFFSET); /* Addr from Flash Configuration 0 (Calibration Data) */
  airspy_calib_flash = (airspy_calib_t*)(addr);
  airspy_calib.header = airspy_calib_flash->header;
     8e6:	681f      	ldr	r7, [r3, #0]
  }

  /* Compute & update 1st, 2nd & 3rd Expansion Conf Point Addr */
  addr = ((uint32_t)(&airspy_conf->si5351c_config)) + (sizeof(void *));
  /* 1st Expansion Conf Point M0/M4 Addr */
  airspy_conf->airspy_m0_m4_conf = (airspy_m0_m4_conf_t*)addr;
     8e8:	67aa      	str	r2, [r5, #120]	; 0x78
  airspy_calib_flash = (airspy_calib_t*)(addr);
  airspy_calib.header = airspy_calib_flash->header;
  airspy_calib.timestamp = airspy_calib_flash->timestamp;
  airspy_calib.correction_ppb = airspy_calib_flash->correction_ppb;

  if((airspy_conf->conf_hw.hardware_type & HW_FEATURE_SI5351C) == HW_FEATURE_SI5351C)
     8ea:	0783      	lsls	r3, r0, #30
  sizeof_struct_u16 = airspy_conf->sizeof_airspy_m0_m4_conf_t;
  nb_struct_u16 = airspy_conf->nb_airspy_m0_m4_conf_t;

  addr += (sizeof_struct_u16 * nb_struct_u16);
  /* 2nd Expansion Conf Point M0/M4 ALT Addr */ 
  airspy_conf->airspy_m0_m4_alt_conf = (airspy_m0_m4_conf_t*)addr;
     8ec:	f8c5 1080 	str.w	r1, [r5, #128]	; 0x80
  sizeof_struct_u16 = airspy_conf->sizeof_airspy_m0_m4_alt_conf_t;
  nb_struct_u16 = airspy_conf->nb_airspy_m0_m4_alt_conf_t;

  addr += (sizeof_struct_u16 * nb_struct_u16);
  /* 3rd Expansion Conf Point SI5351C Addr */ 
  airspy_conf->si5351c_config = (si5351c_conf_t*)addr;
     8f0:	f8c5 6088 	str.w	r6, [r5, #136]	; 0x88
  airspy_calib_flash = (airspy_calib_t*)(addr);
  airspy_calib.header = airspy_calib_flash->header;
  airspy_calib.timestamp = airspy_calib_flash->timestamp;
  airspy_calib.correction_ppb = airspy_calib_flash->correction_ppb;

  if((airspy_conf->conf_hw.hardware_type & HW_FEATURE_SI5351C) == HW_FEATURE_SI5351C)
     8f4:	f100 81cd 	bmi.w	c92 <conf_data_share_size+0x92>
    delay(WAIT_CPU_CLOCK_INIT_DELAY);
    si5351c_read[3] = si5351c_read_single(0);
  }else
  {
    /* Check calibration is valid / enabled */
    if(airspy_calib.header == AIRSPY_FLASH_CALIB_HEADER)
     8f8:	2201      	movs	r2, #1
     8fa:	f6cc 221b 	movt	r2, #51739	; 0xca1b
     8fe:	4297      	cmp	r7, r2
     900:	f000 81f8 	beq.w	cf4 <conf_data_share_size+0xf4>
     904:	e006      	b.n	914 <sys_clock_init+0xe4>
     906:	bf00      	nop
     908:	10080018 	.word	0x10080018
     90c:	00000c00 	.word	0x00000c00
     910:	000050dc 	.word	0x000050dc

  /* ********************************************************************* */
  /*  M4/M0 core, Peripheral, APB1, APB3 Configuration (PLL1 clock source) */
  /* ********************************************************************* */
  /* Configure PLL1 with CGU_SRC_GP_CLKIN as source clock */
  cpu_clock_pll1_low_speed(&pt_airspy_sys_conf->pll1_ls);
     914:	f105 003c 	add.w	r0, r5, #60	; 0x3c
     918:	f7ff ff6a 	bl	7f0 <cpu_clock_pll1_low_speed>

  /* Configure I2C0 (for SI5351C) to 400kHz when we switch over to APB1 clock = PLL1 */
  i2c0_init(airspy_conf->i2c_conf.i2c0_pll1_ls_hs_conf_val);
     91c:	6826      	ldr	r6, [r4, #0]
     91e:	8b30      	ldrh	r0, [r6, #24]
     920:	f000 fc0c 	bl	113c <i2c0_init>
  /* Configure I2C1 (for R820T) to 400kHz when we switch over to APB3 clock = PLL1 */
  i2c1_init(airspy_conf->i2c_conf.i2c1_pll1_ls_conf_val);
     924:	6820      	ldr	r0, [r4, #0]
     926:	8b80      	ldrh	r0, [r0, #28]
     928:	f000 fc28 	bl	117c <i2c1_init>

  /* ************************************************** */
  /* Connect PLL1 to M4/M0 core, Peripheral, APB1, APB3 */
  /* ************************************************** */
  /* Use PLL1 as clock source for BASE_M4_CLK (CPU) */
  CGU_BASE_M4_CLK = (CGU_BASE_M4_CLK_CLK_SEL(CGU_SRC_PLL1) | CGU_BASE_M4_CLK_AUTOBLOCK);
     92c:	f04f 096c 	mov.w	r9, #108	; 0x6c

  /* Switch peripheral clock over to use PLL1 */
  CGU_BASE_PERIPH_CLK = CGU_BASE_PERIPH_CLK_AUTOBLOCK
     930:	f04f 0c64 	mov.w	ip, #100	; 0x64
      | CGU_BASE_PERIPH_CLK_CLK_SEL(CGU_SRC_PLL1);

  /* Switch APB1 clock over to use PLL1 */
  CGU_BASE_APB1_CLK = CGU_BASE_APB1_CLK_AUTOBLOCK
     934:	2780      	movs	r7, #128	; 0x80
      | CGU_BASE_APB1_CLK_CLK_SEL(CGU_SRC_PLL1);

  /* Switch APB3 clock over to use PLL1 */
  CGU_BASE_APB3_CLK = CGU_BASE_APB3_CLK_AUTOBLOCK
     936:	2684      	movs	r6, #132	; 0x84

  /* **************************************************** */
  /* PLL0USB & USB0 Configuration (GP_CLKIN clock source) */
  /* **************************************************** */
  /* Use CGU_SRC_GP_CLKIN as clock source for PLL0USB */
  CGU_PLL0USB_CTRL = CGU_PLL0USB_CTRL_PD
     938:	2120      	movs	r1, #32

  /* ************************************************** */
  /* Connect PLL1 to M4/M0 core, Peripheral, APB1, APB3 */
  /* ************************************************** */
  /* Use PLL1 as clock source for BASE_M4_CLK (CPU) */
  CGU_BASE_M4_CLK = (CGU_BASE_M4_CLK_CLK_SEL(CGU_SRC_PLL1) | CGU_BASE_M4_CLK_AUTOBLOCK);
     93a:	f2c4 0905 	movt	r9, #16389	; 0x4005
     93e:	f44f 6300 	mov.w	r3, #2048	; 0x800

  /* Switch peripheral clock over to use PLL1 */
  CGU_BASE_PERIPH_CLK = CGU_BASE_PERIPH_CLK_AUTOBLOCK
     942:	f2c4 0c05 	movt	ip, #16389	; 0x4005
      | CGU_BASE_PERIPH_CLK_CLK_SEL(CGU_SRC_PLL1);

  /* Switch APB1 clock over to use PLL1 */
  CGU_BASE_APB1_CLK = CGU_BASE_APB1_CLK_AUTOBLOCK
     946:	f2c4 0705 	movt	r7, #16389	; 0x4005
      | CGU_BASE_APB1_CLK_CLK_SEL(CGU_SRC_PLL1);

  /* Switch APB3 clock over to use PLL1 */
  CGU_BASE_APB3_CLK = CGU_BASE_APB3_CLK_AUTOBLOCK
     94a:	f2c4 0605 	movt	r6, #16389	; 0x4005

  /* **************************************************** */
  /* PLL0USB & USB0 Configuration (GP_CLKIN clock source) */
  /* **************************************************** */
  /* Use CGU_SRC_GP_CLKIN as clock source for PLL0USB */
  CGU_PLL0USB_CTRL = CGU_PLL0USB_CTRL_PD
     94e:	f2c4 0105 	movt	r1, #16389	; 0x4005
     952:	f640 0001 	movw	r0, #2049	; 0x801

  /* ************************************************** */
  /* Connect PLL1 to M4/M0 core, Peripheral, APB1, APB3 */
  /* ************************************************** */
  /* Use PLL1 as clock source for BASE_M4_CLK (CPU) */
  CGU_BASE_M4_CLK = (CGU_BASE_M4_CLK_CLK_SEL(CGU_SRC_PLL1) | CGU_BASE_M4_CLK_AUTOBLOCK);
     956:	f6c0 1300 	movt	r3, #2304	; 0x900

  /* **************************************************** */
  /* PLL0USB & USB0 Configuration (GP_CLKIN clock source) */
  /* **************************************************** */
  /* Use CGU_SRC_GP_CLKIN as clock source for PLL0USB */
  CGU_PLL0USB_CTRL = CGU_PLL0USB_CTRL_PD
     95a:	f2c0 4000 	movt	r0, #1024	; 0x400
      | CGU_PLL0USB_CTRL_AUTOBLOCK
      | CGU_PLL0USB_CTRL_CLK_SEL(CGU_SRC_GP_CLKIN);
  while (CGU_PLL0USB_STAT & CGU_PLL0USB_STAT_LOCK);
     95e:	221c      	movs	r2, #28

  /* ************************************************** */
  /* Connect PLL1 to M4/M0 core, Peripheral, APB1, APB3 */
  /* ************************************************** */
  /* Use PLL1 as clock source for BASE_M4_CLK (CPU) */
  CGU_BASE_M4_CLK = (CGU_BASE_M4_CLK_CLK_SEL(CGU_SRC_PLL1) | CGU_BASE_M4_CLK_AUTOBLOCK);
     960:	f8c9 3000 	str.w	r3, [r9]
  /* **************************************************** */
  /* Use CGU_SRC_GP_CLKIN as clock source for PLL0USB */
  CGU_PLL0USB_CTRL = CGU_PLL0USB_CTRL_PD
      | CGU_PLL0USB_CTRL_AUTOBLOCK
      | CGU_PLL0USB_CTRL_CLK_SEL(CGU_SRC_GP_CLKIN);
  while (CGU_PLL0USB_STAT & CGU_PLL0USB_STAT_LOCK);
     964:	f2c4 0205 	movt	r2, #16389	; 0x4005
  /* ************************************************** */
  /* Use PLL1 as clock source for BASE_M4_CLK (CPU) */
  CGU_BASE_M4_CLK = (CGU_BASE_M4_CLK_CLK_SEL(CGU_SRC_PLL1) | CGU_BASE_M4_CLK_AUTOBLOCK);

  /* Switch peripheral clock over to use PLL1 */
  CGU_BASE_PERIPH_CLK = CGU_BASE_PERIPH_CLK_AUTOBLOCK
     968:	f8cc 3000 	str.w	r3, [ip]
      | CGU_BASE_PERIPH_CLK_CLK_SEL(CGU_SRC_PLL1);

  /* Switch APB1 clock over to use PLL1 */
  CGU_BASE_APB1_CLK = CGU_BASE_APB1_CLK_AUTOBLOCK
     96c:	603b      	str	r3, [r7, #0]
      | CGU_BASE_APB1_CLK_CLK_SEL(CGU_SRC_PLL1);

  /* Switch APB3 clock over to use PLL1 */
  CGU_BASE_APB3_CLK = CGU_BASE_APB3_CLK_AUTOBLOCK
     96e:	6033      	str	r3, [r6, #0]

  /* **************************************************** */
  /* PLL0USB & USB0 Configuration (GP_CLKIN clock source) */
  /* **************************************************** */
  /* Use CGU_SRC_GP_CLKIN as clock source for PLL0USB */
  CGU_PLL0USB_CTRL = CGU_PLL0USB_CTRL_PD
     970:	6008      	str	r0, [r1, #0]
      | CGU_PLL0USB_CTRL_AUTOBLOCK
      | CGU_PLL0USB_CTRL_CLK_SEL(CGU_SRC_GP_CLKIN);
  while (CGU_PLL0USB_STAT & CGU_PLL0USB_STAT_LOCK);
     972:	6817      	ldr	r7, [r2, #0]
     974:	07fe      	lsls	r6, r7, #31
     976:	d4fc      	bmi.n	972 <sys_clock_init+0x142>

  /* configure PLL0USB to produce 480 MHz clock from CGU_SRC_GP_CLKIN */
  CGU_PLL0USB_MDIV = pt_airspy_sys_conf->pll0_usb_mdiv;
     978:	2624      	movs	r6, #36	; 0x24
     97a:	6a69      	ldr	r1, [r5, #36]	; 0x24
     97c:	f2c4 0605 	movt	r6, #16389	; 0x4005
  CGU_PLL0USB_NP_DIV = pt_airspy_sys_conf->pll0_usb_npdiv;
     980:	2028      	movs	r0, #40	; 0x28
      | CGU_PLL0USB_CTRL_AUTOBLOCK
      | CGU_PLL0USB_CTRL_CLK_SEL(CGU_SRC_GP_CLKIN);
  while (CGU_PLL0USB_STAT & CGU_PLL0USB_STAT_LOCK);

  /* configure PLL0USB to produce 480 MHz clock from CGU_SRC_GP_CLKIN */
  CGU_PLL0USB_MDIV = pt_airspy_sys_conf->pll0_usb_mdiv;
     982:	6031      	str	r1, [r6, #0]
  CGU_PLL0USB_NP_DIV = pt_airspy_sys_conf->pll0_usb_npdiv;
     984:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     986:	f2c4 0005 	movt	r0, #16389	; 0x4005
  CGU_PLL0USB_CTRL |= (CGU_PLL0USB_CTRL_PD
     98a:	2320      	movs	r3, #32
     98c:	f2c4 0305 	movt	r3, #16389	; 0x4005
      | CGU_PLL0USB_CTRL_CLK_SEL(CGU_SRC_GP_CLKIN);
  while (CGU_PLL0USB_STAT & CGU_PLL0USB_STAT_LOCK);

  /* configure PLL0USB to produce 480 MHz clock from CGU_SRC_GP_CLKIN */
  CGU_PLL0USB_MDIV = pt_airspy_sys_conf->pll0_usb_mdiv;
  CGU_PLL0USB_NP_DIV = pt_airspy_sys_conf->pll0_usb_npdiv;
     990:	6002      	str	r2, [r0, #0]
  CGU_PLL0USB_CTRL |= (CGU_PLL0USB_CTRL_PD
     992:	681f      	ldr	r7, [r3, #0]
     994:	6aed      	ldr	r5, [r5, #44]	; 0x2c
     996:	ea47 0605 	orr.w	r6, r7, r5
     99a:	f046 0111 	orr.w	r1, r6, #17
     99e:	6019      	str	r1, [r3, #0]
      | pt_airspy_sys_conf->pll0usb_ctrl_flags
      | CGU_PLL0USB_CTRL_CLKEN);

  /* Power on PLL0USB and wait until stable */
  CGU_PLL0USB_CTRL &= ~CGU_PLL0USB_CTRL_PD;
     9a0:	6818      	ldr	r0, [r3, #0]
  while (!(CGU_PLL0USB_STAT & CGU_PLL0USB_STAT_LOCK));
     9a2:	221c      	movs	r2, #28
  CGU_PLL0USB_CTRL |= (CGU_PLL0USB_CTRL_PD
      | pt_airspy_sys_conf->pll0usb_ctrl_flags
      | CGU_PLL0USB_CTRL_CLKEN);

  /* Power on PLL0USB and wait until stable */
  CGU_PLL0USB_CTRL &= ~CGU_PLL0USB_CTRL_PD;
     9a4:	f020 0701 	bic.w	r7, r0, #1
     9a8:	601f      	str	r7, [r3, #0]
  while (!(CGU_PLL0USB_STAT & CGU_PLL0USB_STAT_LOCK));
     9aa:	f2c4 0205 	movt	r2, #16389	; 0x4005
     9ae:	6813      	ldr	r3, [r2, #0]
     9b0:	07dd      	lsls	r5, r3, #31
     9b2:	d5fc      	bpl.n	9ae <sys_clock_init+0x17e>

  /* Use PLL0USB as clock source for USB0 */
  CGU_BASE_USB0_CLK = CGU_BASE_USB0_CLK_AUTOBLOCK
     9b4:	2560      	movs	r5, #96	; 0x60
     9b6:	f2c4 0505 	movt	r5, #16389	; 0x4005
     9ba:	f44f 6600 	mov.w	r6, #2048	; 0x800
      | CGU_BASE_USB0_CLK_CLK_SEL(CGU_SRC_PLL0USB);

  /* ****************************************** */
  /* Disable/PowerDown unused clock/peripherals */
  /* ****************************************** */
  CREG_CREG6 |= (1<<17); // PowerDown RNG
     9be:	f243 112c 	movw	r1, #12588	; 0x312c
     9c2:	f2c4 0104 	movt	r1, #16388	; 0x4004
  /* Power on PLL0USB and wait until stable */
  CGU_PLL0USB_CTRL &= ~CGU_PLL0USB_CTRL_PD;
  while (!(CGU_PLL0USB_STAT & CGU_PLL0USB_STAT_LOCK));

  /* Use PLL0USB as clock source for USB0 */
  CGU_BASE_USB0_CLK = CGU_BASE_USB0_CLK_AUTOBLOCK
     9c6:	f2c0 7600 	movt	r6, #1792	; 0x700
  // CGU_BASE_M4_CLK is used
  CGU_BASE_SPIFI_CLK = CGU_BASE_SPIFI_CLK_PD;
  /* Switch off SPI clock */
  CGU_BASE_SPI_CLK = CGU_BASE_SPI_CLK_PD;
  /* Switch off PHY RX & TX clock */
  CGU_BASE_PHY_RX_CLK = CGU_BASE_PHY_RX_CLK_PD;
     9ca:	2778      	movs	r7, #120	; 0x78
  /* Power on PLL0USB and wait until stable */
  CGU_PLL0USB_CTRL &= ~CGU_PLL0USB_CTRL_PD;
  while (!(CGU_PLL0USB_STAT & CGU_PLL0USB_STAT_LOCK));

  /* Use PLL0USB as clock source for USB0 */
  CGU_BASE_USB0_CLK = CGU_BASE_USB0_CLK_AUTOBLOCK
     9cc:	602e      	str	r6, [r5, #0]
  // CGU_BASE_M4_CLK is used
  CGU_BASE_SPIFI_CLK = CGU_BASE_SPIFI_CLK_PD;
  /* Switch off SPI clock */
  CGU_BASE_SPI_CLK = CGU_BASE_SPI_CLK_PD;
  /* Switch off PHY RX & TX clock */
  CGU_BASE_PHY_RX_CLK = CGU_BASE_PHY_RX_CLK_PD;
     9ce:	f2c4 0705 	movt	r7, #16389	; 0x4005
      | CGU_BASE_USB0_CLK_CLK_SEL(CGU_SRC_PLL0USB);

  /* ****************************************** */
  /* Disable/PowerDown unused clock/peripherals */
  /* ****************************************** */
  CREG_CREG6 |= (1<<17); // PowerDown RNG
     9d2:	6808      	ldr	r0, [r1, #0]
  // CGU_BASE_M4_CLK is used
  CGU_BASE_SPIFI_CLK = CGU_BASE_SPIFI_CLK_PD;
  /* Switch off SPI clock */
  CGU_BASE_SPI_CLK = CGU_BASE_SPI_CLK_PD;
  /* Switch off PHY RX & TX clock */
  CGU_BASE_PHY_RX_CLK = CGU_BASE_PHY_RX_CLK_PD;
     9d4:	9703      	str	r7, [sp, #12]
  // CGU_BASE_APB3_CLK is used for I2C1
  /* Switch off LCD clock */
  CGU_BASE_LCD_CLK = CGU_BASE_LCD_CLK_PD;
  // CGU_BASE_ADCHS_CLK is used
  /* Switch off SDIO clock */
  CGU_BASE_SDIO_CLK = CGU_BASE_SDIO_CLK_PD;
     9d6:	2790      	movs	r7, #144	; 0x90
  /* Switch off USB1 clock */
  CGU_BASE_USB1_CLK = CGU_BASE_USB1_CLK_PD;
  // CGU_BASE_M4_CLK is used
  CGU_BASE_SPIFI_CLK = CGU_BASE_SPIFI_CLK_PD;
  /* Switch off SPI clock */
  CGU_BASE_SPI_CLK = CGU_BASE_SPI_CLK_PD;
     9d8:	2274      	movs	r2, #116	; 0x74
  /* Switch off PHY RX & TX clock */
  CGU_BASE_PHY_RX_CLK = CGU_BASE_PHY_RX_CLK_PD;
  CGU_BASE_PHY_TX_CLK = CGU_BASE_PHY_TX_CLK_PD;
     9da:	237c      	movs	r3, #124	; 0x7c
  // CGU_BASE_APB3_CLK is used for I2C1
  /* Switch off LCD clock */
  CGU_BASE_LCD_CLK = CGU_BASE_LCD_CLK_PD;
  // CGU_BASE_ADCHS_CLK is used
  /* Switch off SDIO clock */
  CGU_BASE_SDIO_CLK = CGU_BASE_SDIO_CLK_PD;
     9dc:	f2c4 0705 	movt	r7, #16389	; 0x4005
     9e0:	9706      	str	r7, [sp, #24]
  /* Switch off USB1 clock */
  CGU_BASE_USB1_CLK = CGU_BASE_USB1_CLK_PD;
  // CGU_BASE_M4_CLK is used
  CGU_BASE_SPIFI_CLK = CGU_BASE_SPIFI_CLK_PD;
  /* Switch off SPI clock */
  CGU_BASE_SPI_CLK = CGU_BASE_SPI_CLK_PD;
     9e2:	f2c4 0205 	movt	r2, #16389	; 0x4005
  /* Switch off PHY RX & TX clock */
  CGU_BASE_PHY_RX_CLK = CGU_BASE_PHY_RX_CLK_PD;
  CGU_BASE_PHY_TX_CLK = CGU_BASE_PHY_TX_CLK_PD;
     9e6:	f2c4 0305 	movt	r3, #16389	; 0x4005
  CGU_BASE_SDIO_CLK = CGU_BASE_SDIO_CLK_PD;
  CGU_BASE_SSP0_CLK = CGU_BASE_SSP0_CLK_PD;
  /* Switch off SSP1 clock */
  CGU_BASE_SSP1_CLK = CGU_BASE_SSP1_CLK_PD;
  /* Switch off UART0 to 3 clock */
  CGU_BASE_UART0_CLK = CGU_BASE_UART0_CLK_PD;
     9ea:	279c      	movs	r7, #156	; 0x9c
  /* Switch off USB1 clock */
  CGU_BASE_USB1_CLK = CGU_BASE_USB1_CLK_PD;
  // CGU_BASE_M4_CLK is used
  CGU_BASE_SPIFI_CLK = CGU_BASE_SPIFI_CLK_PD;
  /* Switch off SPI clock */
  CGU_BASE_SPI_CLK = CGU_BASE_SPI_CLK_PD;
     9ec:	9201      	str	r2, [sp, #4]
  /* Switch off PHY RX & TX clock */
  CGU_BASE_PHY_RX_CLK = CGU_BASE_PHY_RX_CLK_PD;
  CGU_BASE_PHY_TX_CLK = CGU_BASE_PHY_TX_CLK_PD;
     9ee:	9304      	str	r3, [sp, #16]
  // CGU_BASE_APB1_CLK is used for I2C0
  // CGU_BASE_APB3_CLK is used for I2C1
  /* Switch off LCD clock */
  CGU_BASE_LCD_CLK = CGU_BASE_LCD_CLK_PD;
     9f0:	2288      	movs	r2, #136	; 0x88
  // CGU_BASE_ADCHS_CLK is used
  /* Switch off SDIO clock */
  CGU_BASE_SDIO_CLK = CGU_BASE_SDIO_CLK_PD;
  CGU_BASE_SSP0_CLK = CGU_BASE_SSP0_CLK_PD;
     9f2:	2394      	movs	r3, #148	; 0x94
  /* Switch off SSP1 clock */
  CGU_BASE_SSP1_CLK = CGU_BASE_SSP1_CLK_PD;
  /* Switch off UART0 to 3 clock */
  CGU_BASE_UART0_CLK = CGU_BASE_UART0_CLK_PD;
     9f4:	f2c4 0705 	movt	r7, #16389	; 0x4005
     9f8:	9709      	str	r7, [sp, #36]	; 0x24
  CGU_BASE_PHY_RX_CLK = CGU_BASE_PHY_RX_CLK_PD;
  CGU_BASE_PHY_TX_CLK = CGU_BASE_PHY_TX_CLK_PD;
  // CGU_BASE_APB1_CLK is used for I2C0
  // CGU_BASE_APB3_CLK is used for I2C1
  /* Switch off LCD clock */
  CGU_BASE_LCD_CLK = CGU_BASE_LCD_CLK_PD;
     9fa:	f2c4 0205 	movt	r2, #16389	; 0x4005
  // CGU_BASE_ADCHS_CLK is used
  /* Switch off SDIO clock */
  CGU_BASE_SDIO_CLK = CGU_BASE_SDIO_CLK_PD;
  CGU_BASE_SSP0_CLK = CGU_BASE_SSP0_CLK_PD;
     9fe:	f2c4 0305 	movt	r3, #16389	; 0x4005
  CGU_BASE_SSP1_CLK = CGU_BASE_SSP1_CLK_PD;
  /* Switch off UART0 to 3 clock */
  CGU_BASE_UART0_CLK = CGU_BASE_UART0_CLK_PD;
  CGU_BASE_UART1_CLK = CGU_BASE_UART1_CLK_PD;
  CGU_BASE_UART2_CLK = CGU_BASE_UART2_CLK_PD;
  CGU_BASE_UART3_CLK = CGU_BASE_UART3_CLK_PD;
     a02:	27a8      	movs	r7, #168	; 0xa8
  CGU_BASE_PHY_RX_CLK = CGU_BASE_PHY_RX_CLK_PD;
  CGU_BASE_PHY_TX_CLK = CGU_BASE_PHY_TX_CLK_PD;
  // CGU_BASE_APB1_CLK is used for I2C0
  // CGU_BASE_APB3_CLK is used for I2C1
  /* Switch off LCD clock */
  CGU_BASE_LCD_CLK = CGU_BASE_LCD_CLK_PD;
     a04:	9205      	str	r2, [sp, #20]
  // CGU_BASE_ADCHS_CLK is used
  /* Switch off SDIO clock */
  CGU_BASE_SDIO_CLK = CGU_BASE_SDIO_CLK_PD;
  CGU_BASE_SSP0_CLK = CGU_BASE_SSP0_CLK_PD;
     a06:	9307      	str	r3, [sp, #28]
  /* Switch off SSP1 clock */
  CGU_BASE_SSP1_CLK = CGU_BASE_SSP1_CLK_PD;
     a08:	2298      	movs	r2, #152	; 0x98
  /* Switch off UART0 to 3 clock */
  CGU_BASE_UART0_CLK = CGU_BASE_UART0_CLK_PD;
  CGU_BASE_UART1_CLK = CGU_BASE_UART1_CLK_PD;
     a0a:	23a0      	movs	r3, #160	; 0xa0
  CGU_BASE_UART2_CLK = CGU_BASE_UART2_CLK_PD;
  CGU_BASE_UART3_CLK = CGU_BASE_UART3_CLK_PD;
     a0c:	f2c4 0705 	movt	r7, #16389	; 0x4005
     a10:	970c      	str	r7, [sp, #48]	; 0x30
  // CGU_BASE_ADCHS_CLK is used
  /* Switch off SDIO clock */
  CGU_BASE_SDIO_CLK = CGU_BASE_SDIO_CLK_PD;
  CGU_BASE_SSP0_CLK = CGU_BASE_SSP0_CLK_PD;
  /* Switch off SSP1 clock */
  CGU_BASE_SSP1_CLK = CGU_BASE_SSP1_CLK_PD;
     a12:	f2c4 0205 	movt	r2, #16389	; 0x4005
  /* Switch off UART0 to 3 clock */
  CGU_BASE_UART0_CLK = CGU_BASE_UART0_CLK_PD;
  CGU_BASE_UART1_CLK = CGU_BASE_UART1_CLK_PD;
     a16:	f2c4 0305 	movt	r3, #16389	; 0x4005
  CGU_BASE_UART3_CLK = CGU_BASE_UART3_CLK_PD;
  /*  Switch off OUT clocks */
  CGU_BASE_OUT_CLK = CGU_BASE_OUT_CLK_PD;
  /* Reserved/Undocumented clocks power down */
  CGU_OUTCLK_21_CTRL = 1;
  CGU_OUTCLK_22_CTRL = 1;
     a1a:	27b4      	movs	r7, #180	; 0xb4
  // CGU_BASE_ADCHS_CLK is used
  /* Switch off SDIO clock */
  CGU_BASE_SDIO_CLK = CGU_BASE_SDIO_CLK_PD;
  CGU_BASE_SSP0_CLK = CGU_BASE_SSP0_CLK_PD;
  /* Switch off SSP1 clock */
  CGU_BASE_SSP1_CLK = CGU_BASE_SSP1_CLK_PD;
     a1c:	9208      	str	r2, [sp, #32]
  /* Switch off UART0 to 3 clock */
  CGU_BASE_UART0_CLK = CGU_BASE_UART0_CLK_PD;
  CGU_BASE_UART1_CLK = CGU_BASE_UART1_CLK_PD;
     a1e:	930a      	str	r3, [sp, #40]	; 0x28
  CGU_BASE_UART2_CLK = CGU_BASE_UART2_CLK_PD;
     a20:	22a4      	movs	r2, #164	; 0xa4
  CGU_BASE_UART3_CLK = CGU_BASE_UART3_CLK_PD;
  /*  Switch off OUT clocks */
  CGU_BASE_OUT_CLK = CGU_BASE_OUT_CLK_PD;
     a22:	23ac      	movs	r3, #172	; 0xac
  /* Reserved/Undocumented clocks power down */
  CGU_OUTCLK_21_CTRL = 1;
  CGU_OUTCLK_22_CTRL = 1;
     a24:	f2c4 0705 	movt	r7, #16389	; 0x4005
     a28:	970f      	str	r7, [sp, #60]	; 0x3c
  /* Switch off SSP1 clock */
  CGU_BASE_SSP1_CLK = CGU_BASE_SSP1_CLK_PD;
  /* Switch off UART0 to 3 clock */
  CGU_BASE_UART0_CLK = CGU_BASE_UART0_CLK_PD;
  CGU_BASE_UART1_CLK = CGU_BASE_UART1_CLK_PD;
  CGU_BASE_UART2_CLK = CGU_BASE_UART2_CLK_PD;
     a2a:	f2c4 0205 	movt	r2, #16389	; 0x4005
  CGU_BASE_UART3_CLK = CGU_BASE_UART3_CLK_PD;
  /*  Switch off OUT clocks */
  CGU_BASE_OUT_CLK = CGU_BASE_OUT_CLK_PD;
     a2e:	f2c4 0305 	movt	r3, #16389	; 0x4005
  CGU_OUTCLK_21_CTRL = 1;
  CGU_OUTCLK_22_CTRL = 1;
  CGU_OUTCLK_23_CTRL = 1;
  CGU_OUTCLK_24_CTRL = 1;
  /* Switch off AUDIO clock */
  CGU_BASE_APLL_CLK = CGU_BASE_APLL_CLK_PD;
     a32:	27c0      	movs	r7, #192	; 0xc0
      | CGU_BASE_USB0_CLK_CLK_SEL(CGU_SRC_PLL0USB);

  /* ****************************************** */
  /* Disable/PowerDown unused clock/peripherals */
  /* ****************************************** */
  CREG_CREG6 |= (1<<17); // PowerDown RNG
     a34:	9002      	str	r0, [sp, #8]
  /* Switch off SSP1 clock */
  CGU_BASE_SSP1_CLK = CGU_BASE_SSP1_CLK_PD;
  /* Switch off UART0 to 3 clock */
  CGU_BASE_UART0_CLK = CGU_BASE_UART0_CLK_PD;
  CGU_BASE_UART1_CLK = CGU_BASE_UART1_CLK_PD;
  CGU_BASE_UART2_CLK = CGU_BASE_UART2_CLK_PD;
     a36:	920b      	str	r2, [sp, #44]	; 0x2c
  CGU_BASE_UART3_CLK = CGU_BASE_UART3_CLK_PD;
  /*  Switch off OUT clocks */
  CGU_BASE_OUT_CLK = CGU_BASE_OUT_CLK_PD;
     a38:	930d      	str	r3, [sp, #52]	; 0x34
  /* Reserved/Undocumented clocks power down */
  CGU_OUTCLK_21_CTRL = 1;
     a3a:	22b0      	movs	r2, #176	; 0xb0
  CGU_OUTCLK_22_CTRL = 1;
  CGU_OUTCLK_23_CTRL = 1;
     a3c:	23b8      	movs	r3, #184	; 0xb8
  CGU_OUTCLK_24_CTRL = 1;
  /* Switch off AUDIO clock */
  CGU_BASE_APLL_CLK = CGU_BASE_APLL_CLK_PD;
     a3e:	f2c4 0705 	movt	r7, #16389	; 0x4005
     a42:	9712      	str	r7, [sp, #72]	; 0x48
  CGU_BASE_UART2_CLK = CGU_BASE_UART2_CLK_PD;
  CGU_BASE_UART3_CLK = CGU_BASE_UART3_CLK_PD;
  /*  Switch off OUT clocks */
  CGU_BASE_OUT_CLK = CGU_BASE_OUT_CLK_PD;
  /* Reserved/Undocumented clocks power down */
  CGU_OUTCLK_21_CTRL = 1;
     a44:	f2c4 0205 	movt	r2, #16389	; 0x4005
      | CGU_BASE_USB0_CLK_CLK_SEL(CGU_SRC_PLL0USB);

  /* ****************************************** */
  /* Disable/PowerDown unused clock/peripherals */
  /* ****************************************** */
  CREG_CREG6 |= (1<<17); // PowerDown RNG
     a48:	9f02      	ldr	r7, [sp, #8]
  CGU_BASE_UART2_CLK = CGU_BASE_UART2_CLK_PD;
  CGU_BASE_UART3_CLK = CGU_BASE_UART3_CLK_PD;
  /*  Switch off OUT clocks */
  CGU_BASE_OUT_CLK = CGU_BASE_OUT_CLK_PD;
  /* Reserved/Undocumented clocks power down */
  CGU_OUTCLK_21_CTRL = 1;
     a4a:	920e      	str	r2, [sp, #56]	; 0x38
  CGU_OUTCLK_22_CTRL = 1;
  CGU_OUTCLK_23_CTRL = 1;
     a4c:	f2c4 0305 	movt	r3, #16389	; 0x4005
     a50:	9310      	str	r3, [sp, #64]	; 0x40
  CGU_OUTCLK_24_CTRL = 1;
     a52:	22bc      	movs	r2, #188	; 0xbc
  /* Switch off AUDIO clock */
  CGU_BASE_APLL_CLK = CGU_BASE_APLL_CLK_PD;
  CGU_BASE_CGU_OUT0_CLK = CGU_BASE_CGU_OUT0_CLK_PD;
     a54:	23c4      	movs	r3, #196	; 0xc4
  CGU_BASE_OUT_CLK = CGU_BASE_OUT_CLK_PD;
  /* Reserved/Undocumented clocks power down */
  CGU_OUTCLK_21_CTRL = 1;
  CGU_OUTCLK_22_CTRL = 1;
  CGU_OUTCLK_23_CTRL = 1;
  CGU_OUTCLK_24_CTRL = 1;
     a56:	f2c4 0205 	movt	r2, #16389	; 0x4005
  /* Switch off AUDIO clock */
  CGU_BASE_APLL_CLK = CGU_BASE_APLL_CLK_PD;
  CGU_BASE_CGU_OUT0_CLK = CGU_BASE_CGU_OUT0_CLK_PD;
     a5a:	f2c4 0305 	movt	r3, #16389	; 0x4005
      | CGU_BASE_USB0_CLK_CLK_SEL(CGU_SRC_PLL0USB);

  /* ****************************************** */
  /* Disable/PowerDown unused clock/peripherals */
  /* ****************************************** */
  CREG_CREG6 |= (1<<17); // PowerDown RNG
     a5e:	f447 3700 	orr.w	r7, r7, #131072	; 0x20000

  /* Disable XTAL because GP_CLKIN is used from SI5351C instead */
  /* Switch off the oscillator */
  CGU_XTAL_OSC_CTRL = CGU_XTAL_OSC_CTRL_ENABLE;
     a62:	f04f 0a18 	mov.w	sl, #24

  CGU_BASE_SAFE_CLK = CGU_BASE_USB1_CLK_PD;
     a66:	f04f 095c 	mov.w	r9, #92	; 0x5c
  // CGU_BASE_USB0_CLK is used for USB0 HS
  // CGU_BASE_M0_CLK is used
  /* Switch off USB1 clock */
  CGU_BASE_USB1_CLK = CGU_BASE_USB1_CLK_PD;
     a6a:	f04f 0868 	mov.w	r8, #104	; 0x68
  // CGU_BASE_M4_CLK is used
  CGU_BASE_SPIFI_CLK = CGU_BASE_SPIFI_CLK_PD;
     a6e:	f04f 0e70 	mov.w	lr, #112	; 0x70
  CGU_BASE_OUT_CLK = CGU_BASE_OUT_CLK_PD;
  /* Reserved/Undocumented clocks power down */
  CGU_OUTCLK_21_CTRL = 1;
  CGU_OUTCLK_22_CTRL = 1;
  CGU_OUTCLK_23_CTRL = 1;
  CGU_OUTCLK_24_CTRL = 1;
     a72:	9211      	str	r2, [sp, #68]	; 0x44
  /* Switch off AUDIO clock */
  CGU_BASE_APLL_CLK = CGU_BASE_APLL_CLK_PD;
  CGU_BASE_CGU_OUT0_CLK = CGU_BASE_CGU_OUT0_CLK_PD;
     a74:	9313      	str	r3, [sp, #76]	; 0x4c
  /* ****************************************** */
  CREG_CREG6 |= (1<<17); // PowerDown RNG

  /* Disable XTAL because GP_CLKIN is used from SI5351C instead */
  /* Switch off the oscillator */
  CGU_XTAL_OSC_CTRL = CGU_XTAL_OSC_CTRL_ENABLE;
     a76:	f2c4 0a05 	movt	sl, #16389	; 0x4005
      | CGU_BASE_USB0_CLK_CLK_SEL(CGU_SRC_PLL0USB);

  /* ****************************************** */
  /* Disable/PowerDown unused clock/peripherals */
  /* ****************************************** */
  CREG_CREG6 |= (1<<17); // PowerDown RNG
     a7a:	600f      	str	r7, [r1, #0]

  /* Disable XTAL because GP_CLKIN is used from SI5351C instead */
  /* Switch off the oscillator */
  CGU_XTAL_OSC_CTRL = CGU_XTAL_OSC_CTRL_ENABLE;

  CGU_BASE_SAFE_CLK = CGU_BASE_USB1_CLK_PD;
     a7c:	f2c4 0905 	movt	r9, #16389	; 0x4005
  /* Switch off USB1 clock */
  CGU_BASE_USB1_CLK = CGU_BASE_USB1_CLK_PD;
  // CGU_BASE_M4_CLK is used
  CGU_BASE_SPIFI_CLK = CGU_BASE_SPIFI_CLK_PD;
  /* Switch off SPI clock */
  CGU_BASE_SPI_CLK = CGU_BASE_SPI_CLK_PD;
     a80:	9901      	ldr	r1, [sp, #4]
  /* Switch off PHY RX & TX clock */
  CGU_BASE_PHY_RX_CLK = CGU_BASE_PHY_RX_CLK_PD;
     a82:	9f03      	ldr	r7, [sp, #12]

  CGU_BASE_SAFE_CLK = CGU_BASE_USB1_CLK_PD;
  // CGU_BASE_USB0_CLK is used for USB0 HS
  // CGU_BASE_M0_CLK is used
  /* Switch off USB1 clock */
  CGU_BASE_USB1_CLK = CGU_BASE_USB1_CLK_PD;
     a84:	f2c4 0805 	movt	r8, #16389	; 0x4005
  // CGU_BASE_M4_CLK is used
  CGU_BASE_SPIFI_CLK = CGU_BASE_SPIFI_CLK_PD;
     a88:	f2c4 0e05 	movt	lr, #16389	; 0x4005
  /* ****************************************** */
  CREG_CREG6 |= (1<<17); // PowerDown RNG

  /* Disable XTAL because GP_CLKIN is used from SI5351C instead */
  /* Switch off the oscillator */
  CGU_XTAL_OSC_CTRL = CGU_XTAL_OSC_CTRL_ENABLE;
     a8c:	2301      	movs	r3, #1
     a8e:	f8ca 3000 	str.w	r3, [sl]

  CGU_BASE_SAFE_CLK = CGU_BASE_USB1_CLK_PD;
     a92:	f8c9 3000 	str.w	r3, [r9]
  // CGU_BASE_USB0_CLK is used for USB0 HS
  // CGU_BASE_M0_CLK is used
  /* Switch off USB1 clock */
  CGU_BASE_USB1_CLK = CGU_BASE_USB1_CLK_PD;
     a96:	f8c8 3000 	str.w	r3, [r8]
  // CGU_BASE_M4_CLK is used
  CGU_BASE_SPIFI_CLK = CGU_BASE_SPIFI_CLK_PD;
     a9a:	f8ce 3000 	str.w	r3, [lr]
  /* Switch off SPI clock */
  CGU_BASE_SPI_CLK = CGU_BASE_SPI_CLK_PD;
     a9e:	600b      	str	r3, [r1, #0]
  /* Switch off PHY RX & TX clock */
  CGU_BASE_PHY_RX_CLK = CGU_BASE_PHY_RX_CLK_PD;
     aa0:	603b      	str	r3, [r7, #0]
  CGU_BASE_PHY_TX_CLK = CGU_BASE_PHY_TX_CLK_PD;
     aa2:	9904      	ldr	r1, [sp, #16]
  // CGU_BASE_APB1_CLK is used for I2C0
  // CGU_BASE_APB3_CLK is used for I2C1
  /* Switch off LCD clock */
  CGU_BASE_LCD_CLK = CGU_BASE_LCD_CLK_PD;
     aa4:	9f05      	ldr	r7, [sp, #20]
  CGU_BASE_SPIFI_CLK = CGU_BASE_SPIFI_CLK_PD;
  /* Switch off SPI clock */
  CGU_BASE_SPI_CLK = CGU_BASE_SPI_CLK_PD;
  /* Switch off PHY RX & TX clock */
  CGU_BASE_PHY_RX_CLK = CGU_BASE_PHY_RX_CLK_PD;
  CGU_BASE_PHY_TX_CLK = CGU_BASE_PHY_TX_CLK_PD;
     aa6:	600b      	str	r3, [r1, #0]
  // CGU_BASE_APB1_CLK is used for I2C0
  // CGU_BASE_APB3_CLK is used for I2C1
  /* Switch off LCD clock */
  CGU_BASE_LCD_CLK = CGU_BASE_LCD_CLK_PD;
     aa8:	603b      	str	r3, [r7, #0]
  // CGU_BASE_ADCHS_CLK is used
  /* Switch off SDIO clock */
  CGU_BASE_SDIO_CLK = CGU_BASE_SDIO_CLK_PD;
     aaa:	9906      	ldr	r1, [sp, #24]
  CGU_BASE_SSP0_CLK = CGU_BASE_SSP0_CLK_PD;
     aac:	9f07      	ldr	r7, [sp, #28]
  // CGU_BASE_APB3_CLK is used for I2C1
  /* Switch off LCD clock */
  CGU_BASE_LCD_CLK = CGU_BASE_LCD_CLK_PD;
  // CGU_BASE_ADCHS_CLK is used
  /* Switch off SDIO clock */
  CGU_BASE_SDIO_CLK = CGU_BASE_SDIO_CLK_PD;
     aae:	600b      	str	r3, [r1, #0]
  CGU_BASE_SSP0_CLK = CGU_BASE_SSP0_CLK_PD;
     ab0:	603b      	str	r3, [r7, #0]
  /* Switch off SSP1 clock */
  CGU_BASE_SSP1_CLK = CGU_BASE_SSP1_CLK_PD;
     ab2:	9908      	ldr	r1, [sp, #32]
  /* Switch off UART0 to 3 clock */
  CGU_BASE_UART0_CLK = CGU_BASE_UART0_CLK_PD;
     ab4:	9f09      	ldr	r7, [sp, #36]	; 0x24
  // CGU_BASE_ADCHS_CLK is used
  /* Switch off SDIO clock */
  CGU_BASE_SDIO_CLK = CGU_BASE_SDIO_CLK_PD;
  CGU_BASE_SSP0_CLK = CGU_BASE_SSP0_CLK_PD;
  /* Switch off SSP1 clock */
  CGU_BASE_SSP1_CLK = CGU_BASE_SSP1_CLK_PD;
     ab6:	600b      	str	r3, [r1, #0]
  /* Switch off UART0 to 3 clock */
  CGU_BASE_UART0_CLK = CGU_BASE_UART0_CLK_PD;
     ab8:	603b      	str	r3, [r7, #0]
  CGU_BASE_UART1_CLK = CGU_BASE_UART1_CLK_PD;
     aba:	990a      	ldr	r1, [sp, #40]	; 0x28
  CGU_BASE_UART2_CLK = CGU_BASE_UART2_CLK_PD;
     abc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  CGU_BASE_SSP0_CLK = CGU_BASE_SSP0_CLK_PD;
  /* Switch off SSP1 clock */
  CGU_BASE_SSP1_CLK = CGU_BASE_SSP1_CLK_PD;
  /* Switch off UART0 to 3 clock */
  CGU_BASE_UART0_CLK = CGU_BASE_UART0_CLK_PD;
  CGU_BASE_UART1_CLK = CGU_BASE_UART1_CLK_PD;
     abe:	600b      	str	r3, [r1, #0]
  CGU_BASE_UART2_CLK = CGU_BASE_UART2_CLK_PD;
     ac0:	603b      	str	r3, [r7, #0]
  CGU_BASE_UART3_CLK = CGU_BASE_UART3_CLK_PD;
     ac2:	990c      	ldr	r1, [sp, #48]	; 0x30
  /*  Switch off OUT clocks */
  CGU_BASE_OUT_CLK = CGU_BASE_OUT_CLK_PD;
     ac4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  CGU_BASE_SSP1_CLK = CGU_BASE_SSP1_CLK_PD;
  /* Switch off UART0 to 3 clock */
  CGU_BASE_UART0_CLK = CGU_BASE_UART0_CLK_PD;
  CGU_BASE_UART1_CLK = CGU_BASE_UART1_CLK_PD;
  CGU_BASE_UART2_CLK = CGU_BASE_UART2_CLK_PD;
  CGU_BASE_UART3_CLK = CGU_BASE_UART3_CLK_PD;
     ac6:	600b      	str	r3, [r1, #0]
  /*  Switch off OUT clocks */
  CGU_BASE_OUT_CLK = CGU_BASE_OUT_CLK_PD;
     ac8:	603b      	str	r3, [r7, #0]
  /* Reserved/Undocumented clocks power down */
  CGU_OUTCLK_21_CTRL = 1;
     aca:	990e      	ldr	r1, [sp, #56]	; 0x38
  CGU_OUTCLK_22_CTRL = 1;
     acc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  CGU_BASE_UART2_CLK = CGU_BASE_UART2_CLK_PD;
  CGU_BASE_UART3_CLK = CGU_BASE_UART3_CLK_PD;
  /*  Switch off OUT clocks */
  CGU_BASE_OUT_CLK = CGU_BASE_OUT_CLK_PD;
  /* Reserved/Undocumented clocks power down */
  CGU_OUTCLK_21_CTRL = 1;
     ace:	600b      	str	r3, [r1, #0]
  CGU_OUTCLK_22_CTRL = 1;
     ad0:	603b      	str	r3, [r7, #0]
  CGU_OUTCLK_23_CTRL = 1;
     ad2:	9910      	ldr	r1, [sp, #64]	; 0x40
  CGU_OUTCLK_24_CTRL = 1;
     ad4:	9f11      	ldr	r7, [sp, #68]	; 0x44
  /*  Switch off OUT clocks */
  CGU_BASE_OUT_CLK = CGU_BASE_OUT_CLK_PD;
  /* Reserved/Undocumented clocks power down */
  CGU_OUTCLK_21_CTRL = 1;
  CGU_OUTCLK_22_CTRL = 1;
  CGU_OUTCLK_23_CTRL = 1;
     ad6:	600b      	str	r3, [r1, #0]
  /* Switch off AUDIO clock */
  CGU_BASE_APLL_CLK = CGU_BASE_APLL_CLK_PD;
  CGU_BASE_CGU_OUT0_CLK = CGU_BASE_CGU_OUT0_CLK_PD;
  CGU_BASE_CGU_OUT1_CLK = CGU_BASE_CGU_OUT1_CLK_PD;
  /* Switch off IDIV C,D,E disabled */
  CGU_IDIVC_CTRL = CGU_IDIVC_CTRL_PD;
     ad8:	2650      	movs	r6, #80	; 0x50
  CGU_IDIVD_CTRL = CGU_IDIVD_CTRL_PD;
     ada:	2554      	movs	r5, #84	; 0x54
  CGU_IDIVE_CTRL = CGU_IDIVE_CTRL_PD;
     adc:	2058      	movs	r0, #88	; 0x58
  CGU_OUTCLK_23_CTRL = 1;
  CGU_OUTCLK_24_CTRL = 1;
  /* Switch off AUDIO clock */
  CGU_BASE_APLL_CLK = CGU_BASE_APLL_CLK_PD;
  CGU_BASE_CGU_OUT0_CLK = CGU_BASE_CGU_OUT0_CLK_PD;
  CGU_BASE_CGU_OUT1_CLK = CGU_BASE_CGU_OUT1_CLK_PD;
     ade:	f04f 0bc8 	mov.w	fp, #200	; 0xc8
  CGU_BASE_OUT_CLK = CGU_BASE_OUT_CLK_PD;
  /* Reserved/Undocumented clocks power down */
  CGU_OUTCLK_21_CTRL = 1;
  CGU_OUTCLK_22_CTRL = 1;
  CGU_OUTCLK_23_CTRL = 1;
  CGU_OUTCLK_24_CTRL = 1;
     ae2:	603b      	str	r3, [r7, #0]
  /* Switch off AUDIO clock */
  CGU_BASE_APLL_CLK = CGU_BASE_APLL_CLK_PD;
     ae4:	9912      	ldr	r1, [sp, #72]	; 0x48
  CGU_BASE_CGU_OUT0_CLK = CGU_BASE_CGU_OUT0_CLK_PD;
     ae6:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  CGU_OUTCLK_21_CTRL = 1;
  CGU_OUTCLK_22_CTRL = 1;
  CGU_OUTCLK_23_CTRL = 1;
  CGU_OUTCLK_24_CTRL = 1;
  /* Switch off AUDIO clock */
  CGU_BASE_APLL_CLK = CGU_BASE_APLL_CLK_PD;
     ae8:	600b      	str	r3, [r1, #0]
  CGU_BASE_CGU_OUT0_CLK = CGU_BASE_CGU_OUT0_CLK_PD;
  CGU_BASE_CGU_OUT1_CLK = CGU_BASE_CGU_OUT1_CLK_PD;
     aea:	f2c4 0b05 	movt	fp, #16389	; 0x4005
  /* Switch off IDIV C,D,E disabled */
  CGU_IDIVC_CTRL = CGU_IDIVC_CTRL_PD;
     aee:	f2c4 0605 	movt	r6, #16389	; 0x4005
  CGU_IDIVD_CTRL = CGU_IDIVD_CTRL_PD;
     af2:	f2c4 0505 	movt	r5, #16389	; 0x4005
  CGU_IDIVE_CTRL = CGU_IDIVE_CTRL_PD;
     af6:	f2c4 0005 	movt	r0, #16389	; 0x4005
/*
  // Power down M4 branches, but not BUS, GPIO, CREG and M0 & M4 CORE clock
*/
  //CCU1_CLK_M4_BUS_CFG &= ~(1);
  CCU1_CLK_M4_SPIFI_CFG &= ~(1);
     afa:	f241 4208 	movw	r2, #5128	; 0x1408
     afe:	f2c4 0205 	movt	r2, #16389	; 0x4005
  CGU_OUTCLK_22_CTRL = 1;
  CGU_OUTCLK_23_CTRL = 1;
  CGU_OUTCLK_24_CTRL = 1;
  /* Switch off AUDIO clock */
  CGU_BASE_APLL_CLK = CGU_BASE_APLL_CLK_PD;
  CGU_BASE_CGU_OUT0_CLK = CGU_BASE_CGU_OUT0_CLK_PD;
     b02:	603b      	str	r3, [r7, #0]
  CGU_BASE_CGU_OUT1_CLK = CGU_BASE_CGU_OUT1_CLK_PD;
     b04:	f8cb 3000 	str.w	r3, [fp]
  /* Switch off IDIV C,D,E disabled */
  CGU_IDIVC_CTRL = CGU_IDIVC_CTRL_PD;
     b08:	6033      	str	r3, [r6, #0]
  CGU_IDIVD_CTRL = CGU_IDIVD_CTRL_PD;
     b0a:	602b      	str	r3, [r5, #0]
  CGU_IDIVE_CTRL = CGU_IDIVE_CTRL_PD;
     b0c:	6003      	str	r3, [r0, #0]
/*
  // Power down M4 branches, but not BUS, GPIO, CREG and M0 & M4 CORE clock
*/
  //CCU1_CLK_M4_BUS_CFG &= ~(1);
  CCU1_CLK_M4_SPIFI_CFG &= ~(1);
     b0e:	6810      	ldr	r0, [r2, #0]
  //CCU1_CLK_M4_GPIO_CFG &= ~(1);
  CCU1_CLK_M4_LCD_CFG &= ~(1);
     b10:	f241 4318 	movw	r3, #5144	; 0x1418
     b14:	f2c4 0305 	movt	r3, #16389	; 0x4005
  CGU_IDIVE_CTRL = CGU_IDIVE_CTRL_PD;
/*
  // Power down M4 branches, but not BUS, GPIO, CREG and M0 & M4 CORE clock
*/
  //CCU1_CLK_M4_BUS_CFG &= ~(1);
  CCU1_CLK_M4_SPIFI_CFG &= ~(1);
     b18:	f020 0101 	bic.w	r1, r0, #1
     b1c:	6011      	str	r1, [r2, #0]
  //CCU1_CLK_M4_GPIO_CFG &= ~(1);
  CCU1_CLK_M4_LCD_CFG &= ~(1);
     b1e:	6818      	ldr	r0, [r3, #0]
  CCU1_CLK_M4_ETHERNET_CFG &= ~(1);
     b20:	f44f 52a1 	mov.w	r2, #5152	; 0x1420
     b24:	f2c4 0205 	movt	r2, #16389	; 0x4005
  // Power down M4 branches, but not BUS, GPIO, CREG and M0 & M4 CORE clock
*/
  //CCU1_CLK_M4_BUS_CFG &= ~(1);
  CCU1_CLK_M4_SPIFI_CFG &= ~(1);
  //CCU1_CLK_M4_GPIO_CFG &= ~(1);
  CCU1_CLK_M4_LCD_CFG &= ~(1);
     b28:	f020 0101 	bic.w	r1, r0, #1
     b2c:	6019      	str	r1, [r3, #0]
  CCU1_CLK_M4_ETHERNET_CFG &= ~(1);
     b2e:	6810      	ldr	r0, [r2, #0]
  //CCU1_CLK_M4_USB0_CFG &= ~(1);
  CCU1_CLK_M4_EMC_CFG &= ~(1);
     b30:	f241 4330 	movw	r3, #5168	; 0x1430
     b34:	f2c4 0305 	movt	r3, #16389	; 0x4005
*/
  //CCU1_CLK_M4_BUS_CFG &= ~(1);
  CCU1_CLK_M4_SPIFI_CFG &= ~(1);
  //CCU1_CLK_M4_GPIO_CFG &= ~(1);
  CCU1_CLK_M4_LCD_CFG &= ~(1);
  CCU1_CLK_M4_ETHERNET_CFG &= ~(1);
     b38:	f020 0101 	bic.w	r1, r0, #1
     b3c:	6011      	str	r1, [r2, #0]
  //CCU1_CLK_M4_USB0_CFG &= ~(1);
  CCU1_CLK_M4_EMC_CFG &= ~(1);
     b3e:	6818      	ldr	r0, [r3, #0]
  CCU1_CLK_M4_SDIO_CFG &= ~(1);
     b40:	f241 4238 	movw	r2, #5176	; 0x1438
     b44:	f2c4 0205 	movt	r2, #16389	; 0x4005
  CCU1_CLK_M4_SPIFI_CFG &= ~(1);
  //CCU1_CLK_M4_GPIO_CFG &= ~(1);
  CCU1_CLK_M4_LCD_CFG &= ~(1);
  CCU1_CLK_M4_ETHERNET_CFG &= ~(1);
  //CCU1_CLK_M4_USB0_CFG &= ~(1);
  CCU1_CLK_M4_EMC_CFG &= ~(1);
     b48:	f020 0101 	bic.w	r1, r0, #1
     b4c:	6019      	str	r1, [r3, #0]
  CCU1_CLK_M4_SDIO_CFG &= ~(1);
     b4e:	6810      	ldr	r0, [r2, #0]
  //CCU1_CLK_M4_DMA_CFG &= ~(1);
  //CCU1_CLK_M4_M4CORE_CFG &= ~(1);
  CCU1_CLK_M4_SCT_CFG &= ~(1);
     b50:	f241 4368 	movw	r3, #5224	; 0x1468
     b54:	f2c4 0305 	movt	r3, #16389	; 0x4005
  //CCU1_CLK_M4_GPIO_CFG &= ~(1);
  CCU1_CLK_M4_LCD_CFG &= ~(1);
  CCU1_CLK_M4_ETHERNET_CFG &= ~(1);
  //CCU1_CLK_M4_USB0_CFG &= ~(1);
  CCU1_CLK_M4_EMC_CFG &= ~(1);
  CCU1_CLK_M4_SDIO_CFG &= ~(1);
     b58:	f020 0101 	bic.w	r1, r0, #1
     b5c:	6011      	str	r1, [r2, #0]
  //CCU1_CLK_M4_DMA_CFG &= ~(1);
  //CCU1_CLK_M4_M4CORE_CFG &= ~(1);
  CCU1_CLK_M4_SCT_CFG &= ~(1);
     b5e:	6818      	ldr	r0, [r3, #0]
  CCU1_CLK_M4_USB1_CFG &= ~(1);
     b60:	f241 4270 	movw	r2, #5232	; 0x1470
     b64:	f2c4 0205 	movt	r2, #16389	; 0x4005
  //CCU1_CLK_M4_USB0_CFG &= ~(1);
  CCU1_CLK_M4_EMC_CFG &= ~(1);
  CCU1_CLK_M4_SDIO_CFG &= ~(1);
  //CCU1_CLK_M4_DMA_CFG &= ~(1);
  //CCU1_CLK_M4_M4CORE_CFG &= ~(1);
  CCU1_CLK_M4_SCT_CFG &= ~(1);
     b68:	f020 0101 	bic.w	r1, r0, #1
     b6c:	6019      	str	r1, [r3, #0]
  CCU1_CLK_M4_USB1_CFG &= ~(1);
     b6e:	6810      	ldr	r0, [r2, #0]
  CCU1_CLK_M4_EMCDIV_CFG &= ~(1);
     b70:	f241 4378 	movw	r3, #5240	; 0x1478
     b74:	f2c4 0305 	movt	r3, #16389	; 0x4005
  CCU1_CLK_M4_EMC_CFG &= ~(1);
  CCU1_CLK_M4_SDIO_CFG &= ~(1);
  //CCU1_CLK_M4_DMA_CFG &= ~(1);
  //CCU1_CLK_M4_M4CORE_CFG &= ~(1);
  CCU1_CLK_M4_SCT_CFG &= ~(1);
  CCU1_CLK_M4_USB1_CFG &= ~(1);
     b78:	f020 0101 	bic.w	r1, r0, #1
     b7c:	6011      	str	r1, [r2, #0]
  CCU1_CLK_M4_EMCDIV_CFG &= ~(1);
     b7e:	6818      	ldr	r0, [r3, #0]
  //CCU1_CLK_M4_M0APP_CFG &= ~(1);
  //CCU1_CLK_M4_VADC_CFG &= ~(1);
  CCU1_CLK_M4_WWDT_CFG &= ~(1);
     b80:	f44f 52a8 	mov.w	r2, #5376	; 0x1500
     b84:	f2c4 0205 	movt	r2, #16389	; 0x4005
  CCU1_CLK_M4_SDIO_CFG &= ~(1);
  //CCU1_CLK_M4_DMA_CFG &= ~(1);
  //CCU1_CLK_M4_M4CORE_CFG &= ~(1);
  CCU1_CLK_M4_SCT_CFG &= ~(1);
  CCU1_CLK_M4_USB1_CFG &= ~(1);
  CCU1_CLK_M4_EMCDIV_CFG &= ~(1);
     b88:	f020 0101 	bic.w	r1, r0, #1
     b8c:	6019      	str	r1, [r3, #0]
  //CCU1_CLK_M4_M0APP_CFG &= ~(1);
  //CCU1_CLK_M4_VADC_CFG &= ~(1);
  CCU1_CLK_M4_WWDT_CFG &= ~(1);
     b8e:	6810      	ldr	r0, [r2, #0]
  CCU1_CLK_M4_USART0_CFG &= ~(1);
     b90:	f241 5308 	movw	r3, #5384	; 0x1508
     b94:	f2c4 0305 	movt	r3, #16389	; 0x4005
  CCU1_CLK_M4_SCT_CFG &= ~(1);
  CCU1_CLK_M4_USB1_CFG &= ~(1);
  CCU1_CLK_M4_EMCDIV_CFG &= ~(1);
  //CCU1_CLK_M4_M0APP_CFG &= ~(1);
  //CCU1_CLK_M4_VADC_CFG &= ~(1);
  CCU1_CLK_M4_WWDT_CFG &= ~(1);
     b98:	f020 0101 	bic.w	r1, r0, #1
     b9c:	6011      	str	r1, [r2, #0]
  CCU1_CLK_M4_USART0_CFG &= ~(1);
     b9e:	6818      	ldr	r0, [r3, #0]
  CCU1_CLK_M4_UART1_CFG &= ~(1);
     ba0:	f241 5210 	movw	r2, #5392	; 0x1510
     ba4:	f2c4 0205 	movt	r2, #16389	; 0x4005
  CCU1_CLK_M4_USB1_CFG &= ~(1);
  CCU1_CLK_M4_EMCDIV_CFG &= ~(1);
  //CCU1_CLK_M4_M0APP_CFG &= ~(1);
  //CCU1_CLK_M4_VADC_CFG &= ~(1);
  CCU1_CLK_M4_WWDT_CFG &= ~(1);
  CCU1_CLK_M4_USART0_CFG &= ~(1);
     ba8:	f020 0101 	bic.w	r1, r0, #1
     bac:	6019      	str	r1, [r3, #0]
  CCU1_CLK_M4_UART1_CFG &= ~(1);
     bae:	6810      	ldr	r0, [r2, #0]
  CCU1_CLK_M4_SSP0_CFG &= ~(1);
     bb0:	f241 5318 	movw	r3, #5400	; 0x1518
     bb4:	f2c4 0305 	movt	r3, #16389	; 0x4005
  CCU1_CLK_M4_EMCDIV_CFG &= ~(1);
  //CCU1_CLK_M4_M0APP_CFG &= ~(1);
  //CCU1_CLK_M4_VADC_CFG &= ~(1);
  CCU1_CLK_M4_WWDT_CFG &= ~(1);
  CCU1_CLK_M4_USART0_CFG &= ~(1);
  CCU1_CLK_M4_UART1_CFG &= ~(1);
     bb8:	f020 0101 	bic.w	r1, r0, #1
     bbc:	6011      	str	r1, [r2, #0]
  CCU1_CLK_M4_SSP0_CFG &= ~(1);
     bbe:	6818      	ldr	r0, [r3, #0]
  CCU1_CLK_M4_SSP1_CFG &= ~(1);
     bc0:	f241 6228 	movw	r2, #5672	; 0x1628
     bc4:	f2c4 0205 	movt	r2, #16389	; 0x4005
  //CCU1_CLK_M4_M0APP_CFG &= ~(1);
  //CCU1_CLK_M4_VADC_CFG &= ~(1);
  CCU1_CLK_M4_WWDT_CFG &= ~(1);
  CCU1_CLK_M4_USART0_CFG &= ~(1);
  CCU1_CLK_M4_UART1_CFG &= ~(1);
  CCU1_CLK_M4_SSP0_CFG &= ~(1);
     bc8:	f020 0101 	bic.w	r1, r0, #1
     bcc:	6019      	str	r1, [r3, #0]
  CCU1_CLK_M4_SSP1_CFG &= ~(1);
     bce:	6810      	ldr	r0, [r2, #0]
  CCU1_CLK_M4_TIMER0_CFG &= ~(1);
     bd0:	f44f 53a9 	mov.w	r3, #5408	; 0x1520
     bd4:	f2c4 0305 	movt	r3, #16389	; 0x4005
  //CCU1_CLK_M4_VADC_CFG &= ~(1);
  CCU1_CLK_M4_WWDT_CFG &= ~(1);
  CCU1_CLK_M4_USART0_CFG &= ~(1);
  CCU1_CLK_M4_UART1_CFG &= ~(1);
  CCU1_CLK_M4_SSP0_CFG &= ~(1);
  CCU1_CLK_M4_SSP1_CFG &= ~(1);
     bd8:	f020 0101 	bic.w	r1, r0, #1
     bdc:	6011      	str	r1, [r2, #0]
  CCU1_CLK_M4_TIMER0_CFG &= ~(1);
     bde:	6818      	ldr	r0, [r3, #0]
  CCU1_CLK_M4_TIMER1_CFG &= ~(1);
     be0:	f241 5228 	movw	r2, #5416	; 0x1528
     be4:	f2c4 0205 	movt	r2, #16389	; 0x4005
  CCU1_CLK_M4_WWDT_CFG &= ~(1);
  CCU1_CLK_M4_USART0_CFG &= ~(1);
  CCU1_CLK_M4_UART1_CFG &= ~(1);
  CCU1_CLK_M4_SSP0_CFG &= ~(1);
  CCU1_CLK_M4_SSP1_CFG &= ~(1);
  CCU1_CLK_M4_TIMER0_CFG &= ~(1);
     be8:	f020 0101 	bic.w	r1, r0, #1
     bec:	6019      	str	r1, [r3, #0]
  CCU1_CLK_M4_TIMER1_CFG &= ~(1);
     bee:	6810      	ldr	r0, [r2, #0]
  //CCU1_CLK_M4_SCU_CFG &= ~(1);
  //CCU1_CLK_M4_CREG_CFG &= ~(1);
  CCU1_CLK_M4_RITIMER_CFG &= ~(1);
     bf0:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
     bf4:	f2c4 0305 	movt	r3, #16389	; 0x4005
  CCU1_CLK_M4_USART0_CFG &= ~(1);
  CCU1_CLK_M4_UART1_CFG &= ~(1);
  CCU1_CLK_M4_SSP0_CFG &= ~(1);
  CCU1_CLK_M4_SSP1_CFG &= ~(1);
  CCU1_CLK_M4_TIMER0_CFG &= ~(1);
  CCU1_CLK_M4_TIMER1_CFG &= ~(1);
     bf8:	f020 0101 	bic.w	r1, r0, #1
     bfc:	6011      	str	r1, [r2, #0]
  //CCU1_CLK_M4_SCU_CFG &= ~(1);
  //CCU1_CLK_M4_CREG_CFG &= ~(1);
  CCU1_CLK_M4_RITIMER_CFG &= ~(1);
     bfe:	6818      	ldr	r0, [r3, #0]
  CCU1_CLK_M4_USART2_CFG &= ~(1);
     c00:	f241 6208 	movw	r2, #5640	; 0x1608
     c04:	f2c4 0205 	movt	r2, #16389	; 0x4005
  CCU1_CLK_M4_SSP1_CFG &= ~(1);
  CCU1_CLK_M4_TIMER0_CFG &= ~(1);
  CCU1_CLK_M4_TIMER1_CFG &= ~(1);
  //CCU1_CLK_M4_SCU_CFG &= ~(1);
  //CCU1_CLK_M4_CREG_CFG &= ~(1);
  CCU1_CLK_M4_RITIMER_CFG &= ~(1);
     c08:	f020 0101 	bic.w	r1, r0, #1
     c0c:	6019      	str	r1, [r3, #0]
  CCU1_CLK_M4_USART2_CFG &= ~(1);
     c0e:	6810      	ldr	r0, [r2, #0]
  CCU1_CLK_M4_USART3_CFG &= ~(1);
     c10:	f241 6310 	movw	r3, #5648	; 0x1610
     c14:	f2c4 0305 	movt	r3, #16389	; 0x4005
  CCU1_CLK_M4_TIMER0_CFG &= ~(1);
  CCU1_CLK_M4_TIMER1_CFG &= ~(1);
  //CCU1_CLK_M4_SCU_CFG &= ~(1);
  //CCU1_CLK_M4_CREG_CFG &= ~(1);
  CCU1_CLK_M4_RITIMER_CFG &= ~(1);
  CCU1_CLK_M4_USART2_CFG &= ~(1);
     c18:	f020 0101 	bic.w	r1, r0, #1
     c1c:	6011      	str	r1, [r2, #0]
  CCU1_CLK_M4_USART3_CFG &= ~(1);
     c1e:	6818      	ldr	r0, [r3, #0]
  CCU1_CLK_M4_TIMER2_CFG &= ~(1);
     c20:	f241 6218 	movw	r2, #5656	; 0x1618
     c24:	f2c4 0205 	movt	r2, #16389	; 0x4005
  CCU1_CLK_M4_TIMER1_CFG &= ~(1);
  //CCU1_CLK_M4_SCU_CFG &= ~(1);
  //CCU1_CLK_M4_CREG_CFG &= ~(1);
  CCU1_CLK_M4_RITIMER_CFG &= ~(1);
  CCU1_CLK_M4_USART2_CFG &= ~(1);
  CCU1_CLK_M4_USART3_CFG &= ~(1);
     c28:	f020 0101 	bic.w	r1, r0, #1
     c2c:	6019      	str	r1, [r3, #0]
  CCU1_CLK_M4_TIMER2_CFG &= ~(1);
     c2e:	6810      	ldr	r0, [r2, #0]
  CCU1_CLK_M4_TIMER3_CFG &= ~(1);
     c30:	f44f 53b1 	mov.w	r3, #5664	; 0x1620
     c34:	f2c4 0305 	movt	r3, #16389	; 0x4005
  //CCU1_CLK_M4_SCU_CFG &= ~(1);
  //CCU1_CLK_M4_CREG_CFG &= ~(1);
  CCU1_CLK_M4_RITIMER_CFG &= ~(1);
  CCU1_CLK_M4_USART2_CFG &= ~(1);
  CCU1_CLK_M4_USART3_CFG &= ~(1);
  CCU1_CLK_M4_TIMER2_CFG &= ~(1);
     c38:	f020 0101 	bic.w	r1, r0, #1
     c3c:	6011      	str	r1, [r2, #0]
  CCU1_CLK_M4_TIMER3_CFG &= ~(1);
     c3e:	6818      	ldr	r0, [r3, #0]

  CCU1_CLK_M4_QEI_CFG &= ~(1);
     c40:	f241 6230 	movw	r2, #5680	; 0x1630
     c44:	f2c4 0205 	movt	r2, #16389	; 0x4005
  //CCU1_CLK_M4_CREG_CFG &= ~(1);
  CCU1_CLK_M4_RITIMER_CFG &= ~(1);
  CCU1_CLK_M4_USART2_CFG &= ~(1);
  CCU1_CLK_M4_USART3_CFG &= ~(1);
  CCU1_CLK_M4_TIMER2_CFG &= ~(1);
  CCU1_CLK_M4_TIMER3_CFG &= ~(1);
     c48:	f020 0101 	bic.w	r1, r0, #1
     c4c:	6019      	str	r1, [r3, #0]

  CCU1_CLK_M4_QEI_CFG &= ~(1);
     c4e:	6810      	ldr	r0, [r2, #0]
  CCU1_CLK_PERIPH_SGPIO_CFG &= ~(1);

  /* ******************************************** */
  /*  ADCHS Configuration (GP_CLKIN clock source) */
  /* ******************************************** */
  sys_clock_samplerate(&airspy_conf->airspy_m0_m4_conf[0].airspy_m4_conf);
     c50:	6821      	ldr	r1, [r4, #0]
  CCU1_CLK_M4_TIMER2_CFG &= ~(1);
  CCU1_CLK_M4_TIMER3_CFG &= ~(1);

  CCU1_CLK_M4_QEI_CFG &= ~(1);

  CCU1_CLK_PERIPH_SGPIO_CFG &= ~(1);
     c52:	f241 7318 	movw	r3, #5912	; 0x1718
     c56:	f2c4 0305 	movt	r3, #16389	; 0x4005
  CCU1_CLK_M4_USART2_CFG &= ~(1);
  CCU1_CLK_M4_USART3_CFG &= ~(1);
  CCU1_CLK_M4_TIMER2_CFG &= ~(1);
  CCU1_CLK_M4_TIMER3_CFG &= ~(1);

  CCU1_CLK_M4_QEI_CFG &= ~(1);
     c5a:	f020 0001 	bic.w	r0, r0, #1
     c5e:	6010      	str	r0, [r2, #0]

  CCU1_CLK_PERIPH_SGPIO_CFG &= ~(1);
     c60:	681a      	ldr	r2, [r3, #0]

  /* ******************************************** */
  /*  ADCHS Configuration (GP_CLKIN clock source) */
  /* ******************************************** */
  sys_clock_samplerate(&airspy_conf->airspy_m0_m4_conf[0].airspy_m4_conf);
     c62:	6f88      	ldr	r0, [r1, #120]	; 0x78
  CCU1_CLK_M4_TIMER2_CFG &= ~(1);
  CCU1_CLK_M4_TIMER3_CFG &= ~(1);

  CCU1_CLK_M4_QEI_CFG &= ~(1);

  CCU1_CLK_PERIPH_SGPIO_CFG &= ~(1);
     c64:	f022 0101 	bic.w	r1, r2, #1
     c68:	6019      	str	r1, [r3, #0]

  /* ******************************************** */
  /*  ADCHS Configuration (GP_CLKIN clock source) */
  /* ******************************************** */
  sys_clock_samplerate(&airspy_conf->airspy_m0_m4_conf[0].airspy_m4_conf);
}
     c6a:	b015      	add	sp, #84	; 0x54
     c6c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CCU1_CLK_PERIPH_SGPIO_CFG &= ~(1);

  /* ******************************************** */
  /*  ADCHS Configuration (GP_CLKIN clock source) */
  /* ******************************************** */
  sys_clock_samplerate(&airspy_conf->airspy_m0_m4_conf[0].airspy_m4_conf);
     c70:	f7ff bd64 	b.w	73c <sys_clock_samplerate>
    }
  }else
  {
    /* SI5351C not detected continue init using AirSpy MINI configuration */
    addr = (uint32_t)&airspy_mini_conf;
    addr = (addr | ROMFLASH_BASE_ADDR); /* Fix with Addr from ROMFLASH */
     c74:	4840      	ldr	r0, [pc, #256]	; (d78 <conf_data_share_size+0x178>)
    src = (unsigned char *)addr;
    /* Copy the configuration from Flash to SRAM */
    for (dest = (unsigned char *)airspy_conf; (uint32_t)dest < (((uint32_t)airspy_conf) + AIRSPY_CONF_MAX_DATA_SIZE); )
     c76:	428b      	cmp	r3, r1
    }
  }else
  {
    /* SI5351C not detected continue init using AirSpy MINI configuration */
    addr = (uint32_t)&airspy_mini_conf;
    addr = (addr | ROMFLASH_BASE_ADDR); /* Fix with Addr from ROMFLASH */
     c78:	f040 4600 	orr.w	r6, r0, #2147483648	; 0x80000000
    src = (unsigned char *)addr;
    /* Copy the configuration from Flash to SRAM */
    for (dest = (unsigned char *)airspy_conf; (uint32_t)dest < (((uint32_t)airspy_conf) + AIRSPY_CONF_MAX_DATA_SIZE); )
     c7c:	4618      	mov	r0, r3
     c7e:	d24e      	bcs.n	d1e <conf_data_share_size+0x11e>
/*
Configure PLL1 to min speed (48MHz) => see cpu_clock_pll1_low_speed() .
Configure PLL0USB @480MHz for USB0.
Note: PLL1 clock is used by M4/M0 core, Peripheral, APB1, APB3.
*/
void sys_clock_init(void) 
     c80:	1a1a      	subs	r2, r3, r0
    addr = (addr | ROMFLASH_BASE_ADDR); /* Fix with Addr from ROMFLASH */
    src = (unsigned char *)addr;
    /* Copy the configuration from Flash to SRAM */
    for (dest = (unsigned char *)airspy_conf; (uint32_t)dest < (((uint32_t)airspy_conf) + AIRSPY_CONF_MAX_DATA_SIZE); )
    {
      *dest++ = *src++;
     c82:	5d95      	ldrb	r5, [r2, r6]
     c84:	f803 5b01 	strb.w	r5, [r3], #1
    /* SI5351C not detected continue init using AirSpy MINI configuration */
    addr = (uint32_t)&airspy_mini_conf;
    addr = (addr | ROMFLASH_BASE_ADDR); /* Fix with Addr from ROMFLASH */
    src = (unsigned char *)addr;
    /* Copy the configuration from Flash to SRAM */
    for (dest = (unsigned char *)airspy_conf; (uint32_t)dest < (((uint32_t)airspy_conf) + AIRSPY_CONF_MAX_DATA_SIZE); )
     c88:	6825      	ldr	r5, [r4, #0]
     c8a:	19e9      	adds	r1, r5, r7
     c8c:	428b      	cmp	r3, r1
     c8e:	d3f7      	bcc.n	c80 <conf_data_share_size+0x80>
     c90:	e612      	b.n	8b8 <sys_clock_init+0x88>
  if((airspy_conf->conf_hw.hardware_type & HW_FEATURE_SI5351C) == HW_FEATURE_SI5351C)
  {
    /* Programming the Si5351 via I2C
       http://community.silabs.com/t5/Silicon-Labs-Knowledge-Base/Programming-the-Si5351-via-I2C/ta-p/112251
    */
    si5351c_disable_all_outputs();
     c92:	f000 f9af 	bl	ff4 <si5351c_disable_all_outputs>
    si5351c_init_fanout();
     c96:	f000 fa0f 	bl	10b8 <si5351c_init_fanout>
    si5351c_power_down_all_clocks();
     c9a:	f000 f9f9 	bl	1090 <si5351c_power_down_all_clocks>
    si5351c_init_xtal();
     c9e:	f000 fa19 	bl	10d4 <si5351c_init_xtal>
    si5351c_read[0] = si5351c_read_single(0);
     ca2:	2000      	movs	r0, #0
     ca4:	f000 f964 	bl	f70 <si5351c_read_single>
     ca8:	4e34      	ldr	r6, [pc, #208]	; (d7c <conf_data_share_size+0x17c>)
     caa:	7030      	strb	r0, [r6, #0]

    /* Configure and enable SI5351C clocks */
    si5351c_read[1] = (si5351c_read_single(0) & SI5351C_REG0_CLKIN_LOS);
     cac:	2000      	movs	r0, #0
     cae:	f000 f95f 	bl	f70 <si5351c_read_single>
     cb2:	f000 0510 	and.w	r5, r0, #16
     cb6:	b2ea      	uxtb	r2, r5
     cb8:	7072      	strb	r2, [r6, #1]

    /* CLKIN Loss Of Signal (LOS) ? */
    if(si5351c_read[1] == SI5351C_REG0_CLKIN_LOS)
     cba:	bb92      	cbnz	r2, d22 <conf_data_share_size+0x122>
      {
        airspy_conf->r820t_conf_rw.xtal_freq = sys_calib_r820t(airspy_conf->r820t_conf_rw.xtal_freq, airspy_calib.correction_ppb);
      }
    }else
    {
        si5351c_airspy_config(&airspy_conf->si5351c_config[AIRSPY_SI5351C_CONFIG_CLKIN]);
     cbc:	6820      	ldr	r0, [r4, #0]
     cbe:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
     cc2:	30b4      	adds	r0, #180	; 0xb4
     cc4:	f000 f926 	bl	f14 <si5351c_airspy_config>
    }

    si5351c_read[2] = si5351c_read_single(0);
     cc8:	2000      	movs	r0, #0
     cca:	f000 f951 	bl	f70 <si5351c_read_single>

    si5351c_init_pll_soft_reset();
    si5351c_enable_clock_outputs();
     cce:	f242 7710 	movw	r7, #10000	; 0x2710
    }else
    {
        si5351c_airspy_config(&airspy_conf->si5351c_config[AIRSPY_SI5351C_CONFIG_CLKIN]);
    }

    si5351c_read[2] = si5351c_read_single(0);
     cd2:	70b0      	strb	r0, [r6, #2]

    si5351c_init_pll_soft_reset();
     cd4:	f000 fa0c 	bl	10f0 <si5351c_init_pll_soft_reset>
    si5351c_enable_clock_outputs();
     cd8:	f000 fa18 	bl	110c <si5351c_enable_clock_outputs>
     cdc:	463a      	mov	r2, r7
void delay(uint32_t duration)
{
  uint32_t i;

  for (i = 0; i < duration; i++)
    __asm__("nop");
     cde:	bf00      	nop
     ce0:	1e55      	subs	r5, r2, #1
     ce2:	bf00      	nop

void delay(uint32_t duration)
{
  uint32_t i;

  for (i = 0; i < duration; i++)
     ce4:	1e6a      	subs	r2, r5, #1
     ce6:	d1fa      	bne.n	cde <conf_data_share_size+0xde>
     ce8:	4610      	mov	r0, r2
    si5351c_init_pll_soft_reset();
    si5351c_enable_clock_outputs();

    /* Wait at least 300us after SI5351C Clock Enable */
    delay(WAIT_CPU_CLOCK_INIT_DELAY);
    si5351c_read[3] = si5351c_read_single(0);
     cea:	f000 f941 	bl	f70 <si5351c_read_single>
     cee:	6825      	ldr	r5, [r4, #0]
     cf0:	70f0      	strb	r0, [r6, #3]
     cf2:	e60f      	b.n	914 <sys_clock_init+0xe4>
  }else
  {
    /* Check calibration is valid / enabled */
    if(airspy_calib.header == AIRSPY_FLASH_CALIB_HEADER)
    {
      airspy_conf->r820t_conf_rw.xtal_freq = sys_calib_r820t(airspy_conf->r820t_conf_rw.xtal_freq, airspy_calib.correction_ppb);
     cf4:	6cae      	ldr	r6, [r5, #72]	; 0x48

/* Return corrected xtal_freq */
uint32_t sys_calib_r820t(uint32_t xtal_freq, int32_t correction_ppb)
{
  const int invppb = 1000000000;
  xtal_freq += ((int64_t)xtal_freq * (int64_t)correction_ppb + invppb / 2) / invppb;
     cf6:	4640      	mov	r0, r8
     cf8:	17c1      	asrs	r1, r0, #31
     cfa:	fba6 2308 	umull	r2, r3, r6, r8
     cfe:	fb06 3301 	mla	r3, r6, r1, r3
     d02:	a119      	add	r1, pc, #100	; (adr r1, d68 <conf_data_share_size+0x168>)
     d04:	e9d1 0100 	ldrd	r0, r1, [r1]
     d08:	1880      	adds	r0, r0, r2
     d0a:	eb41 0103 	adc.w	r1, r1, r3
     d0e:	a318      	add	r3, pc, #96	; (adr r3, d70 <conf_data_share_size+0x170>)
     d10:	e9d3 2300 	ldrd	r2, r3, [r3]
     d14:	f000 fcb0 	bl	1678 <__aeabi_ldivmod>
     d18:	1837      	adds	r7, r6, r0
  }else
  {
    /* Check calibration is valid / enabled */
    if(airspy_calib.header == AIRSPY_FLASH_CALIB_HEADER)
    {
      airspy_conf->r820t_conf_rw.xtal_freq = sys_calib_r820t(airspy_conf->r820t_conf_rw.xtal_freq, airspy_calib.correction_ppb);
     d1a:	64af      	str	r7, [r5, #72]	; 0x48
     d1c:	e5fa      	b.n	914 <sys_clock_init+0xe4>
    /* SI5351C not detected continue init using AirSpy MINI configuration */
    addr = (uint32_t)&airspy_mini_conf;
    addr = (addr | ROMFLASH_BASE_ADDR); /* Fix with Addr from ROMFLASH */
    src = (unsigned char *)addr;
    /* Copy the configuration from Flash to SRAM */
    for (dest = (unsigned char *)airspy_conf; (uint32_t)dest < (((uint32_t)airspy_conf) + AIRSPY_CONF_MAX_DATA_SIZE); )
     d1e:	461d      	mov	r5, r3
     d20:	e5ca      	b.n	8b8 <sys_clock_init+0x88>

    /* CLKIN Loss Of Signal (LOS) ? */
    if(si5351c_read[1] == SI5351C_REG0_CLKIN_LOS)
    {
      /* Apply SI5351C configuration */
      si5351c_airspy_config(&airspy_conf->si5351c_config[AIRSPY_SI5351C_CONFIG_XTAL]);
     d22:	6821      	ldr	r1, [r4, #0]
     d24:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88
     d28:	f000 f8f4 	bl	f14 <si5351c_airspy_config>

      /* Check calibration is valid / enabled */
      if(airspy_calib.header == AIRSPY_FLASH_CALIB_HEADER)
     d2c:	2301      	movs	r3, #1
     d2e:	f6cc 231b 	movt	r3, #51739	; 0xca1b
     d32:	429f      	cmp	r7, r3
     d34:	d1c8      	bne.n	cc8 <conf_data_share_size+0xc8>
      {
        airspy_conf->r820t_conf_rw.xtal_freq = sys_calib_r820t(airspy_conf->r820t_conf_rw.xtal_freq, airspy_calib.correction_ppb);
     d36:	4f12      	ldr	r7, [pc, #72]	; (d80 <conf_data_share_size+0x180>)
     d38:	683f      	ldr	r7, [r7, #0]
     d3a:	6cbd      	ldr	r5, [r7, #72]	; 0x48

/* Return corrected xtal_freq */
uint32_t sys_calib_r820t(uint32_t xtal_freq, int32_t correction_ppb)
{
  const int invppb = 1000000000;
  xtal_freq += ((int64_t)xtal_freq * (int64_t)correction_ppb + invppb / 2) / invppb;
     d3c:	4642      	mov	r2, r8
     d3e:	17d0      	asrs	r0, r2, #31
     d40:	fba5 2308 	umull	r2, r3, r5, r8
     d44:	fb05 3300 	mla	r3, r5, r0, r3
     d48:	a107      	add	r1, pc, #28	; (adr r1, d68 <conf_data_share_size+0x168>)
     d4a:	e9d1 0100 	ldrd	r0, r1, [r1]
     d4e:	1880      	adds	r0, r0, r2
     d50:	eb41 0103 	adc.w	r1, r1, r3
     d54:	a306      	add	r3, pc, #24	; (adr r3, d70 <conf_data_share_size+0x170>)
     d56:	e9d3 2300 	ldrd	r2, r3, [r3]
     d5a:	f000 fc8d 	bl	1678 <__aeabi_ldivmod>
     d5e:	1829      	adds	r1, r5, r0
      si5351c_airspy_config(&airspy_conf->si5351c_config[AIRSPY_SI5351C_CONFIG_XTAL]);

      /* Check calibration is valid / enabled */
      if(airspy_calib.header == AIRSPY_FLASH_CALIB_HEADER)
      {
        airspy_conf->r820t_conf_rw.xtal_freq = sys_calib_r820t(airspy_conf->r820t_conf_rw.xtal_freq, airspy_calib.correction_ppb);
     d60:	64b9      	str	r1, [r7, #72]	; 0x48
     d62:	e7b1      	b.n	cc8 <conf_data_share_size+0xc8>
     d64:	f3af 8000 	nop.w
     d68:	1dcd6500 	.word	0x1dcd6500
     d6c:	00000000 	.word	0x00000000
     d70:	3b9aca00 	.word	0x3b9aca00
     d74:	00000000 	.word	0x00000000
     d78:	00005348 	.word	0x00005348
     d7c:	10080084 	.word	0x10080084
     d80:	10080018 	.word	0x10080018
     d84:	f3af 8000 	nop.w

00000d88 <cpu_clock_pll1_high_speed>:
  /* Configure PLL1 to Intermediate Clock final freq / 2 (because DIRECT=1) */
  /* Integer mode:
    FCLKOUT = M*(FCLKIN/N)
    FCCO = 2*P*FCLKOUT = 2*P*M*(FCLKIN/N)
  */
  pll_reg = CGU_PLL1_CTRL;
     d88:	2144      	movs	r1, #68	; 0x44
     d8a:	f2c4 0105 	movt	r1, #16389	; 0x4005
 Configure PLL1 to high speed with CGU_SRC_GP_CLKIN.
(PLL1 High Speed compliant with UM10503 Rev. 1.8 — 28 January 2014 Fig 30. BASE_M4_CLK ramp-up procedure)
 Connect PLL1 to M4/M0 core, Peripheral, APB1, APB3.
*/
void cpu_clock_pll1_high_speed(const airspy_pll1_hs_t* const pt_airspy_pll1_hs_conf)
{
     d8e:	b430      	push	{r4, r5}
          CGU_PLL1_CTRL_DIRECT | /* DIRECT */
          CGU_PLL1_CTRL_PSEL_MASK | CGU_PLL1_CTRL_MSEL_MASK | CGU_PLL1_CTRL_NSEL_MASK ); /* PSEL, MSEL, NSEL- divider ratios */
  
  /* Set PLL1 to High Speed/2 */
  pll_reg |= CGU_PLL1_CTRL_CLK_SEL(CGU_SRC_GP_CLKIN)
        | CGU_PLL1_CTRL_PSEL(pll1_psel)
     d90:	6802      	ldr	r2, [r0, #0]
  /* Configure PLL1 to Intermediate Clock final freq / 2 (because DIRECT=1) */
  /* Integer mode:
    FCLKOUT = M*(FCLKIN/N)
    FCCO = 2*P*FCLKOUT = 2*P*M*(FCLKIN/N)
  */
  pll_reg = CGU_PLL1_CTRL;
     d92:	680d      	ldr	r5, [r1, #0]
          CGU_PLL1_CTRL_PSEL_MASK | CGU_PLL1_CTRL_MSEL_MASK | CGU_PLL1_CTRL_NSEL_MASK ); /* PSEL, MSEL, NSEL- divider ratios */
  
  /* Set PLL1 to High Speed/2 */
  pll_reg |= CGU_PLL1_CTRL_CLK_SEL(CGU_SRC_GP_CLKIN)
        | CGU_PLL1_CTRL_PSEL(pll1_psel)
        | CGU_PLL1_CTRL_NSEL(pll1_nsel)
     d94:	6844      	ldr	r4, [r0, #4]
        | CGU_PLL1_CTRL_MSEL(pll1_msel)
     d96:	6880      	ldr	r0, [r0, #8]
    FCLKOUT = M*(FCLKIN/N)
    FCCO = 2*P*FCLKOUT = 2*P*M*(FCLKIN/N)
  */
  pll_reg = CGU_PLL1_CTRL;
  /* Clear PLL1 bits */
  pll_reg &= ~( CGU_PLL1_CTRL_CLK_SEL_MASK | CGU_PLL1_CTRL_PD | CGU_PLL1_CTRL_FBSEL |  /* CLK SEL, PowerDown , FBSEL */
     d98:	f64c 433c 	movw	r3, #52284	; 0xcc3c
     d9c:	f2ce 0300 	movt	r3, #57344	; 0xe000
          CGU_PLL1_CTRL_DIRECT | /* DIRECT */
          CGU_PLL1_CTRL_PSEL_MASK | CGU_PLL1_CTRL_MSEL_MASK | CGU_PLL1_CTRL_NSEL_MASK ); /* PSEL, MSEL, NSEL- divider ratios */
  
  /* Set PLL1 to High Speed/2 */
  pll_reg |= CGU_PLL1_CTRL_CLK_SEL(CGU_SRC_GP_CLKIN)
        | CGU_PLL1_CTRL_PSEL(pll1_psel)
     da0:	0212      	lsls	r2, r2, #8
    FCLKOUT = M*(FCLKIN/N)
    FCCO = 2*P*FCLKOUT = 2*P*M*(FCLKIN/N)
  */
  pll_reg = CGU_PLL1_CTRL;
  /* Clear PLL1 bits */
  pll_reg &= ~( CGU_PLL1_CTRL_CLK_SEL_MASK | CGU_PLL1_CTRL_PD | CGU_PLL1_CTRL_FBSEL |  /* CLK SEL, PowerDown , FBSEL */
     da2:	402b      	ands	r3, r5
          CGU_PLL1_CTRL_PSEL_MASK | CGU_PLL1_CTRL_MSEL_MASK | CGU_PLL1_CTRL_NSEL_MASK ); /* PSEL, MSEL, NSEL- divider ratios */
  
  /* Set PLL1 to High Speed/2 */
  pll_reg |= CGU_PLL1_CTRL_CLK_SEL(CGU_SRC_GP_CLKIN)
        | CGU_PLL1_CTRL_PSEL(pll1_psel)
        | CGU_PLL1_CTRL_NSEL(pll1_nsel)
     da4:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
          CGU_PLL1_CTRL_BYPASS | /* BYPASS */
          CGU_PLL1_CTRL_DIRECT | /* DIRECT */
          CGU_PLL1_CTRL_PSEL_MASK | CGU_PLL1_CTRL_MSEL_MASK | CGU_PLL1_CTRL_NSEL_MASK ); /* PSEL, MSEL, NSEL- divider ratios */
  
  /* Set PLL1 to High Speed/2 */
  pll_reg |= CGU_PLL1_CTRL_CLK_SEL(CGU_SRC_GP_CLKIN)
     da8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
        | CGU_PLL1_CTRL_PSEL(pll1_psel)
        | CGU_PLL1_CTRL_NSEL(pll1_nsel)
        | CGU_PLL1_CTRL_MSEL(pll1_msel)
     dac:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
          CGU_PLL1_CTRL_BYPASS | /* BYPASS */
          CGU_PLL1_CTRL_DIRECT | /* DIRECT */
          CGU_PLL1_CTRL_PSEL_MASK | CGU_PLL1_CTRL_MSEL_MASK | CGU_PLL1_CTRL_NSEL_MASK ); /* PSEL, MSEL, NSEL- divider ratios */
  
  /* Set PLL1 to High Speed/2 */
  pll_reg |= CGU_PLL1_CTRL_CLK_SEL(CGU_SRC_GP_CLKIN)
     db0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     db4:	4303      	orrs	r3, r0
        | CGU_PLL1_CTRL_MSEL(pll1_msel)
        | CGU_PLL1_CTRL_FBSEL;
  CGU_PLL1_CTRL = pll_reg;

  /* wait until stable */
  while (!(CGU_PLL1_STAT & CGU_PLL1_STAT_LOCK));
     db6:	2240      	movs	r2, #64	; 0x40
  pll_reg |= CGU_PLL1_CTRL_CLK_SEL(CGU_SRC_GP_CLKIN)
        | CGU_PLL1_CTRL_PSEL(pll1_psel)
        | CGU_PLL1_CTRL_NSEL(pll1_nsel)
        | CGU_PLL1_CTRL_MSEL(pll1_msel)
        | CGU_PLL1_CTRL_FBSEL;
  CGU_PLL1_CTRL = pll_reg;
     db8:	600b      	str	r3, [r1, #0]

  /* wait until stable */
  while (!(CGU_PLL1_STAT & CGU_PLL1_STAT_LOCK));
     dba:	f2c4 0205 	movt	r2, #16389	; 0x4005
     dbe:	6811      	ldr	r1, [r2, #0]
     dc0:	07cb      	lsls	r3, r1, #31
     dc2:	d5fc      	bpl.n	dbe <cpu_clock_pll1_high_speed+0x36>
     dc4:	f242 7210 	movw	r2, #10000	; 0x2710
void delay(uint32_t duration)
{
  uint32_t i;

  for (i = 0; i < duration; i++)
    __asm__("nop");
     dc8:	bf00      	nop
     dca:	1e53      	subs	r3, r2, #1
     dcc:	bf00      	nop

void delay(uint32_t duration)
{
  uint32_t i;

  for (i = 0; i < duration; i++)
     dce:	1e5a      	subs	r2, r3, #1
     dd0:	d1fa      	bne.n	dc8 <cpu_clock_pll1_high_speed+0x40>
  */
  delay(WAIT_CPU_CLOCK_INIT_DELAY);

  /* Configure PLL1 High Speed (DIRECT=1) */
  /* Direct mode: FCLKOUT = FCCO = M*(FCLKIN/N) */
  pll_reg = CGU_PLL1_CTRL;
     dd2:	2144      	movs	r1, #68	; 0x44
     dd4:	f2c4 0105 	movt	r1, #16389	; 0x4005
  /* Clear PLL1 bits */
  pll_reg &= ~( CGU_PLL1_CTRL_CLK_SEL_MASK | CGU_PLL1_CTRL_PD | CGU_PLL1_CTRL_FBSEL |  /* CLK SEL, PowerDown , FBSEL */
     dd8:	f64c 433c 	movw	r3, #52284	; 0xcc3c
  */
  delay(WAIT_CPU_CLOCK_INIT_DELAY);

  /* Configure PLL1 High Speed (DIRECT=1) */
  /* Direct mode: FCLKOUT = FCCO = M*(FCLKIN/N) */
  pll_reg = CGU_PLL1_CTRL;
     ddc:	680a      	ldr	r2, [r1, #0]
  /* Clear PLL1 bits */
  pll_reg &= ~( CGU_PLL1_CTRL_CLK_SEL_MASK | CGU_PLL1_CTRL_PD | CGU_PLL1_CTRL_FBSEL |  /* CLK SEL, PowerDown , FBSEL */
     dde:	f2ce 0300 	movt	r3, #57344	; 0xe000
     de2:	4013      	ands	r3, r2
          CGU_PLL1_CTRL_BYPASS | /* BYPASS */
          CGU_PLL1_CTRL_DIRECT | /* DIRECT */
          CGU_PLL1_CTRL_PSEL_MASK | CGU_PLL1_CTRL_MSEL_MASK | CGU_PLL1_CTRL_NSEL_MASK ); /* PSEL, MSEL, NSEL- divider ratios */
  /* Set PLL1 to HighSpeed */
  pll_reg |= CGU_PLL1_CTRL_CLK_SEL(CGU_SRC_GP_CLKIN)
     de4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
     de8:	f043 02c0 	orr.w	r2, r3, #192	; 0xc0
     dec:	4310      	orrs	r0, r2
        | CGU_PLL1_CTRL_MSEL(pll1_msel)
        | CGU_PLL1_CTRL_FBSEL
        | CGU_PLL1_CTRL_DIRECT;
  CGU_PLL1_CTRL = pll_reg;
  /* wait until stable */
  while (!(CGU_PLL1_STAT & CGU_PLL1_STAT_LOCK));
     dee:	2240      	movs	r2, #64	; 0x40
        | CGU_PLL1_CTRL_PSEL(pll1_psel)
        | CGU_PLL1_CTRL_NSEL(pll1_nsel)
        | CGU_PLL1_CTRL_MSEL(pll1_msel)
        | CGU_PLL1_CTRL_FBSEL
        | CGU_PLL1_CTRL_DIRECT;
  CGU_PLL1_CTRL = pll_reg;
     df0:	6008      	str	r0, [r1, #0]
  /* wait until stable */
  while (!(CGU_PLL1_STAT & CGU_PLL1_STAT_LOCK));
     df2:	f2c4 0205 	movt	r2, #16389	; 0x4005
     df6:	6811      	ldr	r1, [r2, #0]
     df8:	07c9      	lsls	r1, r1, #31
     dfa:	d5fc      	bpl.n	df6 <cpu_clock_pll1_high_speed+0x6e>
}
     dfc:	bc30      	pop	{r4, r5}
     dfe:	4770      	bx	lr

00000e00 <led_on>:

void led_on(void)
{
  gpio_set(PORT_EN_LED1, PIN_EN_LED1);
     e00:	f44f 40c0 	mov.w	r0, #24576	; 0x6000
     e04:	f2c4 000f 	movt	r0, #16399	; 0x400f
     e08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     e0c:	f000 b98c 	b.w	1128 <gpio_set>

00000e10 <led_off>:
}

void led_off(void)
{
  gpio_clear(PORT_EN_LED1, PIN_EN_LED1);
     e10:	f44f 40c0 	mov.w	r0, #24576	; 0x6000
     e14:	f2c4 000f 	movt	r0, #16399	; 0x400f
     e18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     e1c:	f000 b988 	b.w	1130 <gpio_clear>

00000e20 <enable_r820t_power>:
  led_off();
}

void enable_r820t_power(void)
{
  gpio_set(PORT_EN_R820T, PIN_EN_R820T);
     e20:	f246 0004 	movw	r0, #24580	; 0x6004
     e24:	f2c4 000f 	movt	r0, #16399	; 0x400f

  led_off();
}

void enable_r820t_power(void)
{
     e28:	b508      	push	{r3, lr}
  gpio_set(PORT_EN_R820T, PIN_EN_R820T);
     e2a:	2180      	movs	r1, #128	; 0x80
     e2c:	f000 f97c 	bl	1128 <gpio_set>
     e30:	f248 60a0 	movw	r0, #34464	; 0x86a0
     e34:	f2c0 0001 	movt	r0, #1
void delay(uint32_t duration)
{
  uint32_t i;

  for (i = 0; i < duration; i++)
    __asm__("nop");
     e38:	bf00      	nop
     e3a:	1e43      	subs	r3, r0, #1
     e3c:	bf00      	nop

void delay(uint32_t duration)
{
  uint32_t i;

  for (i = 0; i < duration; i++)
     e3e:	1e58      	subs	r0, r3, #1
     e40:	d1fa      	bne.n	e38 <enable_r820t_power+0x18>
void enable_r820t_power(void)
{
  gpio_set(PORT_EN_R820T, PIN_EN_R820T);
  /* Wait after PowerOn (stabilization of LDO & Internal Init of R820T) */
  delay(WAIT_R820T_POWER_ON_DELAY);
}
     e42:	bd08      	pop	{r3, pc}

00000e44 <disable_biast_power>:
  gpio_set(PORT_EN_BIAST, PIN_EN_BIAST);
}

void disable_biast_power(void)
{
  gpio_clear(PORT_EN_BIAST, PIN_EN_BIAST);
     e44:	f246 0004 	movw	r0, #24580	; 0x6004
     e48:	f2c4 000f 	movt	r0, #16399	; 0x400f
     e4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     e50:	f000 b96e 	b.w	1130 <gpio_clear>

00000e54 <pin_setup>:
{
  gpio_clear(PORT_EN_LED1, PIN_EN_LED1);
}

void pin_setup(void)
{
     e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int i;

  /* Configure all GPIO as Input (safe state) */
  GPIO0_DIR = 0;
     e56:	f44f 4cc0 	mov.w	ip, #24576	; 0x6000
  GPIO1_DIR = 0;
     e5a:	f246 0e04 	movw	lr, #24580	; 0x6004
  GPIO2_DIR = 0;
     e5e:	f246 0708 	movw	r7, #24584	; 0x6008
  GPIO3_DIR = 0;
     e62:	f246 060c 	movw	r6, #24588	; 0x600c
  GPIO4_DIR = 0;
     e66:	f246 0410 	movw	r4, #24592	; 0x6010
  GPIO5_DIR = 0;
     e6a:	f246 0014 	movw	r0, #24596	; 0x6014
  GPIO6_DIR = 0;
     e6e:	f246 0118 	movw	r1, #24600	; 0x6018
  GPIO7_DIR = 0;
     e72:	f246 021c 	movw	r2, #24604	; 0x601c
void pin_setup(void)
{
  int i;

  /* Configure all GPIO as Input (safe state) */
  GPIO0_DIR = 0;
     e76:	f2c4 0c0f 	movt	ip, #16399	; 0x400f
  GPIO1_DIR = 0;
     e7a:	f2c4 0e0f 	movt	lr, #16399	; 0x400f
  GPIO2_DIR = 0;
  GPIO3_DIR = 0;
  GPIO4_DIR = 0;
     e7e:	f2c4 040f 	movt	r4, #16399	; 0x400f
  GPIO5_DIR = 0;
     e82:	f2c4 000f 	movt	r0, #16399	; 0x400f
  GPIO6_DIR = 0;
     e86:	f2c4 010f 	movt	r1, #16399	; 0x400f
  GPIO7_DIR = 0;
     e8a:	f2c4 020f 	movt	r2, #16399	; 0x400f
  int i;

  /* Configure all GPIO as Input (safe state) */
  GPIO0_DIR = 0;
  GPIO1_DIR = 0;
  GPIO2_DIR = 0;
     e8e:	f2c4 070f 	movt	r7, #16399	; 0x400f
  GPIO3_DIR = 0;
     e92:	f2c4 060f 	movt	r6, #16399	; 0x400f
void pin_setup(void)
{
  int i;

  /* Configure all GPIO as Input (safe state) */
  GPIO0_DIR = 0;
     e96:	2300      	movs	r3, #0
     e98:	4d1d      	ldr	r5, [pc, #116]	; (f10 <pin_setup+0xbc>)
     e9a:	f8cc 3000 	str.w	r3, [ip]
  GPIO1_DIR = 0;
     e9e:	f8ce 3000 	str.w	r3, [lr]
  GPIO2_DIR = 0;
     ea2:	603b      	str	r3, [r7, #0]
  GPIO3_DIR = 0;
     ea4:	6033      	str	r3, [r6, #0]
  GPIO4_DIR = 0;
     ea6:	6023      	str	r3, [r4, #0]
  GPIO5_DIR = 0;
     ea8:	6003      	str	r3, [r0, #0]
  GPIO6_DIR = 0;
     eaa:	600b      	str	r3, [r1, #0]
  GPIO7_DIR = 0;
     eac:	6013      	str	r3, [r2, #0]

  /* Pin configuration for all pins */
  for(i = 0; i < GPIO_CONF_NB; i++)
  {
    scu_pinmux(gpio_conf[i].group_pin, gpio_conf[i].scu_conf);
     eae:	e895 0003 	ldmia.w	r5, {r0, r1}
     eb2:	f000 f941 	bl	1138 <scu_pinmux>
     eb6:	2408      	movs	r4, #8
void led_off(void)
{
  gpio_clear(PORT_EN_LED1, PIN_EN_LED1);
}

void pin_setup(void)
     eb8:	1929      	adds	r1, r5, r4
  GPIO7_DIR = 0;

  /* Pin configuration for all pins */
  for(i = 0; i < GPIO_CONF_NB; i++)
  {
    scu_pinmux(gpio_conf[i].group_pin, gpio_conf[i].scu_conf);
     eba:	5928      	ldr	r0, [r5, r4]
     ebc:	6849      	ldr	r1, [r1, #4]
     ebe:	3408      	adds	r4, #8
     ec0:	f000 f93a 	bl	1138 <scu_pinmux>
void led_off(void)
{
  gpio_clear(PORT_EN_LED1, PIN_EN_LED1);
}

void pin_setup(void)
     ec4:	192a      	adds	r2, r5, r4
  GPIO7_DIR = 0;

  /* Pin configuration for all pins */
  for(i = 0; i < GPIO_CONF_NB; i++)
  {
    scu_pinmux(gpio_conf[i].group_pin, gpio_conf[i].scu_conf);
     ec6:	5928      	ldr	r0, [r5, r4]
     ec8:	6851      	ldr	r1, [r2, #4]
     eca:	3408      	adds	r4, #8
     ecc:	f000 f934 	bl	1138 <scu_pinmux>
  GPIO5_DIR = 0;
  GPIO6_DIR = 0;
  GPIO7_DIR = 0;

  /* Pin configuration for all pins */
  for(i = 0; i < GPIO_CONF_NB; i++)
     ed0:	f5b4 6fa1 	cmp.w	r4, #1288	; 0x508
     ed4:	d1f0      	bne.n	eb8 <pin_setup+0x64>
  {
    scu_pinmux(gpio_conf[i].group_pin, gpio_conf[i].scu_conf);
  }

  /* GPIO1[7] on P1_14 as output. */
  GPIO1_DIR |= PIN_EN_R820T;
     ed6:	f246 0404 	movw	r4, #24580	; 0x6004
     eda:	f2c4 040f 	movt	r4, #16399	; 0x400f
     ede:	6820      	ldr	r0, [r4, #0]
     ee0:	f040 0380 	orr.w	r3, r0, #128	; 0x80
     ee4:	6023      	str	r3, [r4, #0]
  enable_r820t_power();
     ee6:	f7ff ff9b 	bl	e20 <enable_r820t_power>

  /* GPIO1[13] on P2_13 as output. */
  GPIO1_DIR |= PIN_EN_BIAST;
     eea:	6821      	ldr	r1, [r4, #0]
     eec:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
     ef0:	6022      	str	r2, [r4, #0]
  disable_biast_power();
     ef2:	f7ff ffa7 	bl	e44 <disable_biast_power>

  /* GPIO0[12] on P1_17 as output. */
  GPIO0_DIR |= PIN_EN_LED1;
     ef6:	f44f 40c0 	mov.w	r0, #24576	; 0x6000
     efa:	f2c4 000f 	movt	r0, #16399	; 0x400f
     efe:	6803      	ldr	r3, [r0, #0]
     f00:	f443 5180 	orr.w	r1, r3, #4096	; 0x1000
     f04:	6001      	str	r1, [r0, #0]

  led_off();
}
     f06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  disable_biast_power();

  /* GPIO0[12] on P1_17 as output. */
  GPIO0_DIR |= PIN_EN_LED1;

  led_off();
     f0a:	f7ff bf81 	b.w	e10 <led_off>
     f0e:	bf00      	nop
     f10:	00004b90 	.word	0x00004b90

00000f14 <si5351c_airspy_config>:

#define SI5351C_WRITE_CONF_STEP2_REG (149)
#define SI5351C_WRITE_CONF_STEP2_SIZE (22) /* 170 - 149 + 1 */

void si5351c_airspy_config(const si5351c_conf_t* const pt_si5351c_conf)
{
     f14:	b570      	push	{r4, r5, r6, lr}
     f16:	4606      	mov	r6, r0
  int i;

  /* Write Conf Step1 */
  i2c0_tx_start();
     f18:	f000 f950 	bl	11bc <i2c0_tx_start>
  i2c0_tx_byte(SI5351C_I2C_ADDR | I2C_WRITE);
     f1c:	20c0      	movs	r0, #192	; 0xc0
     f1e:	f000 f971 	bl	1204 <i2c0_tx_byte>

  i2c0_tx_byte(SI5351C_WRITE_CONF_STEP1_REG);
     f22:	200f      	movs	r0, #15
     f24:	f000 f96e 	bl	1204 <i2c0_tx_byte>
  for(i = SI5351C_WRITE_CONF_STEP1_REG; i < (SI5351C_WRITE_CONF_STEP1_REG+SI5351C_WRITE_CONF_STEP1_SIZE); i++)
     f28:	240f      	movs	r4, #15
     f2a:	1c65      	adds	r5, r4, #1
  {
    i2c0_tx_byte(pt_si5351c_conf->conf[i]);
     f2c:	5d30      	ldrb	r0, [r6, r4]
     f2e:	f000 f969 	bl	1204 <i2c0_tx_byte>
  /* Write Conf Step1 */
  i2c0_tx_start();
  i2c0_tx_byte(SI5351C_I2C_ADDR | I2C_WRITE);

  i2c0_tx_byte(SI5351C_WRITE_CONF_STEP1_REG);
  for(i = SI5351C_WRITE_CONF_STEP1_REG; i < (SI5351C_WRITE_CONF_STEP1_REG+SI5351C_WRITE_CONF_STEP1_SIZE); i++)
     f32:	3402      	adds	r4, #2
  {
    i2c0_tx_byte(pt_si5351c_conf->conf[i]);
     f34:	5d70      	ldrb	r0, [r6, r5]
     f36:	f000 f965 	bl	1204 <i2c0_tx_byte>
  /* Write Conf Step1 */
  i2c0_tx_start();
  i2c0_tx_byte(SI5351C_I2C_ADDR | I2C_WRITE);

  i2c0_tx_byte(SI5351C_WRITE_CONF_STEP1_REG);
  for(i = SI5351C_WRITE_CONF_STEP1_REG; i < (SI5351C_WRITE_CONF_STEP1_REG+SI5351C_WRITE_CONF_STEP1_SIZE); i++)
     f3a:	2c5d      	cmp	r4, #93	; 0x5d
     f3c:	d1f5      	bne.n	f2a <si5351c_airspy_config+0x16>
  {
    i2c0_tx_byte(pt_si5351c_conf->conf[i]);
  }
  i2c0_stop();
     f3e:	f000 f9c1 	bl	12c4 <i2c0_stop>
  
  /* Write Conf Step2 */
  i2c0_tx_start();
     f42:	f000 f93b 	bl	11bc <i2c0_tx_start>
  i2c0_tx_byte(SI5351C_I2C_ADDR | I2C_WRITE);
     f46:	20c0      	movs	r0, #192	; 0xc0
     f48:	f000 f95c 	bl	1204 <i2c0_tx_byte>

  i2c0_tx_byte(SI5351C_WRITE_CONF_STEP2_REG);
     f4c:	2095      	movs	r0, #149	; 0x95
     f4e:	f000 f959 	bl	1204 <i2c0_tx_byte>
  for (i = SI5351C_WRITE_CONF_STEP2_REG; i < (SI5351C_WRITE_CONF_STEP2_REG+SI5351C_WRITE_CONF_STEP2_SIZE); i++)
     f52:	2495      	movs	r4, #149	; 0x95
     f54:	1c65      	adds	r5, r4, #1
  {
    i2c0_tx_byte(pt_si5351c_conf->conf[i]);
     f56:	5d30      	ldrb	r0, [r6, r4]
     f58:	f000 f954 	bl	1204 <i2c0_tx_byte>
  /* Write Conf Step2 */
  i2c0_tx_start();
  i2c0_tx_byte(SI5351C_I2C_ADDR | I2C_WRITE);

  i2c0_tx_byte(SI5351C_WRITE_CONF_STEP2_REG);
  for (i = SI5351C_WRITE_CONF_STEP2_REG; i < (SI5351C_WRITE_CONF_STEP2_REG+SI5351C_WRITE_CONF_STEP2_SIZE); i++)
     f5c:	3402      	adds	r4, #2
  {
    i2c0_tx_byte(pt_si5351c_conf->conf[i]);
     f5e:	5d70      	ldrb	r0, [r6, r5]
     f60:	f000 f950 	bl	1204 <i2c0_tx_byte>
  /* Write Conf Step2 */
  i2c0_tx_start();
  i2c0_tx_byte(SI5351C_I2C_ADDR | I2C_WRITE);

  i2c0_tx_byte(SI5351C_WRITE_CONF_STEP2_REG);
  for (i = SI5351C_WRITE_CONF_STEP2_REG; i < (SI5351C_WRITE_CONF_STEP2_REG+SI5351C_WRITE_CONF_STEP2_SIZE); i++)
     f64:	2cab      	cmp	r4, #171	; 0xab
     f66:	d1f5      	bne.n	f54 <si5351c_airspy_config+0x40>
  {
    i2c0_tx_byte(pt_si5351c_conf->conf[i]);
  }
  i2c0_stop();
}
     f68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  i2c0_tx_byte(SI5351C_WRITE_CONF_STEP2_REG);
  for (i = SI5351C_WRITE_CONF_STEP2_REG; i < (SI5351C_WRITE_CONF_STEP2_REG+SI5351C_WRITE_CONF_STEP2_SIZE); i++)
  {
    i2c0_tx_byte(pt_si5351c_conf->conf[i]);
  }
  i2c0_stop();
     f6c:	f000 b9aa 	b.w	12c4 <i2c0_stop>

00000f70 <si5351c_read_single>:
  i2c0_stop();
}

/* read single register */
uint8_t si5351c_read_single(uint8_t reg)
{
     f70:	b510      	push	{r4, lr}
     f72:	4604      	mov	r4, r0
  uint8_t val;

  /* set register address with write */
  i2c0_tx_start();
     f74:	f000 f922 	bl	11bc <i2c0_tx_start>
  i2c0_tx_byte(SI5351C_I2C_ADDR | I2C_WRITE);
     f78:	20c0      	movs	r0, #192	; 0xc0
     f7a:	f000 f943 	bl	1204 <i2c0_tx_byte>
  i2c0_tx_byte(reg);
     f7e:	4620      	mov	r0, r4
     f80:	f000 f940 	bl	1204 <i2c0_tx_byte>

  /* read the value */
  i2c0_tx_start();
     f84:	f000 f91a 	bl	11bc <i2c0_tx_start>
  i2c0_tx_byte(SI5351C_I2C_ADDR | I2C_READ);
     f88:	20c1      	movs	r0, #193	; 0xc1
     f8a:	f000 f93b 	bl	1204 <i2c0_tx_byte>
  val = i2c0_rx_byte();
     f8e:	f000 f969 	bl	1264 <i2c0_rx_byte>
     f92:	4604      	mov	r4, r0
  i2c0_stop();
     f94:	f000 f996 	bl	12c4 <i2c0_stop>

  return val;
}
     f98:	4620      	mov	r0, r4
     f9a:	bd10      	pop	{r4, pc}

00000f9c <si5351c_write>:
/*
 * Write to one or more contiguous registers. data[0] should be the first
 * register number, one or more values follow.
 */
void si5351c_write(uint8_t* const data, const uint_fast8_t data_count)
{
     f9c:	b570      	push	{r4, r5, r6, lr}
     f9e:	4605      	mov	r5, r0
     fa0:	460e      	mov	r6, r1
  uint_fast8_t i;

  i2c0_tx_start();
     fa2:	f000 f90b 	bl	11bc <i2c0_tx_start>
  i2c0_tx_byte(SI5351C_I2C_ADDR | I2C_WRITE);
     fa6:	20c0      	movs	r0, #192	; 0xc0
     fa8:	f000 f92c 	bl	1204 <i2c0_tx_byte>

  for (i = 0; i < data_count; i++)
     fac:	b1ee      	cbz	r6, fea <si5351c_write+0x4e>
    i2c0_tx_byte(data[i]);
     fae:	462c      	mov	r4, r5

/*
 * Write to one or more contiguous registers. data[0] should be the first
 * register number, one or more values follow.
 */
void si5351c_write(uint8_t* const data, const uint_fast8_t data_count)
     fb0:	19ae      	adds	r6, r5, r6

  i2c0_tx_start();
  i2c0_tx_byte(SI5351C_I2C_ADDR | I2C_WRITE);

  for (i = 0; i < data_count; i++)
    i2c0_tx_byte(data[i]);
     fb2:	f814 0b01 	ldrb.w	r0, [r4], #1
     fb6:	43ed      	mvns	r5, r5
     fb8:	19a9      	adds	r1, r5, r6
     fba:	f001 0501 	and.w	r5, r1, #1
     fbe:	f000 f921 	bl	1204 <i2c0_tx_byte>
  uint_fast8_t i;

  i2c0_tx_start();
  i2c0_tx_byte(SI5351C_I2C_ADDR | I2C_WRITE);

  for (i = 0; i < data_count; i++)
     fc2:	42b4      	cmp	r4, r6
     fc4:	d011      	beq.n	fea <si5351c_write+0x4e>
     fc6:	b12d      	cbz	r5, fd4 <si5351c_write+0x38>
    i2c0_tx_byte(data[i]);
     fc8:	f814 0b01 	ldrb.w	r0, [r4], #1
     fcc:	f000 f91a 	bl	1204 <i2c0_tx_byte>
  uint_fast8_t i;

  i2c0_tx_start();
  i2c0_tx_byte(SI5351C_I2C_ADDR | I2C_WRITE);

  for (i = 0; i < data_count; i++)
     fd0:	42b4      	cmp	r4, r6
     fd2:	d00a      	beq.n	fea <si5351c_write+0x4e>
    i2c0_tx_byte(data[i]);
     fd4:	4625      	mov	r5, r4
     fd6:	f815 0b01 	ldrb.w	r0, [r5], #1
     fda:	f000 f913 	bl	1204 <i2c0_tx_byte>
     fde:	7860      	ldrb	r0, [r4, #1]
     fe0:	1c6c      	adds	r4, r5, #1
     fe2:	f000 f90f 	bl	1204 <i2c0_tx_byte>
  uint_fast8_t i;

  i2c0_tx_start();
  i2c0_tx_byte(SI5351C_I2C_ADDR | I2C_WRITE);

  for (i = 0; i < data_count; i++)
     fe6:	42b4      	cmp	r4, r6
     fe8:	d1f4      	bne.n	fd4 <si5351c_write+0x38>
    i2c0_tx_byte(data[i]);
  i2c0_stop();
}
     fea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  i2c0_tx_start();
  i2c0_tx_byte(SI5351C_I2C_ADDR | I2C_WRITE);

  for (i = 0; i < data_count; i++)
    i2c0_tx_byte(data[i]);
  i2c0_stop();
     fee:	f000 b969 	b.w	12c4 <i2c0_stop>
     ff2:	bf00      	nop

00000ff4 <si5351c_disable_all_outputs>:
}

/* Disable all CLKx outputs. */
void si5351c_disable_all_outputs(void)
{
     ff4:	b500      	push	{lr}
  uint8_t data[] = { 3, 0xFF };
     ff6:	f245 0398 	movw	r3, #20632	; 0x5098
     ffa:	f2c0 0300 	movt	r3, #0
  i2c0_stop();
}

/* Disable all CLKx outputs. */
void si5351c_disable_all_outputs(void)
{
     ffe:	b083      	sub	sp, #12
  uint8_t data[] = { 3, 0xFF };
    1000:	881a      	ldrh	r2, [r3, #0]
  si5351c_write(data, sizeof(data));
    1002:	a801      	add	r0, sp, #4
    1004:	2102      	movs	r1, #2
}

/* Disable all CLKx outputs. */
void si5351c_disable_all_outputs(void)
{
  uint8_t data[] = { 3, 0xFF };
    1006:	f8ad 2004 	strh.w	r2, [sp, #4]
  si5351c_write(data, sizeof(data));
    100a:	f7ff ffc7 	bl	f9c <si5351c_write>
}
    100e:	b003      	add	sp, #12
    1010:	bd00      	pop	{pc}
    1012:	bf00      	nop

00001014 <si5351c_disable_oeb_pin_control>:
/* Turn off OEB pin control for all CLKx
   Check also the SI5351C work like expected 
   write/read with different pattern
 */
bool si5351c_disable_oeb_pin_control(void)
{
    1014:	b570      	push	{r4, r5, r6, lr}
    1016:	b082      	sub	sp, #8
  uint8_t data[] = { 9, 0x00 };
  uint8_t val1;

  /* Check Written Data */
  data[1] = 0x55;
    1018:	2355      	movs	r3, #85	; 0x55
   Check also the SI5351C work like expected 
   write/read with different pattern
 */
bool si5351c_disable_oeb_pin_control(void)
{
  uint8_t data[] = { 9, 0x00 };
    101a:	2409      	movs	r4, #9
  uint8_t val1;

  /* Check Written Data */
  data[1] = 0x55;
  si5351c_write(data, sizeof(data));
    101c:	2102      	movs	r1, #2
    101e:	a801      	add	r0, sp, #4
{
  uint8_t data[] = { 9, 0x00 };
  uint8_t val1;

  /* Check Written Data */
  data[1] = 0x55;
    1020:	f88d 3005 	strb.w	r3, [sp, #5]
   Check also the SI5351C work like expected 
   write/read with different pattern
 */
bool si5351c_disable_oeb_pin_control(void)
{
  uint8_t data[] = { 9, 0x00 };
    1024:	f88d 4004 	strb.w	r4, [sp, #4]
  uint8_t val1;

  /* Check Written Data */
  data[1] = 0x55;
  si5351c_write(data, sizeof(data));
    1028:	f7ff ffb8 	bl	f9c <si5351c_write>
  val1 = si5351c_read_single(9);
    102c:	4620      	mov	r0, r4
    102e:	f7ff ff9f 	bl	f70 <si5351c_read_single>
  if(val1 == 0x55)
    1032:	2855      	cmp	r0, #85	; 0x55
    1034:	d002      	beq.n	103c <si5351c_disable_oeb_pin_control+0x28>
    if( (val2 == 0x99) && (val3 == 0xAA) && (val4 == 0xFF) )
    {
      return true;
    }else
    {
      return false;
    1036:	2000      	movs	r0, #0
    }
  }else
  {
    return false;
  }
}
    1038:	b002      	add	sp, #8
    103a:	bd70      	pop	{r4, r5, r6, pc}
  {
    uint8_t val2;
    uint8_t val3;
    uint8_t val4;

    data[1] = 0x99;
    103c:	2299      	movs	r2, #153	; 0x99
    si5351c_write(data, sizeof(data));
    103e:	2102      	movs	r1, #2
    1040:	a801      	add	r0, sp, #4
  {
    uint8_t val2;
    uint8_t val3;
    uint8_t val4;

    data[1] = 0x99;
    1042:	f88d 2005 	strb.w	r2, [sp, #5]
    si5351c_write(data, sizeof(data));
    1046:	f7ff ffa9 	bl	f9c <si5351c_write>
    val2 = si5351c_read_single(9);
    104a:	4620      	mov	r0, r4
    104c:	f7ff ff90 	bl	f70 <si5351c_read_single>

    data[1] = 0xAA;
    1050:	26aa      	movs	r6, #170	; 0xaa
    si5351c_write(data, sizeof(data));
    1052:	2102      	movs	r1, #2
    uint8_t val3;
    uint8_t val4;

    data[1] = 0x99;
    si5351c_write(data, sizeof(data));
    val2 = si5351c_read_single(9);
    1054:	4605      	mov	r5, r0

    data[1] = 0xAA;
    si5351c_write(data, sizeof(data));
    1056:	a801      	add	r0, sp, #4

    data[1] = 0x99;
    si5351c_write(data, sizeof(data));
    val2 = si5351c_read_single(9);

    data[1] = 0xAA;
    1058:	f88d 6005 	strb.w	r6, [sp, #5]
    si5351c_write(data, sizeof(data));
    105c:	f7ff ff9e 	bl	f9c <si5351c_write>
    val3 = si5351c_read_single(9);
    1060:	4620      	mov	r0, r4
    1062:	f7ff ff85 	bl	f70 <si5351c_read_single>

    data[1] = 0xFF;
    1066:	23ff      	movs	r3, #255	; 0xff
    si5351c_write(data, sizeof(data));
    1068:	2102      	movs	r1, #2
    si5351c_write(data, sizeof(data));
    val2 = si5351c_read_single(9);

    data[1] = 0xAA;
    si5351c_write(data, sizeof(data));
    val3 = si5351c_read_single(9);
    106a:	4606      	mov	r6, r0

    data[1] = 0xFF;
    si5351c_write(data, sizeof(data));
    106c:	a801      	add	r0, sp, #4

    data[1] = 0xAA;
    si5351c_write(data, sizeof(data));
    val3 = si5351c_read_single(9);

    data[1] = 0xFF;
    106e:	f88d 3005 	strb.w	r3, [sp, #5]
    si5351c_write(data, sizeof(data));
    1072:	f7ff ff93 	bl	f9c <si5351c_write>
    val4 = si5351c_read_single(9);
    1076:	4620      	mov	r0, r4
    1078:	f7ff ff7a 	bl	f70 <si5351c_read_single>

    if( (val2 == 0x99) && (val3 == 0xAA) && (val4 == 0xFF) )
    107c:	2d99      	cmp	r5, #153	; 0x99
    107e:	d1da      	bne.n	1036 <si5351c_disable_oeb_pin_control+0x22>
    1080:	2eaa      	cmp	r6, #170	; 0xaa
    1082:	d1d8      	bne.n	1036 <si5351c_disable_oeb_pin_control+0x22>
    1084:	f1b0 01ff 	subs.w	r1, r0, #255	; 0xff
    1088:	4248      	negs	r0, r1
    108a:	4148      	adcs	r0, r1
    108c:	e7d4      	b.n	1038 <si5351c_disable_oeb_pin_control+0x24>
    108e:	bf00      	nop

00001090 <si5351c_power_down_all_clocks>:
  }
}

/* Power down all CLKx */
void si5351c_power_down_all_clocks(void)
{
    1090:	b500      	push	{lr}
  uint8_t data[] = { 16
    1092:	f245 0398 	movw	r3, #20632	; 0x5098
    1096:	f2c0 0300 	movt	r3, #0
  }
}

/* Power down all CLKx */
void si5351c_power_down_all_clocks(void)
{
    109a:	b085      	sub	sp, #20
  uint8_t data[] = { 16
    109c:	f853 0f04 	ldr.w	r0, [r3, #4]!
    10a0:	6859      	ldr	r1, [r3, #4]
    10a2:	7a1b      	ldrb	r3, [r3, #8]
    10a4:	aa01      	add	r2, sp, #4
    10a6:	c203      	stmia	r2!, {r0, r1}
  , SI5351C_CLK_POWERDOWN
  , SI5351C_CLK_POWERDOWN
  , SI5351C_CLK_POWERDOWN
  , SI5351C_CLK_POWERDOWN
  };
  si5351c_write(data, sizeof(data));
    10a8:	a801      	add	r0, sp, #4
    10aa:	2109      	movs	r1, #9
}

/* Power down all CLKx */
void si5351c_power_down_all_clocks(void)
{
  uint8_t data[] = { 16
    10ac:	7013      	strb	r3, [r2, #0]
  , SI5351C_CLK_POWERDOWN
  , SI5351C_CLK_POWERDOWN
  , SI5351C_CLK_POWERDOWN
  , SI5351C_CLK_POWERDOWN
  };
  si5351c_write(data, sizeof(data));
    10ae:	f7ff ff75 	bl	f9c <si5351c_write>
}
    10b2:	b005      	add	sp, #20
    10b4:	bd00      	pop	{pc}
    10b6:	bf00      	nop

000010b8 <si5351c_init_fanout>:

void si5351c_init_fanout(void)
{
    10b8:	b500      	push	{lr}
  uint8_t data[] = { 187, 0xc0 };
    10ba:	4b05      	ldr	r3, [pc, #20]	; (10d0 <si5351c_init_fanout+0x18>)
  };
  si5351c_write(data, sizeof(data));
}

void si5351c_init_fanout(void)
{
    10bc:	b083      	sub	sp, #12
  uint8_t data[] = { 187, 0xc0 };
    10be:	881a      	ldrh	r2, [r3, #0]
  si5351c_write(data, sizeof(data));
    10c0:	a801      	add	r0, sp, #4
    10c2:	2102      	movs	r1, #2
  si5351c_write(data, sizeof(data));
}

void si5351c_init_fanout(void)
{
  uint8_t data[] = { 187, 0xc0 };
    10c4:	f8ad 2004 	strh.w	r2, [sp, #4]
  si5351c_write(data, sizeof(data));
    10c8:	f7ff ff68 	bl	f9c <si5351c_write>
}
    10cc:	b003      	add	sp, #12
    10ce:	bd00      	pop	{pc}
    10d0:	000050a8 	.word	0x000050a8

000010d4 <si5351c_init_xtal>:

void si5351c_init_xtal(void)
{
    10d4:	b500      	push	{lr}
  /* Set Crystal Internal CL = 8 pF */
  uint8_t data[] = { 183, 0x92 };
    10d6:	4b05      	ldr	r3, [pc, #20]	; (10ec <si5351c_init_xtal+0x18>)
  uint8_t data[] = { 187, 0xc0 };
  si5351c_write(data, sizeof(data));
}

void si5351c_init_xtal(void)
{
    10d8:	b083      	sub	sp, #12
  /* Set Crystal Internal CL = 8 pF */
  uint8_t data[] = { 183, 0x92 };
    10da:	881a      	ldrh	r2, [r3, #0]
  si5351c_write(data, sizeof(data));
    10dc:	a801      	add	r0, sp, #4
    10de:	2102      	movs	r1, #2
}

void si5351c_init_xtal(void)
{
  /* Set Crystal Internal CL = 8 pF */
  uint8_t data[] = { 183, 0x92 };
    10e0:	f8ad 2004 	strh.w	r2, [sp, #4]
  si5351c_write(data, sizeof(data));
    10e4:	f7ff ff5a 	bl	f9c <si5351c_write>
}
    10e8:	b003      	add	sp, #12
    10ea:	bd00      	pop	{pc}
    10ec:	000050ac 	.word	0x000050ac

000010f0 <si5351c_init_pll_soft_reset>:

void si5351c_init_pll_soft_reset(void)
{
    10f0:	b500      	push	{lr}
    uint8_t data[] = { 177, 0xac };
    10f2:	4b05      	ldr	r3, [pc, #20]	; (1108 <si5351c_init_pll_soft_reset+0x18>)
  uint8_t data[] = { 183, 0x92 };
  si5351c_write(data, sizeof(data));
}

void si5351c_init_pll_soft_reset(void)
{
    10f4:	b083      	sub	sp, #12
    uint8_t data[] = { 177, 0xac };
    10f6:	881a      	ldrh	r2, [r3, #0]
    si5351c_write(data, sizeof(data));
    10f8:	a801      	add	r0, sp, #4
    10fa:	2102      	movs	r1, #2
  si5351c_write(data, sizeof(data));
}

void si5351c_init_pll_soft_reset(void)
{
    uint8_t data[] = { 177, 0xac };
    10fc:	f8ad 2004 	strh.w	r2, [sp, #4]
    si5351c_write(data, sizeof(data));
    1100:	f7ff ff4c 	bl	f9c <si5351c_write>
}
    1104:	b003      	add	sp, #12
    1106:	bd00      	pop	{pc}
    1108:	000050b0 	.word	0x000050b0

0000110c <si5351c_enable_clock_outputs>:

/* Enable CLK outputs 0(R820T) and 7(LPC) only. */
void si5351c_enable_clock_outputs(void)
{
    110c:	b500      	push	{lr}
  uint8_t data[] = { 3, 0x7E };
    110e:	4b05      	ldr	r3, [pc, #20]	; (1124 <si5351c_enable_clock_outputs+0x18>)
    si5351c_write(data, sizeof(data));
}

/* Enable CLK outputs 0(R820T) and 7(LPC) only. */
void si5351c_enable_clock_outputs(void)
{
    1110:	b083      	sub	sp, #12
  uint8_t data[] = { 3, 0x7E };
    1112:	881a      	ldrh	r2, [r3, #0]
  si5351c_write(data, sizeof(data));
    1114:	a801      	add	r0, sp, #4
    1116:	2102      	movs	r1, #2
}

/* Enable CLK outputs 0(R820T) and 7(LPC) only. */
void si5351c_enable_clock_outputs(void)
{
  uint8_t data[] = { 3, 0x7E };
    1118:	f8ad 2004 	strh.w	r2, [sp, #4]
  si5351c_write(data, sizeof(data));
    111c:	f7ff ff3e 	bl	f9c <si5351c_write>
}
    1120:	b003      	add	sp, #12
    1122:	bd00      	pop	{pc}
    1124:	000050b4 	.word	0x000050b4

00001128 <gpio_set>:

#include <libopencm3/lpc43xx/gpio.h>

void gpio_set(uint32_t gpioport, uint32_t gpios)
{
	GPIO_SET(gpioport) = gpios;
    1128:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    112c:	4770      	bx	lr
    112e:	bf00      	nop

00001130 <gpio_clear>:
}

void gpio_clear(uint32_t gpioport, uint32_t gpios)
{
	GPIO_CLR(gpioport) = gpios;
    1130:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    1134:	4770      	bx	lr
    1136:	bf00      	nop

00001138 <scu_pinmux>:
/* For pin_conf_normal value see scu.h define SCU_CONF_XXX or Configuration for
 * different I/O pins types
 */
void scu_pinmux(scu_grp_pin_t group_pin, uint32_t scu_conf)
{
	MMIO32(group_pin) = scu_conf;
    1138:	6001      	str	r1, [r0, #0]
    113a:	4770      	bx	lr

0000113c <i2c0_init>:
#define I2C_TIMEOUT (10000)

#define SFSP_I2C1_SDA_SCL (0x00000001 | SCU_CONF_ZIF_DIS_IN_GLITCH_FILT | SCU_CONF_EZI_EN_IN_BUFFER)

void i2c0_init(const uint16_t duty_cycle_count)
{
    113c:	b470      	push	{r4, r5, r6}
  /* enable input on SCL and SDA pins */
  SCU_SFSI2C0 = SCU_I2C0_NOMINAL;

  I2C0_SCLH = duty_cycle_count;
  I2C0_SCLL = duty_cycle_count;
    113e:	f241 0114 	movw	r1, #4116	; 0x1014
#define SFSP_I2C1_SDA_SCL (0x00000001 | SCU_CONF_ZIF_DIS_IN_GLITCH_FILT | SCU_CONF_EZI_EN_IN_BUFFER)

void i2c0_init(const uint16_t duty_cycle_count)
{
  /* enable input on SCL and SDA pins */
  SCU_SFSI2C0 = SCU_I2C0_NOMINAL;
    1142:	f646 4584 	movw	r5, #27780	; 0x6c84

  I2C0_SCLH = duty_cycle_count;
    1146:	f241 0410 	movw	r4, #4112	; 0x1010
  I2C0_SCLL = duty_cycle_count;
    114a:	f2c4 010a 	movt	r1, #16394	; 0x400a

  /* clear the control bits */
  I2C0_CONCLR = (I2C_CONCLR_AAC | I2C_CONCLR_SIC
    114e:	f241 0218 	movw	r2, #4120	; 0x1018
      | I2C_CONCLR_STAC | I2C_CONCLR_I2ENC);

  /* enable I2C0 */
  I2C0_CONSET = I2C_CONSET_I2EN;
    1152:	f44f 5380 	mov.w	r3, #4096	; 0x1000
#define SFSP_I2C1_SDA_SCL (0x00000001 | SCU_CONF_ZIF_DIS_IN_GLITCH_FILT | SCU_CONF_EZI_EN_IN_BUFFER)

void i2c0_init(const uint16_t duty_cycle_count)
{
  /* enable input on SCL and SDA pins */
  SCU_SFSI2C0 = SCU_I2C0_NOMINAL;
    1156:	f2c4 0508 	movt	r5, #16392	; 0x4008

  I2C0_SCLH = duty_cycle_count;
    115a:	f2c4 040a 	movt	r4, #16394	; 0x400a
  I2C0_SCLL = duty_cycle_count;

  /* clear the control bits */
  I2C0_CONCLR = (I2C_CONCLR_AAC | I2C_CONCLR_SIC
    115e:	f2c4 020a 	movt	r2, #16394	; 0x400a
      | I2C_CONCLR_STAC | I2C_CONCLR_I2ENC);

  /* enable I2C0 */
  I2C0_CONSET = I2C_CONSET_I2EN;
    1162:	f2c4 030a 	movt	r3, #16394	; 0x400a
#define SFSP_I2C1_SDA_SCL (0x00000001 | SCU_CONF_ZIF_DIS_IN_GLITCH_FILT | SCU_CONF_EZI_EN_IN_BUFFER)

void i2c0_init(const uint16_t duty_cycle_count)
{
  /* enable input on SCL and SDA pins */
  SCU_SFSI2C0 = SCU_I2C0_NOMINAL;
    1166:	f640 0608 	movw	r6, #2056	; 0x808
    116a:	602e      	str	r6, [r5, #0]

  I2C0_SCLH = duty_cycle_count;
    116c:	6020      	str	r0, [r4, #0]
  I2C0_SCLL = duty_cycle_count;
    116e:	6008      	str	r0, [r1, #0]

  /* clear the control bits */
  I2C0_CONCLR = (I2C_CONCLR_AAC | I2C_CONCLR_SIC
    1170:	206c      	movs	r0, #108	; 0x6c
      | I2C_CONCLR_STAC | I2C_CONCLR_I2ENC);

  /* enable I2C0 */
  I2C0_CONSET = I2C_CONSET_I2EN;
    1172:	2140      	movs	r1, #64	; 0x40

  I2C0_SCLH = duty_cycle_count;
  I2C0_SCLL = duty_cycle_count;

  /* clear the control bits */
  I2C0_CONCLR = (I2C_CONCLR_AAC | I2C_CONCLR_SIC
    1174:	6010      	str	r0, [r2, #0]
      | I2C_CONCLR_STAC | I2C_CONCLR_I2ENC);

  /* enable I2C0 */
  I2C0_CONSET = I2C_CONSET_I2EN;
    1176:	6019      	str	r1, [r3, #0]
}
    1178:	bc70      	pop	{r4, r5, r6}
    117a:	4770      	bx	lr

0000117c <i2c1_init>:

void i2c1_init(const uint16_t duty_cycle_count)
{
    117c:	b4f0      	push	{r4, r5, r6, r7}
  /* Configure pin function for I2C1*/
  SCU_SFSP2_3 = SFSP_I2C1_SDA_SCL;
  SCU_SFSP2_4 = SFSP_I2C1_SDA_SCL;

  I2C1_SCLH = duty_cycle_count;
  I2C1_SCLL = duty_cycle_count;
    117e:	2114      	movs	r1, #20
}

void i2c1_init(const uint16_t duty_cycle_count)
{
  /* Configure pin function for I2C1*/
  SCU_SFSP2_3 = SFSP_I2C1_SDA_SCL;
    1180:	f246 160c 	movw	r6, #24844	; 0x610c
  SCU_SFSP2_4 = SFSP_I2C1_SDA_SCL;
    1184:	f246 1510 	movw	r5, #24848	; 0x6110

  I2C1_SCLH = duty_cycle_count;
    1188:	2410      	movs	r4, #16
  I2C1_SCLL = duty_cycle_count;
    118a:	f2c4 010e 	movt	r1, #16398	; 0x400e

  /* clear the control bits */
  I2C1_CONCLR = (I2C_CONCLR_AAC | I2C_CONCLR_SIC
    118e:	2218      	movs	r2, #24
      | I2C_CONCLR_STAC | I2C_CONCLR_I2ENC);

  /* enable I2C1 */
  I2C1_CONSET = I2C_CONSET_I2EN;
    1190:	2300      	movs	r3, #0
}

void i2c1_init(const uint16_t duty_cycle_count)
{
  /* Configure pin function for I2C1*/
  SCU_SFSP2_3 = SFSP_I2C1_SDA_SCL;
    1192:	f2c4 0608 	movt	r6, #16392	; 0x4008
  SCU_SFSP2_4 = SFSP_I2C1_SDA_SCL;
    1196:	f2c4 0508 	movt	r5, #16392	; 0x4008

  I2C1_SCLH = duty_cycle_count;
    119a:	f2c4 040e 	movt	r4, #16398	; 0x400e
}

void i2c1_init(const uint16_t duty_cycle_count)
{
  /* Configure pin function for I2C1*/
  SCU_SFSP2_3 = SFSP_I2C1_SDA_SCL;
    119e:	27c1      	movs	r7, #193	; 0xc1

  I2C1_SCLH = duty_cycle_count;
  I2C1_SCLL = duty_cycle_count;

  /* clear the control bits */
  I2C1_CONCLR = (I2C_CONCLR_AAC | I2C_CONCLR_SIC
    11a0:	f2c4 020e 	movt	r2, #16398	; 0x400e
      | I2C_CONCLR_STAC | I2C_CONCLR_I2ENC);

  /* enable I2C1 */
  I2C1_CONSET = I2C_CONSET_I2EN;
    11a4:	f2c4 030e 	movt	r3, #16398	; 0x400e
}

void i2c1_init(const uint16_t duty_cycle_count)
{
  /* Configure pin function for I2C1*/
  SCU_SFSP2_3 = SFSP_I2C1_SDA_SCL;
    11a8:	6037      	str	r7, [r6, #0]
  SCU_SFSP2_4 = SFSP_I2C1_SDA_SCL;
    11aa:	602f      	str	r7, [r5, #0]

  I2C1_SCLH = duty_cycle_count;
    11ac:	6020      	str	r0, [r4, #0]
  I2C1_SCLL = duty_cycle_count;
    11ae:	6008      	str	r0, [r1, #0]

  /* clear the control bits */
  I2C1_CONCLR = (I2C_CONCLR_AAC | I2C_CONCLR_SIC
    11b0:	206c      	movs	r0, #108	; 0x6c
      | I2C_CONCLR_STAC | I2C_CONCLR_I2ENC);

  /* enable I2C1 */
  I2C1_CONSET = I2C_CONSET_I2EN;
    11b2:	2140      	movs	r1, #64	; 0x40

  I2C1_SCLH = duty_cycle_count;
  I2C1_SCLL = duty_cycle_count;

  /* clear the control bits */
  I2C1_CONCLR = (I2C_CONCLR_AAC | I2C_CONCLR_SIC
    11b4:	6010      	str	r0, [r2, #0]
      | I2C_CONCLR_STAC | I2C_CONCLR_I2ENC);

  /* enable I2C1 */
  I2C1_CONSET = I2C_CONSET_I2EN;
    11b6:	6019      	str	r1, [r3, #0]
}
    11b8:	bcf0      	pop	{r4, r5, r6, r7}
    11ba:	4770      	bx	lr

000011bc <i2c0_tx_start>:
/* transmit start bit */
void i2c0_tx_start(void)
{
  uint32_t timeout;

  I2C0_CONCLR = I2C_CONCLR_SIC;
    11bc:	f241 0318 	movw	r3, #4120	; 0x1018
  I2C0_CONSET = I2C_CONSET_STA;
    11c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    11c4:	f2c4 020a 	movt	r2, #16394	; 0x400a
/* transmit start bit */
void i2c0_tx_start(void)
{
  uint32_t timeout;

  I2C0_CONCLR = I2C_CONCLR_SIC;
    11c8:	f2c4 030a 	movt	r3, #16394	; 0x400a
    11cc:	2108      	movs	r1, #8
  I2C0_CONSET = I2C_CONSET_STA;
    11ce:	2020      	movs	r0, #32
/* transmit start bit */
void i2c0_tx_start(void)
{
  uint32_t timeout;

  I2C0_CONCLR = I2C_CONCLR_SIC;
    11d0:	6019      	str	r1, [r3, #0]
  I2C0_CONSET = I2C_CONSET_STA;
    11d2:	6010      	str	r0, [r2, #0]

  timeout = 0;
  while( (!(I2C0_CONSET & I2C_CONSET_SI)) && (timeout < I2C_TIMEOUT) )
    11d4:	6813      	ldr	r3, [r2, #0]
    11d6:	0718      	lsls	r0, r3, #28
    11d8:	d40d      	bmi.n	11f6 <i2c0_tx_start+0x3a>
    11da:	f242 7010 	movw	r0, #10000	; 0x2710
    11de:	e004      	b.n	11ea <i2c0_tx_start+0x2e>
    11e0:	6813      	ldr	r3, [r2, #0]
    11e2:	0719      	lsls	r1, r3, #28
    11e4:	d407      	bmi.n	11f6 <i2c0_tx_start+0x3a>
    11e6:	3801      	subs	r0, #1
    11e8:	d005      	beq.n	11f6 <i2c0_tx_start+0x3a>
    11ea:	6811      	ldr	r1, [r2, #0]
    11ec:	f011 0f08 	tst.w	r1, #8
    11f0:	f100 30ff 	add.w	r0, r0, #4294967295
    11f4:	d0f4      	beq.n	11e0 <i2c0_tx_start+0x24>
  {
    timeout++;
  }

  I2C0_CONCLR = I2C_CONCLR_STAC;
    11f6:	f241 0118 	movw	r1, #4120	; 0x1018
    11fa:	f2c4 010a 	movt	r1, #16394	; 0x400a
    11fe:	2220      	movs	r2, #32
    1200:	600a      	str	r2, [r1, #0]
    1202:	4770      	bx	lr

00001204 <i2c0_tx_byte>:
/* transmit data byte */
void i2c0_tx_byte(uint8_t byte)
{
  uint32_t timeout;

  if (I2C0_CONSET & I2C_CONSET_STA)
    1204:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1208:	f2c4 030a 	movt	r3, #16394	; 0x400a
    120c:	6819      	ldr	r1, [r3, #0]
    120e:	068b      	lsls	r3, r1, #26
    1210:	d505      	bpl.n	121e <i2c0_tx_byte+0x1a>
  {
    I2C0_CONCLR = I2C_CONCLR_STAC;
    1212:	f241 0318 	movw	r3, #4120	; 0x1018
    1216:	f2c4 030a 	movt	r3, #16394	; 0x400a
    121a:	2220      	movs	r2, #32
    121c:	601a      	str	r2, [r3, #0]
  }
  I2C0_DAT = byte;
    121e:	f241 0108 	movw	r1, #4104	; 0x1008
    1222:	f2c4 010a 	movt	r1, #16394	; 0x400a
  I2C0_CONCLR = I2C_CONCLR_SIC;
    1226:	f241 0318 	movw	r3, #4120	; 0x1018
    122a:	f2c4 030a 	movt	r3, #16394	; 0x400a

  timeout = 0;
  while( (!(I2C0_CONSET & I2C_CONSET_SI)) && (timeout < I2C_TIMEOUT) )
    122e:	f44f 5280 	mov.w	r2, #4096	; 0x1000

  if (I2C0_CONSET & I2C_CONSET_STA)
  {
    I2C0_CONCLR = I2C_CONCLR_STAC;
  }
  I2C0_DAT = byte;
    1232:	6008      	str	r0, [r1, #0]
  I2C0_CONCLR = I2C_CONCLR_SIC;

  timeout = 0;
  while( (!(I2C0_CONSET & I2C_CONSET_SI)) && (timeout < I2C_TIMEOUT) )
    1234:	f2c4 020a 	movt	r2, #16394	; 0x400a
  if (I2C0_CONSET & I2C_CONSET_STA)
  {
    I2C0_CONCLR = I2C_CONCLR_STAC;
  }
  I2C0_DAT = byte;
  I2C0_CONCLR = I2C_CONCLR_SIC;
    1238:	2008      	movs	r0, #8
    123a:	6018      	str	r0, [r3, #0]

  timeout = 0;
  while( (!(I2C0_CONSET & I2C_CONSET_SI)) && (timeout < I2C_TIMEOUT) )
    123c:	6811      	ldr	r1, [r2, #0]
    123e:	0708      	lsls	r0, r1, #28
    1240:	d40d      	bmi.n	125e <i2c0_tx_byte+0x5a>
    1242:	f242 7310 	movw	r3, #10000	; 0x2710
    1246:	e004      	b.n	1252 <i2c0_tx_byte+0x4e>
    1248:	6811      	ldr	r1, [r2, #0]
    124a:	0709      	lsls	r1, r1, #28
    124c:	d407      	bmi.n	125e <i2c0_tx_byte+0x5a>
    124e:	3b01      	subs	r3, #1
    1250:	d006      	beq.n	1260 <i2c0_tx_byte+0x5c>
    1252:	6810      	ldr	r0, [r2, #0]
    1254:	f010 0f08 	tst.w	r0, #8
    1258:	f103 33ff 	add.w	r3, r3, #4294967295
    125c:	d0f4      	beq.n	1248 <i2c0_tx_byte+0x44>
    125e:	4770      	bx	lr
    1260:	4770      	bx	lr
    1262:	bf00      	nop

00001264 <i2c0_rx_byte>:
/* receive data byte */
uint8_t i2c0_rx_byte(void)
{
  uint32_t timeout;

  if (I2C0_CONSET & I2C_CONSET_STA)
    1264:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1268:	f2c4 030a 	movt	r3, #16394	; 0x400a
    126c:	6818      	ldr	r0, [r3, #0]
    126e:	0683      	lsls	r3, r0, #26
    1270:	d505      	bpl.n	127e <i2c0_rx_byte+0x1a>
  {
    I2C0_CONCLR = I2C_CONCLR_STAC;
    1272:	f241 0118 	movw	r1, #4120	; 0x1018
    1276:	f2c4 010a 	movt	r1, #16394	; 0x400a
    127a:	2220      	movs	r2, #32
    127c:	600a      	str	r2, [r1, #0]
  }
  I2C0_CONCLR = I2C_CONCLR_SIC;
    127e:	f241 0318 	movw	r3, #4120	; 0x1018
    1282:	f2c4 030a 	movt	r3, #16394	; 0x400a

  timeout = 0;
  while( (!(I2C0_CONSET & I2C_CONSET_SI)) && (timeout < I2C_TIMEOUT) )
    1286:	f44f 5280 	mov.w	r2, #4096	; 0x1000

  if (I2C0_CONSET & I2C_CONSET_STA)
  {
    I2C0_CONCLR = I2C_CONCLR_STAC;
  }
  I2C0_CONCLR = I2C_CONCLR_SIC;
    128a:	2008      	movs	r0, #8

  timeout = 0;
  while( (!(I2C0_CONSET & I2C_CONSET_SI)) && (timeout < I2C_TIMEOUT) )
    128c:	f2c4 020a 	movt	r2, #16394	; 0x400a

  if (I2C0_CONSET & I2C_CONSET_STA)
  {
    I2C0_CONCLR = I2C_CONCLR_STAC;
  }
  I2C0_CONCLR = I2C_CONCLR_SIC;
    1290:	6018      	str	r0, [r3, #0]

  timeout = 0;
  while( (!(I2C0_CONSET & I2C_CONSET_SI)) && (timeout < I2C_TIMEOUT) )
    1292:	6811      	ldr	r1, [r2, #0]
    1294:	0708      	lsls	r0, r1, #28
    1296:	d40d      	bmi.n	12b4 <i2c0_rx_byte+0x50>
    1298:	f242 7310 	movw	r3, #10000	; 0x2710
    129c:	e004      	b.n	12a8 <i2c0_rx_byte+0x44>
    129e:	6811      	ldr	r1, [r2, #0]
    12a0:	0709      	lsls	r1, r1, #28
    12a2:	d407      	bmi.n	12b4 <i2c0_rx_byte+0x50>
    12a4:	3b01      	subs	r3, #1
    12a6:	d005      	beq.n	12b4 <i2c0_rx_byte+0x50>
    12a8:	6810      	ldr	r0, [r2, #0]
    12aa:	f010 0f08 	tst.w	r0, #8
    12ae:	f103 33ff 	add.w	r3, r3, #4294967295
    12b2:	d0f4      	beq.n	129e <i2c0_rx_byte+0x3a>
  {
    timeout++;
  }

  return I2C0_DAT;
    12b4:	f241 0208 	movw	r2, #4104	; 0x1008
    12b8:	f2c4 020a 	movt	r2, #16394	; 0x400a
    12bc:	6810      	ldr	r0, [r2, #0]
}
    12be:	b2c0      	uxtb	r0, r0
    12c0:	4770      	bx	lr
    12c2:	bf00      	nop

000012c4 <i2c0_stop>:
}

/* transmit stop bit */
void i2c0_stop(void)
{
  if (I2C0_CONSET & I2C_CONSET_STA) {
    12c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    12c8:	f2c4 030a 	movt	r3, #16394	; 0x400a
    12cc:	6818      	ldr	r0, [r3, #0]
    12ce:	0682      	lsls	r2, r0, #26
    12d0:	d505      	bpl.n	12de <i2c0_stop+0x1a>
    I2C0_CONCLR = I2C_CONCLR_STAC;
    12d2:	f241 0118 	movw	r1, #4120	; 0x1018
    12d6:	f2c4 010a 	movt	r1, #16394	; 0x400a
    12da:	2220      	movs	r2, #32
    12dc:	600a      	str	r2, [r1, #0]
  }
  I2C0_CONSET = I2C_CONSET_STO;
    12de:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  I2C0_CONCLR = I2C_CONCLR_SIC;
    12e2:	f241 0318 	movw	r3, #4120	; 0x1018
void i2c0_stop(void)
{
  if (I2C0_CONSET & I2C_CONSET_STA) {
    I2C0_CONCLR = I2C_CONCLR_STAC;
  }
  I2C0_CONSET = I2C_CONSET_STO;
    12e6:	f2c4 000a 	movt	r0, #16394	; 0x400a
  I2C0_CONCLR = I2C_CONCLR_SIC;
    12ea:	f2c4 030a 	movt	r3, #16394	; 0x400a
void i2c0_stop(void)
{
  if (I2C0_CONSET & I2C_CONSET_STA) {
    I2C0_CONCLR = I2C_CONCLR_STAC;
  }
  I2C0_CONSET = I2C_CONSET_STO;
    12ee:	2110      	movs	r1, #16
  I2C0_CONCLR = I2C_CONCLR_SIC;
    12f0:	2208      	movs	r2, #8
void i2c0_stop(void)
{
  if (I2C0_CONSET & I2C_CONSET_STA) {
    I2C0_CONCLR = I2C_CONCLR_STAC;
  }
  I2C0_CONSET = I2C_CONSET_STO;
    12f2:	6001      	str	r1, [r0, #0]
  I2C0_CONCLR = I2C_CONCLR_SIC;
    12f4:	601a      	str	r2, [r3, #0]
    12f6:	4770      	bx	lr

000012f8 <ipc_halt_m0>:
void ipc_halt_m0(void)
{
	volatile uint32_t rst_active_status1;

	/* Check if M0 is reset by reading status */
	rst_active_status1 = RESET_ACTIVE_STATUS1;
    12f8:	f243 1154 	movw	r1, #12628	; 0x3154
    12fc:	f2c4 0105 	movt	r1, #16389	; 0x4005
#include <libopencm3/lpc43xx/creg.h>
#include <libopencm3/lpc43xx/rgu.h>

/* Set M0 in reset mode */
void ipc_halt_m0(void)
{
    1300:	b082      	sub	sp, #8
	volatile uint32_t rst_active_status1;

	/* Check if M0 is reset by reading status */
	rst_active_status1 = RESET_ACTIVE_STATUS1;
    1302:	680b      	ldr	r3, [r1, #0]
    1304:	9301      	str	r3, [sp, #4]

	/* If the M0 has reset not asserted, halt it... */
	while (rst_active_status1 & RESET_CTRL1_M0APP_RST) {
    1306:	9801      	ldr	r0, [sp, #4]
    1308:	01c2      	lsls	r2, r0, #7
    130a:	d50d      	bpl.n	1328 <ipc_halt_m0+0x30>
		RESET_CTRL1 = ((~rst_active_status1) | RESET_CTRL1_M0APP_RST);
    130c:	f243 1204 	movw	r2, #12548	; 0x3104
    1310:	f2c4 0205 	movt	r2, #16389	; 0x4005
    1314:	9b01      	ldr	r3, [sp, #4]
    1316:	43d8      	mvns	r0, r3
    1318:	f040 7380 	orr.w	r3, r0, #16777216	; 0x1000000
    131c:	6013      	str	r3, [r2, #0]
		rst_active_status1 = RESET_ACTIVE_STATUS1;
    131e:	6808      	ldr	r0, [r1, #0]
    1320:	9001      	str	r0, [sp, #4]

	/* Check if M0 is reset by reading status */
	rst_active_status1 = RESET_ACTIVE_STATUS1;

	/* If the M0 has reset not asserted, halt it... */
	while (rst_active_status1 & RESET_CTRL1_M0APP_RST) {
    1322:	9b01      	ldr	r3, [sp, #4]
    1324:	01db      	lsls	r3, r3, #7
    1326:	d4f5      	bmi.n	1314 <ipc_halt_m0+0x1c>
		RESET_CTRL1 = ((~rst_active_status1) | RESET_CTRL1_M0APP_RST);
		rst_active_status1 = RESET_ACTIVE_STATUS1;
	}
}
    1328:	b002      	add	sp, #8
    132a:	4770      	bx	lr

0000132c <ipc_start_m0>:
void ipc_start_m0(uint32_t cm0_baseaddr)
{
	volatile uint32_t rst_active_status1;

	/* Set M0 memory mapping to point to start of M0 image */
	CREG_M0APPMEMMAP = cm0_baseaddr;
    132c:	f243 4304 	movw	r3, #13316	; 0x3404
    1330:	f2c4 0304 	movt	r3, #16388	; 0x4004

	/* Start/run M0 core */

	/* Release Slave from reset, first read status */
	rst_active_status1 = RESET_ACTIVE_STATUS1;
    1334:	f243 1154 	movw	r1, #12628	; 0x3154
    1338:	f2c4 0105 	movt	r1, #16389	; 0x4005
void ipc_start_m0(uint32_t cm0_baseaddr)
{
	volatile uint32_t rst_active_status1;

	/* Set M0 memory mapping to point to start of M0 image */
	CREG_M0APPMEMMAP = cm0_baseaddr;
    133c:	6018      	str	r0, [r3, #0]
	}
}

/* Start M0 */
void ipc_start_m0(uint32_t cm0_baseaddr)
{
    133e:	b082      	sub	sp, #8
	CREG_M0APPMEMMAP = cm0_baseaddr;

	/* Start/run M0 core */

	/* Release Slave from reset, first read status */
	rst_active_status1 = RESET_ACTIVE_STATUS1;
    1340:	6808      	ldr	r0, [r1, #0]
    1342:	9001      	str	r0, [sp, #4]

	/* If the M0 is being held in reset, release it */
	/* 1 = no reset, 0 = reset */
	while (!(rst_active_status1 & RESET_CTRL1_M0APP_RST)) {
    1344:	9a01      	ldr	r2, [sp, #4]
    1346:	01d3      	lsls	r3, r2, #7
    1348:	d40d      	bmi.n	1366 <ipc_start_m0+0x3a>
		RESET_CTRL1 = ((~rst_active_status1) & ~RESET_CTRL1_M0APP_RST);
    134a:	f243 1204 	movw	r2, #12548	; 0x3104
    134e:	f2c4 0205 	movt	r2, #16389	; 0x4005
    1352:	9b01      	ldr	r3, [sp, #4]
    1354:	43d8      	mvns	r0, r3
    1356:	f020 7380 	bic.w	r3, r0, #16777216	; 0x1000000
    135a:	6013      	str	r3, [r2, #0]
		rst_active_status1 = RESET_ACTIVE_STATUS1;
    135c:	6808      	ldr	r0, [r1, #0]
    135e:	9001      	str	r0, [sp, #4]
	/* Release Slave from reset, first read status */
	rst_active_status1 = RESET_ACTIVE_STATUS1;

	/* If the M0 is being held in reset, release it */
	/* 1 = no reset, 0 = reset */
	while (!(rst_active_status1 & RESET_CTRL1_M0APP_RST)) {
    1360:	9b01      	ldr	r3, [sp, #4]
    1362:	01d8      	lsls	r0, r3, #7
    1364:	d5f5      	bpl.n	1352 <ipc_start_m0+0x26>
		RESET_CTRL1 = ((~rst_active_status1) & ~RESET_CTRL1_M0APP_RST);
		rst_active_status1 = RESET_ACTIVE_STATUS1;
	}
}
    1366:	b002      	add	sp, #8
    1368:	4770      	bx	lr
    136a:	bf00      	nop

0000136c <ipc_halt_m0s>:
void ipc_halt_m0s(void)
{
	volatile uint32_t rst_active_status0;

	/* Check if M0s is reset by reading status */
	rst_active_status0 = RESET_ACTIVE_STATUS0;
    136c:	f243 1150 	movw	r1, #12624	; 0x3150
    1370:	f2c4 0105 	movt	r1, #16389	; 0x4005
	CREG_M0TXEVENT &= ~CREG_M0TXEVENT_TXEVCLR;
}

/* Set M0s in reset mode (only for LPC4370) */
void ipc_halt_m0s(void)
{
    1374:	b082      	sub	sp, #8
	volatile uint32_t rst_active_status0;

	/* Check if M0s is reset by reading status */
	rst_active_status0 = RESET_ACTIVE_STATUS0;
    1376:	680b      	ldr	r3, [r1, #0]
    1378:	9301      	str	r3, [sp, #4]

	/* If the M0s has reset not asserted, halt it... */
	while (rst_active_status0 & RESET_CTRL0_M0_SUB_RST) {
    137a:	9801      	ldr	r0, [sp, #4]
    137c:	04c3      	lsls	r3, r0, #19
    137e:	d50d      	bpl.n	139c <ipc_halt_m0s+0x30>
		RESET_CTRL0 = ((~rst_active_status0) | RESET_CTRL0_M0_SUB_RST);
    1380:	f44f 5244 	mov.w	r2, #12544	; 0x3100
    1384:	f2c4 0205 	movt	r2, #16389	; 0x4005
    1388:	9b01      	ldr	r3, [sp, #4]
    138a:	43d8      	mvns	r0, r3
    138c:	f440 5380 	orr.w	r3, r0, #4096	; 0x1000
    1390:	6013      	str	r3, [r2, #0]
		rst_active_status0 = RESET_ACTIVE_STATUS0;
    1392:	6808      	ldr	r0, [r1, #0]
    1394:	9001      	str	r0, [sp, #4]

	/* Check if M0s is reset by reading status */
	rst_active_status0 = RESET_ACTIVE_STATUS0;

	/* If the M0s has reset not asserted, halt it... */
	while (rst_active_status0 & RESET_CTRL0_M0_SUB_RST) {
    1396:	9b01      	ldr	r3, [sp, #4]
    1398:	04d8      	lsls	r0, r3, #19
    139a:	d4f5      	bmi.n	1388 <ipc_halt_m0s+0x1c>
		RESET_CTRL0 = ((~rst_active_status0) | RESET_CTRL0_M0_SUB_RST);
		rst_active_status0 = RESET_ACTIVE_STATUS0;
	}
}
    139c:	b002      	add	sp, #8
    139e:	4770      	bx	lr

000013a0 <blocking_handler>:
	}

}

void blocking_handler(void)
{
    13a0:	e7fe      	b.n	13a0 <blocking_handler>
    13a2:	bf00      	nop

000013a4 <null_handler>:
	while (1);
}

void null_handler(void)
{
    13a4:	4770      	bx	lr
    13a6:	bf00      	nop

000013a8 <reset_handler>:
void WEAK __attribute__ ((naked)) reset_handler(void)
{
	volatile unsigned *src, *dest;
	funcp_t *fp;

	for (src = &_data_loadaddr, dest = &_data;
    13a8:	4997      	ldr	r1, [pc, #604]	; (1608 <reset_handler+0x260>)
    13aa:	4a98      	ldr	r2, [pc, #608]	; (160c <reset_handler+0x264>)
    13ac:	4291      	cmp	r1, r2
    13ae:	f080 8128 	bcs.w	1602 <reset_handler+0x25a>
	.irq = {
		IRQ_HANDLERS
	}
};

void WEAK __attribute__ ((naked)) reset_handler(void)
    13b2:	1cd5      	adds	r5, r2, #3
    13b4:	1d0b      	adds	r3, r1, #4
{
	volatile unsigned *src, *dest;
	funcp_t *fp;

	for (src = &_data_loadaddr, dest = &_data;
    13b6:	4896      	ldr	r0, [pc, #600]	; (1610 <reset_handler+0x268>)
	.irq = {
		IRQ_HANDLERS
	}
};

void WEAK __attribute__ ((naked)) reset_handler(void)
    13b8:	1aec      	subs	r4, r5, r3
    13ba:	f024 0703 	bic.w	r7, r4, #3
	funcp_t *fp;

	for (src = &_data_loadaddr, dest = &_data;
		dest < &_edata;
		src++, dest++) {
		*dest = *src;
    13be:	4602      	mov	r2, r0
	.irq = {
		IRQ_HANDLERS
	}
};

void WEAK __attribute__ ((naked)) reset_handler(void)
    13c0:	1d3d      	adds	r5, r7, #4
	funcp_t *fp;

	for (src = &_data_loadaddr, dest = &_data;
		dest < &_edata;
		src++, dest++) {
		*dest = *src;
    13c2:	f852 6b04 	ldr.w	r6, [r2], #4
    13c6:	463c      	mov	r4, r7
    13c8:	186f      	adds	r7, r5, r1
void WEAK __attribute__ ((naked)) reset_handler(void)
{
	volatile unsigned *src, *dest;
	funcp_t *fp;

	for (src = &_data_loadaddr, dest = &_data;
    13ca:	42bb      	cmp	r3, r7
		dest < &_edata;
		src++, dest++) {
		*dest = *src;
    13cc:	600e      	str	r6, [r1, #0]
    13ce:	f3c4 0680 	ubfx	r6, r4, #2, #1
void WEAK __attribute__ ((naked)) reset_handler(void)
{
	volatile unsigned *src, *dest;
	funcp_t *fp;

	for (src = &_data_loadaddr, dest = &_data;
    13d2:	d014      	beq.n	13fe <reset_handler+0x56>
    13d4:	b13e      	cbz	r6, 13e6 <reset_handler+0x3e>
		dest < &_edata;
		src++, dest++) {
		*dest = *src;
    13d6:	6812      	ldr	r2, [r2, #0]
    13d8:	601a      	str	r2, [r3, #0]
	volatile unsigned *src, *dest;
	funcp_t *fp;

	for (src = &_data_loadaddr, dest = &_data;
		dest < &_edata;
		src++, dest++) {
    13da:	f101 0308 	add.w	r3, r1, #8
void WEAK __attribute__ ((naked)) reset_handler(void)
{
	volatile unsigned *src, *dest;
	funcp_t *fp;

	for (src = &_data_loadaddr, dest = &_data;
    13de:	42bb      	cmp	r3, r7
		dest < &_edata;
		src++, dest++) {
    13e0:	f100 0208 	add.w	r2, r0, #8
void WEAK __attribute__ ((naked)) reset_handler(void)
{
	volatile unsigned *src, *dest;
	funcp_t *fp;

	for (src = &_data_loadaddr, dest = &_data;
    13e4:	d00b      	beq.n	13fe <reset_handler+0x56>
		dest < &_edata;
		src++, dest++) {
		*dest = *src;
    13e6:	4611      	mov	r1, r2
    13e8:	4618      	mov	r0, r3
    13ea:	f851 4b04 	ldr.w	r4, [r1], #4
    13ee:	f840 4b04 	str.w	r4, [r0], #4
    13f2:	6855      	ldr	r5, [r2, #4]
    13f4:	605d      	str	r5, [r3, #4]
	volatile unsigned *src, *dest;
	funcp_t *fp;

	for (src = &_data_loadaddr, dest = &_data;
		dest < &_edata;
		src++, dest++) {
    13f6:	1d03      	adds	r3, r0, #4
    13f8:	1d0a      	adds	r2, r1, #4
void WEAK __attribute__ ((naked)) reset_handler(void)
{
	volatile unsigned *src, *dest;
	funcp_t *fp;

	for (src = &_data_loadaddr, dest = &_data;
    13fa:	42bb      	cmp	r3, r7
    13fc:	d1f3      	bne.n	13e6 <reset_handler+0x3e>
		dest < &_edata;
		src++, dest++) {
		*dest = *src;
	}

	while (dest < &_ebss) {
    13fe:	4f85      	ldr	r7, [pc, #532]	; (1614 <reset_handler+0x26c>)
    1400:	42bb      	cmp	r3, r7
    1402:	d216      	bcs.n	1432 <reset_handler+0x8a>
	.irq = {
		IRQ_HANDLERS
	}
};

void WEAK __attribute__ ((naked)) reset_handler(void)
    1404:	1cfe      	adds	r6, r7, #3
    1406:	1d1a      	adds	r2, r3, #4
    1408:	1ab1      	subs	r1, r6, r2
    140a:	f021 0003 	bic.w	r0, r1, #3
    140e:	1d04      	adds	r4, r0, #4
    1410:	191d      	adds	r5, r3, r4
    1412:	1aaf      	subs	r7, r5, r2
		src++, dest++) {
		*dest = *src;
	}

	while (dest < &_ebss) {
		*dest++ = 0;
    1414:	2600      	movs	r6, #0
    1416:	077c      	lsls	r4, r7, #29
    1418:	d508      	bpl.n	142c <reset_handler+0x84>
    141a:	601e      	str	r6, [r3, #0]
    141c:	4613      	mov	r3, r2
    141e:	3204      	adds	r2, #4
		dest < &_edata;
		src++, dest++) {
		*dest = *src;
	}

	while (dest < &_ebss) {
    1420:	42aa      	cmp	r2, r5
		*dest++ = 0;
    1422:	601e      	str	r6, [r3, #0]
		dest < &_edata;
		src++, dest++) {
		*dest = *src;
	}

	while (dest < &_ebss) {
    1424:	d005      	beq.n	1432 <reset_handler+0x8a>
		*dest++ = 0;
    1426:	1d13      	adds	r3, r2, #4
    1428:	6016      	str	r6, [r2, #0]
    142a:	1d1a      	adds	r2, r3, #4
		dest < &_edata;
		src++, dest++) {
		*dest = *src;
	}

	while (dest < &_ebss) {
    142c:	42aa      	cmp	r2, r5
		*dest++ = 0;
    142e:	601e      	str	r6, [r3, #0]
		dest < &_edata;
		src++, dest++) {
		*dest = *src;
	}

	while (dest < &_ebss) {
    1430:	d1f9      	bne.n	1426 <reset_handler+0x7e>
		*dest++ = 0;
	}

	/* Constructors. */
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
    1432:	4d79      	ldr	r5, [pc, #484]	; (1618 <reset_handler+0x270>)
    1434:	4b79      	ldr	r3, [pc, #484]	; (161c <reset_handler+0x274>)
    1436:	429d      	cmp	r5, r3
    1438:	d21c      	bcs.n	1474 <reset_handler+0xcc>
	.irq = {
		IRQ_HANDLERS
	}
};

void WEAK __attribute__ ((naked)) reset_handler(void)
    143a:	1cd9      	adds	r1, r3, #3
    143c:	1d2e      	adds	r6, r5, #4
    143e:	1b88      	subs	r0, r1, r6
    1440:	0883      	lsrs	r3, r0, #2
    1442:	1c5f      	adds	r7, r3, #1
    1444:	2401      	movs	r4, #1
		*dest++ = 0;
	}

	/* Constructors. */
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
		(*fp)();
    1446:	682a      	ldr	r2, [r5, #0]
    1448:	ea03 0804 	and.w	r8, r3, r4
    144c:	4790      	blx	r2
	while (dest < &_ebss) {
		*dest++ = 0;
	}

	/* Constructors. */
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
    144e:	42bc      	cmp	r4, r7
    1450:	d010      	beq.n	1474 <reset_handler+0xcc>
    1452:	f1b8 0f00 	cmp.w	r8, #0
    1456:	d005      	beq.n	1464 <reset_handler+0xbc>
    1458:	2402      	movs	r4, #2
		(*fp)();
    145a:	6831      	ldr	r1, [r6, #0]
    145c:	4788      	blx	r1
	while (dest < &_ebss) {
		*dest++ = 0;
	}

	/* Constructors. */
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
    145e:	42bc      	cmp	r4, r7
    1460:	4635      	mov	r5, r6
    1462:	d007      	beq.n	1474 <reset_handler+0xcc>
		(*fp)();
    1464:	686e      	ldr	r6, [r5, #4]
    1466:	47b0      	blx	r6
    1468:	3402      	adds	r4, #2
    146a:	68a8      	ldr	r0, [r5, #8]
    146c:	4780      	blx	r0
    146e:	3508      	adds	r5, #8
	while (dest < &_ebss) {
		*dest++ = 0;
	}

	/* Constructors. */
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
    1470:	42bc      	cmp	r4, r7
    1472:	d1f7      	bne.n	1464 <reset_handler+0xbc>
		(*fp)();
	}
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
    1474:	4d6a      	ldr	r5, [pc, #424]	; (1620 <reset_handler+0x278>)
    1476:	4b6b      	ldr	r3, [pc, #428]	; (1624 <reset_handler+0x27c>)
    1478:	429d      	cmp	r5, r3
    147a:	d21c      	bcs.n	14b6 <reset_handler+0x10e>
	.irq = {
		IRQ_HANDLERS
	}
};

void WEAK __attribute__ ((naked)) reset_handler(void)
    147c:	1cdf      	adds	r7, r3, #3
    147e:	1d2e      	adds	r6, r5, #4
    1480:	1bba      	subs	r2, r7, r6
    1482:	0891      	lsrs	r1, r2, #2
    1484:	1c4f      	adds	r7, r1, #1
    1486:	2401      	movs	r4, #1
	/* Constructors. */
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
		(*fp)();
	}
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
		(*fp)();
    1488:	6828      	ldr	r0, [r5, #0]
    148a:	ea01 0904 	and.w	r9, r1, r4
    148e:	4780      	blx	r0

	/* Constructors. */
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
		(*fp)();
	}
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
    1490:	42bc      	cmp	r4, r7
    1492:	d010      	beq.n	14b6 <reset_handler+0x10e>
    1494:	f1b9 0f00 	cmp.w	r9, #0
    1498:	d005      	beq.n	14a6 <reset_handler+0xfe>
    149a:	2402      	movs	r4, #2
		(*fp)();
    149c:	6833      	ldr	r3, [r6, #0]
    149e:	4798      	blx	r3

	/* Constructors. */
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
		(*fp)();
	}
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
    14a0:	42bc      	cmp	r4, r7
    14a2:	4635      	mov	r5, r6
    14a4:	d007      	beq.n	14b6 <reset_handler+0x10e>
		(*fp)();
    14a6:	686e      	ldr	r6, [r5, #4]
    14a8:	47b0      	blx	r6
    14aa:	3402      	adds	r4, #2
    14ac:	68aa      	ldr	r2, [r5, #8]
    14ae:	4790      	blx	r2
    14b0:	3508      	adds	r5, #8

	/* Constructors. */
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
		(*fp)();
	}
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
    14b2:	42bc      	cmp	r4, r7
    14b4:	d1f7      	bne.n	14a6 <reset_handler+0xfe>
  // (for example when creating a final executable which you will
  // not debug) by setting the define 'DONT_RESET_ON_RESTART'.
  //
  #ifndef DONT_RESET_ON_RESTART
  // Disable interrupts
  __asm volatile ("cpsid i");
    14b6:	b672      	cpsid	i
  // LPC_RGU->RESET_CTRL1 @ 0x40053104
  // Note that we do not use the CMSIS register access mechanism,
  // as there is no guarantee that the project has been configured
  // to use CMSIS.
  // Write to LPC_RGU->RESET_CTRL0
  *(RESET_CONTROL+0) = 0x10DF1000;
    14b8:	f44f 5944 	mov.w	r9, #12544	; 0x3100
  // GPIO_RST|AES_RST|ETHERNET_RST|SDIO_RST|DMA_RST|
  // USB1_RST|USB0_RST|LCD_RST|M0_SUB_RST
  // Write to LPC_RGU->RESET_CTRL1
  *(RESET_CONTROL+1) = 0x01DFF7FF;
    14bc:	f243 1c04 	movw	ip, #12548	; 0x3104
  // Clear all pending interrupts in the NVIC
  volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
  unsigned int irqpendloop;
  for(irqpendloop = 0; irqpendloop < 8; irqpendloop++)
  {
    *(NVIC_ICPR+irqpendloop)= 0xFFFFFFFF;
    14c0:	f24e 2e80 	movw	lr, #57984	; 0xe280
    14c4:	f24e 2784 	movw	r7, #57988	; 0xe284
    14c8:	f24e 2688 	movw	r6, #57992	; 0xe288
    14cc:	f24e 258c 	movw	r5, #57996	; 0xe28c
    14d0:	f24e 2490 	movw	r4, #58000	; 0xe290
    14d4:	f24e 2094 	movw	r0, #58004	; 0xe294
    14d8:	f24e 2198 	movw	r1, #58008	; 0xe298
    14dc:	f24e 229c 	movw	r2, #58012	; 0xe29c
  // LPC_RGU->RESET_CTRL1 @ 0x40053104
  // Note that we do not use the CMSIS register access mechanism,
  // as there is no guarantee that the project has been configured
  // to use CMSIS.
  // Write to LPC_RGU->RESET_CTRL0
  *(RESET_CONTROL+0) = 0x10DF1000;
    14e0:	f2c4 0905 	movt	r9, #16389	; 0x4005
  // GPIO_RST|AES_RST|ETHERNET_RST|SDIO_RST|DMA_RST|
  // USB1_RST|USB0_RST|LCD_RST|M0_SUB_RST
  // Write to LPC_RGU->RESET_CTRL1
  *(RESET_CONTROL+1) = 0x01DFF7FF;
    14e4:	f2c4 0c05 	movt	ip, #16389	; 0x4005
  // Clear all pending interrupts in the NVIC
  volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
  unsigned int irqpendloop;
  for(irqpendloop = 0; irqpendloop < 8; irqpendloop++)
  {
    *(NVIC_ICPR+irqpendloop)= 0xFFFFFFFF;
    14e8:	f2ce 0e00 	movt	lr, #57344	; 0xe000
    14ec:	f2ce 0700 	movt	r7, #57344	; 0xe000
    14f0:	f2ce 0600 	movt	r6, #57344	; 0xe000
    14f4:	f2ce 0500 	movt	r5, #57344	; 0xe000
    14f8:	f2ce 0400 	movt	r4, #57344	; 0xe000
    14fc:	f2ce 0000 	movt	r0, #57344	; 0xe000
    1500:	f2ce 0100 	movt	r1, #57344	; 0xe000
    1504:	f2ce 0200 	movt	r2, #57344	; 0xe000
  // LPC_RGU->RESET_CTRL1 @ 0x40053104
  // Note that we do not use the CMSIS register access mechanism,
  // as there is no guarantee that the project has been configured
  // to use CMSIS.
  // Write to LPC_RGU->RESET_CTRL0
  *(RESET_CONTROL+0) = 0x10DF1000;
    1508:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
  // GPIO_RST|AES_RST|ETHERNET_RST|SDIO_RST|DMA_RST|
  // USB1_RST|USB0_RST|LCD_RST|M0_SUB_RST
  // Write to LPC_RGU->RESET_CTRL1
  *(RESET_CONTROL+1) = 0x01DFF7FF;
    150c:	f24f 78ff 	movw	r8, #63487	; 0xf7ff
  // Clear all pending interrupts in the NVIC
  volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
  unsigned int irqpendloop;
  for(irqpendloop = 0; irqpendloop < 8; irqpendloop++)
  {
    *(NVIC_ICPR+irqpendloop)= 0xFFFFFFFF;
    1510:	f04f 33ff 	mov.w	r3, #4294967295
  // LPC_RGU->RESET_CTRL1 @ 0x40053104
  // Note that we do not use the CMSIS register access mechanism,
  // as there is no guarantee that the project has been configured
  // to use CMSIS.
  // Write to LPC_RGU->RESET_CTRL0
  *(RESET_CONTROL+0) = 0x10DF1000;
    1514:	f2c1 0adf 	movt	sl, #4319	; 0x10df
  // GPIO_RST|AES_RST|ETHERNET_RST|SDIO_RST|DMA_RST|
  // USB1_RST|USB0_RST|LCD_RST|M0_SUB_RST
  // Write to LPC_RGU->RESET_CTRL1
  *(RESET_CONTROL+1) = 0x01DFF7FF;
    1518:	f2c0 18df 	movt	r8, #479	; 0x1df
  // LPC_RGU->RESET_CTRL1 @ 0x40053104
  // Note that we do not use the CMSIS register access mechanism,
  // as there is no guarantee that the project has been configured
  // to use CMSIS.
  // Write to LPC_RGU->RESET_CTRL0
  *(RESET_CONTROL+0) = 0x10DF1000;
    151c:	f8c9 a000 	str.w	sl, [r9]
  // GPIO_RST|AES_RST|ETHERNET_RST|SDIO_RST|DMA_RST|
  // USB1_RST|USB0_RST|LCD_RST|M0_SUB_RST
  // Write to LPC_RGU->RESET_CTRL1
  *(RESET_CONTROL+1) = 0x01DFF7FF;
    1520:	f8cc 8000 	str.w	r8, [ip]
  // Clear all pending interrupts in the NVIC
  volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
  unsigned int irqpendloop;
  for(irqpendloop = 0; irqpendloop < 8; irqpendloop++)
  {
    *(NVIC_ICPR+irqpendloop)= 0xFFFFFFFF;
    1524:	f8ce 3000 	str.w	r3, [lr]
    1528:	603b      	str	r3, [r7, #0]
    152a:	6033      	str	r3, [r6, #0]
    152c:	602b      	str	r3, [r5, #0]
    152e:	6023      	str	r3, [r4, #0]
    1530:	6003      	str	r3, [r0, #0]
    1532:	600b      	str	r3, [r1, #0]
    1534:	6013      	str	r3, [r2, #0]
  }
  // Reenable interrupts
  __asm volatile ("cpsie i");
    1536:	b662      	cpsie	i
  // equivalent to CMSIS '__enable_irq()' function
  #endif // ifndef DONT_RESET_ON_RESTART
  // *************************************************************

	/* Copy the code from ROM to Real RAM (if enabled) */
	if ((&_etext_ram-&_text_ram) > 0) {
    1538:	4b3b      	ldr	r3, [pc, #236]	; (1628 <reset_handler+0x280>)
    153a:	4e3c      	ldr	r6, [pc, #240]	; (162c <reset_handler+0x284>)
    153c:	1b9d      	subs	r5, r3, r6
    153e:	2d03      	cmp	r5, #3
    1540:	dd33      	ble.n	15aa <reset_handler+0x202>
		src = &_etext_rom-(&_etext_ram-&_text_ram);
		/* Change Shadow memory to ROM (for Debug Purpose in case Boot
		 * has not set correctly the M4MEMMAP because of debug)
		 */
		CREG_M4MEMMAP = (unsigned long)src;
    1542:	f44f 5044 	mov.w	r0, #12544	; 0x3100
  #endif // ifndef DONT_RESET_ON_RESTART
  // *************************************************************

	/* Copy the code from ROM to Real RAM (if enabled) */
	if ((&_etext_ram-&_text_ram) > 0) {
		src = &_etext_rom-(&_etext_ram-&_text_ram);
    1546:	4a3a      	ldr	r2, [pc, #232]	; (1630 <reset_handler+0x288>)
    1548:	f025 0103 	bic.w	r1, r5, #3
		/* Change Shadow memory to ROM (for Debug Purpose in case Boot
		 * has not set correctly the M4MEMMAP because of debug)
		 */
		CREG_M4MEMMAP = (unsigned long)src;
    154c:	f2c4 0004 	movt	r0, #16388	; 0x4004
  #endif // ifndef DONT_RESET_ON_RESTART
  // *************************************************************

	/* Copy the code from ROM to Real RAM (if enabled) */
	if ((&_etext_ram-&_text_ram) > 0) {
		src = &_etext_rom-(&_etext_ram-&_text_ram);
    1550:	1a52      	subs	r2, r2, r1
		/* Change Shadow memory to ROM (for Debug Purpose in case Boot
		 * has not set correctly the M4MEMMAP because of debug)
		 */
		CREG_M4MEMMAP = (unsigned long)src;

		for (dest = &_text_ram; dest < &_etext_ram; ) {
    1552:	429e      	cmp	r6, r3
	if ((&_etext_ram-&_text_ram) > 0) {
		src = &_etext_rom-(&_etext_ram-&_text_ram);
		/* Change Shadow memory to ROM (for Debug Purpose in case Boot
		 * has not set correctly the M4MEMMAP because of debug)
		 */
		CREG_M4MEMMAP = (unsigned long)src;
    1554:	6002      	str	r2, [r0, #0]

		for (dest = &_text_ram; dest < &_etext_ram; ) {
    1556:	d223      	bcs.n	15a0 <reset_handler+0x1f8>
	.irq = {
		IRQ_HANDLERS
	}
};

void WEAK __attribute__ ((naked)) reset_handler(void)
    1558:	1cdc      	adds	r4, r3, #3
    155a:	1d30      	adds	r0, r6, #4
			*dest++ = *src++;
    155c:	4613      	mov	r3, r2
    155e:	1a25      	subs	r5, r4, r0
    1560:	f025 0503 	bic.w	r5, r5, #3
    1564:	f853 4b04 	ldr.w	r4, [r3], #4
    1568:	4629      	mov	r1, r5
    156a:	3504      	adds	r5, #4
    156c:	1955      	adds	r5, r2, r5
		/* Change Shadow memory to ROM (for Debug Purpose in case Boot
		 * has not set correctly the M4MEMMAP because of debug)
		 */
		CREG_M4MEMMAP = (unsigned long)src;

		for (dest = &_text_ram; dest < &_etext_ram; ) {
    156e:	42ab      	cmp	r3, r5
			*dest++ = *src++;
    1570:	6034      	str	r4, [r6, #0]
    1572:	f3c1 0280 	ubfx	r2, r1, #2, #1
		/* Change Shadow memory to ROM (for Debug Purpose in case Boot
		 * has not set correctly the M4MEMMAP because of debug)
		 */
		CREG_M4MEMMAP = (unsigned long)src;

		for (dest = &_text_ram; dest < &_etext_ram; ) {
    1576:	d013      	beq.n	15a0 <reset_handler+0x1f8>
    1578:	b132      	cbz	r2, 1588 <reset_handler+0x1e0>
			*dest++ = *src++;
    157a:	f853 1b04 	ldr.w	r1, [r3], #4
		/* Change Shadow memory to ROM (for Debug Purpose in case Boot
		 * has not set correctly the M4MEMMAP because of debug)
		 */
		CREG_M4MEMMAP = (unsigned long)src;

		for (dest = &_text_ram; dest < &_etext_ram; ) {
    157e:	42ab      	cmp	r3, r5
			*dest++ = *src++;
    1580:	6001      	str	r1, [r0, #0]
    1582:	f106 0008 	add.w	r0, r6, #8
		/* Change Shadow memory to ROM (for Debug Purpose in case Boot
		 * has not set correctly the M4MEMMAP because of debug)
		 */
		CREG_M4MEMMAP = (unsigned long)src;

		for (dest = &_text_ram; dest < &_etext_ram; ) {
    1586:	d00b      	beq.n	15a0 <reset_handler+0x1f8>
			*dest++ = *src++;
    1588:	4619      	mov	r1, r3
    158a:	4602      	mov	r2, r0
    158c:	f851 4b04 	ldr.w	r4, [r1], #4
    1590:	f842 4b04 	str.w	r4, [r2], #4
    1594:	685c      	ldr	r4, [r3, #4]
    1596:	1d0b      	adds	r3, r1, #4
    1598:	6044      	str	r4, [r0, #4]
    159a:	1d10      	adds	r0, r2, #4
		/* Change Shadow memory to ROM (for Debug Purpose in case Boot
		 * has not set correctly the M4MEMMAP because of debug)
		 */
		CREG_M4MEMMAP = (unsigned long)src;

		for (dest = &_text_ram; dest < &_etext_ram; ) {
    159c:	42ab      	cmp	r3, r5
    159e:	d1f3      	bne.n	1588 <reset_handler+0x1e0>
			*dest++ = *src++;
		}

		/* Change Shadow memory to Real RAM */
		CREG_M4MEMMAP = (unsigned long)&_text_ram;
    15a0:	f44f 5344 	mov.w	r3, #12544	; 0x3100
    15a4:	f2c4 0304 	movt	r3, #16388	; 0x4004
    15a8:	601e      	str	r6, [r3, #0]

		/* Continue Execution in RAM */
	}

	/* Enable access to Floating-Point coprocessor. */
	SCB_CPACR |= SCB_CPACR_FULL * (SCB_CPACR_CP10 | SCB_CPACR_CP11);
    15aa:	f64e 5588 	movw	r5, #60808	; 0xed88
    15ae:	f2ce 0500 	movt	r5, #57344	; 0xe000
    15b2:	6828      	ldr	r0, [r5, #0]
    15b4:	f440 0170 	orr.w	r1, r0, #15728640	; 0xf00000
    15b8:	6029      	str	r1, [r5, #0]

	/* might be provided by platform specific vector.c */
	pre_main();

	/* Call the application's entry point. */
	main();
    15ba:	f7fe fedd 	bl	378 <main>

	/* Destructors. */
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
    15be:	4d1d      	ldr	r5, [pc, #116]	; (1634 <reset_handler+0x28c>)
    15c0:	4a1d      	ldr	r2, [pc, #116]	; (1638 <reset_handler+0x290>)
    15c2:	4295      	cmp	r5, r2
    15c4:	d21d      	bcs.n	1602 <reset_handler+0x25a>
	.irq = {
		IRQ_HANDLERS
	}
};

void WEAK __attribute__ ((naked)) reset_handler(void)
    15c6:	1cd7      	adds	r7, r2, #3
    15c8:	1d2e      	adds	r6, r5, #4
    15ca:	1bbc      	subs	r4, r7, r6
    15cc:	08a3      	lsrs	r3, r4, #2
    15ce:	1c5f      	adds	r7, r3, #1
    15d0:	2401      	movs	r4, #1
	/* Call the application's entry point. */
	main();

	/* Destructors. */
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
		(*fp)();
    15d2:	6828      	ldr	r0, [r5, #0]
    15d4:	ea03 0804 	and.w	r8, r3, r4
    15d8:	4780      	blx	r0

	/* Call the application's entry point. */
	main();

	/* Destructors. */
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
    15da:	42bc      	cmp	r4, r7
    15dc:	d011      	beq.n	1602 <reset_handler+0x25a>
    15de:	f1b8 0f00 	cmp.w	r8, #0
    15e2:	d005      	beq.n	15f0 <reset_handler+0x248>
    15e4:	2402      	movs	r4, #2
		(*fp)();
    15e6:	6831      	ldr	r1, [r6, #0]
    15e8:	4788      	blx	r1

	/* Call the application's entry point. */
	main();

	/* Destructors. */
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
    15ea:	42bc      	cmp	r4, r7
    15ec:	4635      	mov	r5, r6
    15ee:	d008      	beq.n	1602 <reset_handler+0x25a>
		(*fp)();
    15f0:	686a      	ldr	r2, [r5, #4]
    15f2:	4790      	blx	r2
    15f4:	3402      	adds	r4, #2
    15f6:	68ab      	ldr	r3, [r5, #8]
    15f8:	1d2e      	adds	r6, r5, #4
    15fa:	4798      	blx	r3
    15fc:	3508      	adds	r5, #8

	/* Call the application's entry point. */
	main();

	/* Destructors. */
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
    15fe:	42bc      	cmp	r4, r7
    1600:	d1f6      	bne.n	15f0 <reset_handler+0x248>
void WEAK __attribute__ ((naked)) reset_handler(void)
{
	volatile unsigned *src, *dest;
	funcp_t *fp;

	for (src = &_data_loadaddr, dest = &_data;
    1602:	460b      	mov	r3, r1
    1604:	e6fb      	b.n	13fe <reset_handler+0x56>
    1606:	bf00      	nop
    1608:	10080000 	.word	0x10080000
    160c:	1008001c 	.word	0x1008001c
    1610:	000050c0 	.word	0x000050c0
    1614:	10080088 	.word	0x10080088
    1618:	000050b8 	.word	0x000050b8
    161c:	000050b8 	.word	0x000050b8
    1620:	000050b8 	.word	0x000050b8
    1624:	000050b8 	.word	0x000050b8
    1628:	100050c0 	.word	0x100050c0
    162c:	10000000 	.word	0x10000000
    1630:	800050c0 	.word	0x800050c0
    1634:	000050b8 	.word	0x000050b8
    1638:	000050b8 	.word	0x000050b8

0000163c <nvic_enable_irq>:
 * @param[in] irqn Unsigned int8. Interrupt number @ref nvic_stm32f1_userint
 */

void nvic_enable_irq(uint8_t irqn)
{
	NVIC_ISER(irqn / 32) = (1 << (irqn % 32));
    163c:	0943      	lsrs	r3, r0, #5
    163e:	0099      	lsls	r1, r3, #2
    1640:	f101 4260 	add.w	r2, r1, #3758096384	; 0xe0000000
    1644:	f502 4361 	add.w	r3, r2, #57600	; 0xe100
    1648:	f000 001f 	and.w	r0, r0, #31
    164c:	2101      	movs	r1, #1
    164e:	fa01 f200 	lsl.w	r2, r1, r0
    1652:	601a      	str	r2, [r3, #0]
    1654:	4770      	bx	lr
    1656:	bf00      	nop

00001658 <nvic_set_priority>:
void nvic_set_priority(uint8_t irqn, uint8_t priority)
{
	/* code from lpc43xx/nvic.c -- this is quite a hack and alludes to the
	 * negative interrupt numbers assigned to the system interrupts. better
	 * handling would mean signed integers. */
	if (irqn >= NVIC_IRQ_COUNT) {
    1658:	2834      	cmp	r0, #52	; 0x34
    165a:	d805      	bhi.n	1668 <nvic_set_priority+0x10>
		/* Cortex-M  system interrupts */
		SCS_SHPR((irqn & 0xF) - 4) = priority;
	} else {
		/* Device specific interrupts */
		NVIC_IPR(irqn) = priority;
    165c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    1660:	f500 4264 	add.w	r2, r0, #58368	; 0xe400
    1664:	7011      	strb	r1, [r2, #0]
    1666:	4770      	bx	lr
	/* code from lpc43xx/nvic.c -- this is quite a hack and alludes to the
	 * negative interrupt numbers assigned to the system interrupts. better
	 * handling would mean signed integers. */
	if (irqn >= NVIC_IRQ_COUNT) {
		/* Cortex-M  system interrupts */
		SCS_SHPR((irqn & 0xF) - 4) = priority;
    1668:	f64e 5314 	movw	r3, #60692	; 0xed14
    166c:	f000 000f 	and.w	r0, r0, #15
    1670:	f2ce 0300 	movt	r3, #57344	; 0xe000
    1674:	54c1      	strb	r1, [r0, r3]
    1676:	4770      	bx	lr

00001678 <__aeabi_ldivmod>:
    1678:	b973      	cbnz	r3, 1698 <__aeabi_ldivmod+0x20>
    167a:	b96a      	cbnz	r2, 1698 <__aeabi_ldivmod+0x20>
    167c:	2900      	cmp	r1, #0
    167e:	bf08      	it	eq
    1680:	2800      	cmpeq	r0, #0
    1682:	bfbc      	itt	lt
    1684:	2000      	movlt	r0, #0
    1686:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    168a:	bfc4      	itt	gt
    168c:	f06f 4100 	mvngt.w	r1, #2147483648	; 0x80000000
    1690:	f04f 30ff 	movgt.w	r0, #4294967295
    1694:	f000 b838 	b.w	1708 <__aeabi_idiv0>
    1698:	b082      	sub	sp, #8
    169a:	46ec      	mov	ip, sp
    169c:	e92d 5000 	stmdb	sp!, {ip, lr}
    16a0:	f000 f806 	bl	16b0 <__gnu_ldivmod_helper>
    16a4:	f8dd e004 	ldr.w	lr, [sp, #4]
    16a8:	b002      	add	sp, #8
    16aa:	bc0c      	pop	{r2, r3}
    16ac:	4770      	bx	lr
    16ae:	bf00      	nop

000016b0 <__gnu_ldivmod_helper>:
    16b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    16b2:	4616      	mov	r6, r2
    16b4:	4604      	mov	r4, r0
    16b6:	460d      	mov	r5, r1
    16b8:	461f      	mov	r7, r3
    16ba:	f000 f827 	bl	170c <__divdi3>
    16be:	fb06 f301 	mul.w	r3, r6, r1
    16c2:	fb00 3707 	mla	r7, r0, r7, r3
    16c6:	fba6 2300 	umull	r2, r3, r6, r0
    16ca:	18fb      	adds	r3, r7, r3
    16cc:	1aa2      	subs	r2, r4, r2
    16ce:	eb65 0303 	sbc.w	r3, r5, r3
    16d2:	9c06      	ldr	r4, [sp, #24]
    16d4:	e9c4 2300 	strd	r2, r3, [r4]
    16d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    16da:	bf00      	nop

000016dc <__gnu_uldivmod_helper>:
    16dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    16de:	4616      	mov	r6, r2
    16e0:	4604      	mov	r4, r0
    16e2:	460d      	mov	r5, r1
    16e4:	461f      	mov	r7, r3
    16e6:	f000 f96f 	bl	19c8 <__udivdi3>
    16ea:	fb00 f707 	mul.w	r7, r0, r7
    16ee:	fba0 2306 	umull	r2, r3, r0, r6
    16f2:	fb06 7701 	mla	r7, r6, r1, r7
    16f6:	18fb      	adds	r3, r7, r3
    16f8:	1aa2      	subs	r2, r4, r2
    16fa:	eb65 0303 	sbc.w	r3, r5, r3
    16fe:	9c06      	ldr	r4, [sp, #24]
    1700:	e9c4 2300 	strd	r2, r3, [r4]
    1704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1706:	bf00      	nop

00001708 <__aeabi_idiv0>:
    1708:	4770      	bx	lr
    170a:	bf00      	nop

0000170c <__divdi3>:
    170c:	2900      	cmp	r1, #0
    170e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    1712:	461d      	mov	r5, r3
    1714:	f2c0 809d 	blt.w	1852 <__divdi3+0x146>
    1718:	2400      	movs	r4, #0
    171a:	2d00      	cmp	r5, #0
    171c:	f2c0 8094 	blt.w	1848 <__divdi3+0x13c>
    1720:	4680      	mov	r8, r0
    1722:	460f      	mov	r7, r1
    1724:	4694      	mov	ip, r2
    1726:	461e      	mov	r6, r3
    1728:	bbe3      	cbnz	r3, 17a4 <__divdi3+0x98>
    172a:	428a      	cmp	r2, r1
    172c:	d955      	bls.n	17da <__divdi3+0xce>
    172e:	fab2 f782 	clz	r7, r2
    1732:	b147      	cbz	r7, 1746 <__divdi3+0x3a>
    1734:	f1c7 0520 	rsb	r5, r7, #32
    1738:	fa20 f605 	lsr.w	r6, r0, r5
    173c:	fa01 f107 	lsl.w	r1, r1, r7
    1740:	40ba      	lsls	r2, r7
    1742:	4331      	orrs	r1, r6
    1744:	40b8      	lsls	r0, r7
    1746:	0c17      	lsrs	r7, r2, #16
    1748:	fbb1 f6f7 	udiv	r6, r1, r7
    174c:	0c03      	lsrs	r3, r0, #16
    174e:	fa1f fc82 	uxth.w	ip, r2
    1752:	fb07 1116 	mls	r1, r7, r6, r1
    1756:	fb0c f506 	mul.w	r5, ip, r6
    175a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    175e:	429d      	cmp	r5, r3
    1760:	d908      	bls.n	1774 <__divdi3+0x68>
    1762:	1e71      	subs	r1, r6, #1
    1764:	189b      	adds	r3, r3, r2
    1766:	f080 8113 	bcs.w	1990 <__divdi3+0x284>
    176a:	429d      	cmp	r5, r3
    176c:	f240 8110 	bls.w	1990 <__divdi3+0x284>
    1770:	3e02      	subs	r6, #2
    1772:	189b      	adds	r3, r3, r2
    1774:	1b59      	subs	r1, r3, r5
    1776:	fbb1 f5f7 	udiv	r5, r1, r7
    177a:	fb07 1315 	mls	r3, r7, r5, r1
    177e:	b280      	uxth	r0, r0
    1780:	fb0c fc05 	mul.w	ip, ip, r5
    1784:	ea40 4103 	orr.w	r1, r0, r3, lsl #16
    1788:	458c      	cmp	ip, r1
    178a:	d907      	bls.n	179c <__divdi3+0x90>
    178c:	1e6b      	subs	r3, r5, #1
    178e:	188a      	adds	r2, r1, r2
    1790:	f080 8100 	bcs.w	1994 <__divdi3+0x288>
    1794:	4594      	cmp	ip, r2
    1796:	f240 80fd 	bls.w	1994 <__divdi3+0x288>
    179a:	3d02      	subs	r5, #2
    179c:	ea45 4106 	orr.w	r1, r5, r6, lsl #16
    17a0:	2500      	movs	r5, #0
    17a2:	e003      	b.n	17ac <__divdi3+0xa0>
    17a4:	428b      	cmp	r3, r1
    17a6:	d90c      	bls.n	17c2 <__divdi3+0xb6>
    17a8:	2500      	movs	r5, #0
    17aa:	4629      	mov	r1, r5
    17ac:	460a      	mov	r2, r1
    17ae:	462b      	mov	r3, r5
    17b0:	b114      	cbz	r4, 17b8 <__divdi3+0xac>
    17b2:	4252      	negs	r2, r2
    17b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    17b8:	4610      	mov	r0, r2
    17ba:	4619      	mov	r1, r3
    17bc:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    17c0:	4770      	bx	lr
    17c2:	fab3 f583 	clz	r5, r3
    17c6:	2d00      	cmp	r5, #0
    17c8:	f040 8087 	bne.w	18da <__divdi3+0x1ce>
    17cc:	428b      	cmp	r3, r1
    17ce:	d301      	bcc.n	17d4 <__divdi3+0xc8>
    17d0:	4282      	cmp	r2, r0
    17d2:	d8ea      	bhi.n	17aa <__divdi3+0x9e>
    17d4:	2500      	movs	r5, #0
    17d6:	2101      	movs	r1, #1
    17d8:	e7e8      	b.n	17ac <__divdi3+0xa0>
    17da:	b912      	cbnz	r2, 17e2 <__divdi3+0xd6>
    17dc:	2601      	movs	r6, #1
    17de:	fbb6 f2f2 	udiv	r2, r6, r2
    17e2:	fab2 f682 	clz	r6, r2
    17e6:	2e00      	cmp	r6, #0
    17e8:	d139      	bne.n	185e <__divdi3+0x152>
    17ea:	1a8e      	subs	r6, r1, r2
    17ec:	0c13      	lsrs	r3, r2, #16
    17ee:	fa1f fc82 	uxth.w	ip, r2
    17f2:	2501      	movs	r5, #1
    17f4:	fbb6 f7f3 	udiv	r7, r6, r3
    17f8:	fb03 6117 	mls	r1, r3, r7, r6
    17fc:	ea4f 4910 	mov.w	r9, r0, lsr #16
    1800:	fb0c f807 	mul.w	r8, ip, r7
    1804:	ea49 4601 	orr.w	r6, r9, r1, lsl #16
    1808:	45b0      	cmp	r8, r6
    180a:	d906      	bls.n	181a <__divdi3+0x10e>
    180c:	1e79      	subs	r1, r7, #1
    180e:	18b6      	adds	r6, r6, r2
    1810:	d202      	bcs.n	1818 <__divdi3+0x10c>
    1812:	45b0      	cmp	r8, r6
    1814:	f200 80d3 	bhi.w	19be <__divdi3+0x2b2>
    1818:	460f      	mov	r7, r1
    181a:	ebc8 0606 	rsb	r6, r8, r6
    181e:	fbb6 f1f3 	udiv	r1, r6, r3
    1822:	fb03 6311 	mls	r3, r3, r1, r6
    1826:	b280      	uxth	r0, r0
    1828:	fb0c fc01 	mul.w	ip, ip, r1
    182c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    1830:	459c      	cmp	ip, r3
    1832:	d906      	bls.n	1842 <__divdi3+0x136>
    1834:	1e4e      	subs	r6, r1, #1
    1836:	189a      	adds	r2, r3, r2
    1838:	d202      	bcs.n	1840 <__divdi3+0x134>
    183a:	4594      	cmp	ip, r2
    183c:	f200 80c2 	bhi.w	19c4 <__divdi3+0x2b8>
    1840:	4631      	mov	r1, r6
    1842:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
    1846:	e7b1      	b.n	17ac <__divdi3+0xa0>
    1848:	43e4      	mvns	r4, r4
    184a:	4252      	negs	r2, r2
    184c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1850:	e766      	b.n	1720 <__divdi3+0x14>
    1852:	4240      	negs	r0, r0
    1854:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    1858:	f04f 34ff 	mov.w	r4, #4294967295
    185c:	e75d      	b.n	171a <__divdi3+0xe>
    185e:	40b2      	lsls	r2, r6
    1860:	f1c6 0920 	rsb	r9, r6, #32
    1864:	fa21 f709 	lsr.w	r7, r1, r9
    1868:	fa20 f509 	lsr.w	r5, r0, r9
    186c:	0c13      	lsrs	r3, r2, #16
    186e:	fa01 f106 	lsl.w	r1, r1, r6
    1872:	fbb7 f8f3 	udiv	r8, r7, r3
    1876:	ea45 0901 	orr.w	r9, r5, r1
    187a:	fa1f fc82 	uxth.w	ip, r2
    187e:	fb03 7718 	mls	r7, r3, r8, r7
    1882:	ea4f 4119 	mov.w	r1, r9, lsr #16
    1886:	fb0c f508 	mul.w	r5, ip, r8
    188a:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
    188e:	40b0      	lsls	r0, r6
    1890:	42bd      	cmp	r5, r7
    1892:	d90a      	bls.n	18aa <__divdi3+0x19e>
    1894:	18bf      	adds	r7, r7, r2
    1896:	f108 36ff 	add.w	r6, r8, #4294967295
    189a:	f080 808e 	bcs.w	19ba <__divdi3+0x2ae>
    189e:	42bd      	cmp	r5, r7
    18a0:	f240 808b 	bls.w	19ba <__divdi3+0x2ae>
    18a4:	f1a8 0802 	sub.w	r8, r8, #2
    18a8:	18bf      	adds	r7, r7, r2
    18aa:	1b79      	subs	r1, r7, r5
    18ac:	fbb1 f5f3 	udiv	r5, r1, r3
    18b0:	fb03 1715 	mls	r7, r3, r5, r1
    18b4:	fa1f f989 	uxth.w	r9, r9
    18b8:	fb0c f605 	mul.w	r6, ip, r5
    18bc:	ea49 4107 	orr.w	r1, r9, r7, lsl #16
    18c0:	428e      	cmp	r6, r1
    18c2:	d906      	bls.n	18d2 <__divdi3+0x1c6>
    18c4:	1e6f      	subs	r7, r5, #1
    18c6:	1889      	adds	r1, r1, r2
    18c8:	d271      	bcs.n	19ae <__divdi3+0x2a2>
    18ca:	428e      	cmp	r6, r1
    18cc:	d96f      	bls.n	19ae <__divdi3+0x2a2>
    18ce:	3d02      	subs	r5, #2
    18d0:	1889      	adds	r1, r1, r2
    18d2:	1b8e      	subs	r6, r1, r6
    18d4:	ea45 4508 	orr.w	r5, r5, r8, lsl #16
    18d8:	e78c      	b.n	17f4 <__divdi3+0xe8>
    18da:	f1c5 0120 	rsb	r1, r5, #32
    18de:	fa22 f301 	lsr.w	r3, r2, r1
    18e2:	fa06 f605 	lsl.w	r6, r6, r5
    18e6:	431e      	orrs	r6, r3
    18e8:	fa27 f201 	lsr.w	r2, r7, r1
    18ec:	ea4f 4916 	mov.w	r9, r6, lsr #16
    18f0:	fa07 f705 	lsl.w	r7, r7, r5
    18f4:	fa20 f101 	lsr.w	r1, r0, r1
    18f8:	fbb2 f8f9 	udiv	r8, r2, r9
    18fc:	430f      	orrs	r7, r1
    18fe:	0c3b      	lsrs	r3, r7, #16
    1900:	fa1f fa86 	uxth.w	sl, r6
    1904:	fb09 2218 	mls	r2, r9, r8, r2
    1908:	fb0a fb08 	mul.w	fp, sl, r8
    190c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    1910:	4593      	cmp	fp, r2
    1912:	fa0c fc05 	lsl.w	ip, ip, r5
    1916:	d908      	bls.n	192a <__divdi3+0x21e>
    1918:	1992      	adds	r2, r2, r6
    191a:	f108 31ff 	add.w	r1, r8, #4294967295
    191e:	d24a      	bcs.n	19b6 <__divdi3+0x2aa>
    1920:	4593      	cmp	fp, r2
    1922:	d948      	bls.n	19b6 <__divdi3+0x2aa>
    1924:	f1a8 0802 	sub.w	r8, r8, #2
    1928:	1992      	adds	r2, r2, r6
    192a:	ebcb 0302 	rsb	r3, fp, r2
    192e:	fbb3 f1f9 	udiv	r1, r3, r9
    1932:	fb09 3211 	mls	r2, r9, r1, r3
    1936:	b2bf      	uxth	r7, r7
    1938:	fb0a fa01 	mul.w	sl, sl, r1
    193c:	ea47 4302 	orr.w	r3, r7, r2, lsl #16
    1940:	459a      	cmp	sl, r3
    1942:	d906      	bls.n	1952 <__divdi3+0x246>
    1944:	1e4a      	subs	r2, r1, #1
    1946:	199b      	adds	r3, r3, r6
    1948:	d233      	bcs.n	19b2 <__divdi3+0x2a6>
    194a:	459a      	cmp	sl, r3
    194c:	d931      	bls.n	19b2 <__divdi3+0x2a6>
    194e:	3902      	subs	r1, #2
    1950:	199b      	adds	r3, r3, r6
    1952:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
    1956:	0c0f      	lsrs	r7, r1, #16
    1958:	fa1f f88c 	uxth.w	r8, ip
    195c:	fb08 f607 	mul.w	r6, r8, r7
    1960:	b28a      	uxth	r2, r1
    1962:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
    1966:	fb08 f802 	mul.w	r8, r8, r2
    196a:	fb0c 6202 	mla	r2, ip, r2, r6
    196e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
    1972:	fb0c fc07 	mul.w	ip, ip, r7
    1976:	4296      	cmp	r6, r2
    1978:	bf88      	it	hi
    197a:	f50c 3c80 	addhi.w	ip, ip, #65536	; 0x10000
    197e:	ebca 0303 	rsb	r3, sl, r3
    1982:	eb0c 4c12 	add.w	ip, ip, r2, lsr #16
    1986:	4563      	cmp	r3, ip
    1988:	d30e      	bcc.n	19a8 <__divdi3+0x29c>
    198a:	d005      	beq.n	1998 <__divdi3+0x28c>
    198c:	2500      	movs	r5, #0
    198e:	e70d      	b.n	17ac <__divdi3+0xa0>
    1990:	460e      	mov	r6, r1
    1992:	e6ef      	b.n	1774 <__divdi3+0x68>
    1994:	461d      	mov	r5, r3
    1996:	e701      	b.n	179c <__divdi3+0x90>
    1998:	fa1f f888 	uxth.w	r8, r8
    199c:	fa00 f005 	lsl.w	r0, r0, r5
    19a0:	eb08 4502 	add.w	r5, r8, r2, lsl #16
    19a4:	42a8      	cmp	r0, r5
    19a6:	d2f1      	bcs.n	198c <__divdi3+0x280>
    19a8:	3901      	subs	r1, #1
    19aa:	2500      	movs	r5, #0
    19ac:	e6fe      	b.n	17ac <__divdi3+0xa0>
    19ae:	463d      	mov	r5, r7
    19b0:	e78f      	b.n	18d2 <__divdi3+0x1c6>
    19b2:	4611      	mov	r1, r2
    19b4:	e7cd      	b.n	1952 <__divdi3+0x246>
    19b6:	4688      	mov	r8, r1
    19b8:	e7b7      	b.n	192a <__divdi3+0x21e>
    19ba:	46b0      	mov	r8, r6
    19bc:	e775      	b.n	18aa <__divdi3+0x19e>
    19be:	3f02      	subs	r7, #2
    19c0:	18b6      	adds	r6, r6, r2
    19c2:	e72a      	b.n	181a <__divdi3+0x10e>
    19c4:	3902      	subs	r1, #2
    19c6:	e73c      	b.n	1842 <__divdi3+0x136>

000019c8 <__udivdi3>:
    19c8:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    19cc:	4614      	mov	r4, r2
    19ce:	4605      	mov	r5, r0
    19d0:	460e      	mov	r6, r1
    19d2:	2b00      	cmp	r3, #0
    19d4:	d13d      	bne.n	1a52 <__udivdi3+0x8a>
    19d6:	428a      	cmp	r2, r1
    19d8:	d949      	bls.n	1a6e <__udivdi3+0xa6>
    19da:	fab2 f782 	clz	r7, r2
    19de:	b147      	cbz	r7, 19f2 <__udivdi3+0x2a>
    19e0:	f1c7 0120 	rsb	r1, r7, #32
    19e4:	fa20 f201 	lsr.w	r2, r0, r1
    19e8:	fa06 f607 	lsl.w	r6, r6, r7
    19ec:	40bc      	lsls	r4, r7
    19ee:	4316      	orrs	r6, r2
    19f0:	40bd      	lsls	r5, r7
    19f2:	0c22      	lsrs	r2, r4, #16
    19f4:	fbb6 f0f2 	udiv	r0, r6, r2
    19f8:	0c2f      	lsrs	r7, r5, #16
    19fa:	b2a1      	uxth	r1, r4
    19fc:	fb02 6610 	mls	r6, r2, r0, r6
    1a00:	fb01 f300 	mul.w	r3, r1, r0
    1a04:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
    1a08:	42b3      	cmp	r3, r6
    1a0a:	d908      	bls.n	1a1e <__udivdi3+0x56>
    1a0c:	1e47      	subs	r7, r0, #1
    1a0e:	1936      	adds	r6, r6, r4
    1a10:	f080 80f8 	bcs.w	1c04 <__udivdi3+0x23c>
    1a14:	42b3      	cmp	r3, r6
    1a16:	f240 80f5 	bls.w	1c04 <__udivdi3+0x23c>
    1a1a:	3802      	subs	r0, #2
    1a1c:	1936      	adds	r6, r6, r4
    1a1e:	1af6      	subs	r6, r6, r3
    1a20:	fbb6 f3f2 	udiv	r3, r6, r2
    1a24:	fb02 6213 	mls	r2, r2, r3, r6
    1a28:	b2ad      	uxth	r5, r5
    1a2a:	fb01 f103 	mul.w	r1, r1, r3
    1a2e:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
    1a32:	4291      	cmp	r1, r2
    1a34:	d907      	bls.n	1a46 <__udivdi3+0x7e>
    1a36:	1e5e      	subs	r6, r3, #1
    1a38:	1912      	adds	r2, r2, r4
    1a3a:	f080 80e5 	bcs.w	1c08 <__udivdi3+0x240>
    1a3e:	4291      	cmp	r1, r2
    1a40:	f240 80e2 	bls.w	1c08 <__udivdi3+0x240>
    1a44:	3b02      	subs	r3, #2
    1a46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    1a4a:	2100      	movs	r1, #0
    1a4c:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    1a50:	4770      	bx	lr
    1a52:	428b      	cmp	r3, r1
    1a54:	d843      	bhi.n	1ade <__udivdi3+0x116>
    1a56:	fab3 f483 	clz	r4, r3
    1a5a:	2c00      	cmp	r4, #0
    1a5c:	d142      	bne.n	1ae4 <__udivdi3+0x11c>
    1a5e:	428b      	cmp	r3, r1
    1a60:	d302      	bcc.n	1a68 <__udivdi3+0xa0>
    1a62:	4282      	cmp	r2, r0
    1a64:	f200 80df 	bhi.w	1c26 <__udivdi3+0x25e>
    1a68:	2100      	movs	r1, #0
    1a6a:	2001      	movs	r0, #1
    1a6c:	e7ee      	b.n	1a4c <__udivdi3+0x84>
    1a6e:	b912      	cbnz	r2, 1a76 <__udivdi3+0xae>
    1a70:	2701      	movs	r7, #1
    1a72:	fbb7 f4f2 	udiv	r4, r7, r2
    1a76:	fab4 f284 	clz	r2, r4
    1a7a:	2a00      	cmp	r2, #0
    1a7c:	f040 8088 	bne.w	1b90 <__udivdi3+0x1c8>
    1a80:	1b0a      	subs	r2, r1, r4
    1a82:	0c23      	lsrs	r3, r4, #16
    1a84:	b2a7      	uxth	r7, r4
    1a86:	2101      	movs	r1, #1
    1a88:	fbb2 f6f3 	udiv	r6, r2, r3
    1a8c:	fb03 2216 	mls	r2, r3, r6, r2
    1a90:	ea4f 4c15 	mov.w	ip, r5, lsr #16
    1a94:	fb07 f006 	mul.w	r0, r7, r6
    1a98:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
    1a9c:	4290      	cmp	r0, r2
    1a9e:	d907      	bls.n	1ab0 <__udivdi3+0xe8>
    1aa0:	1912      	adds	r2, r2, r4
    1aa2:	f106 3cff 	add.w	ip, r6, #4294967295
    1aa6:	d202      	bcs.n	1aae <__udivdi3+0xe6>
    1aa8:	4290      	cmp	r0, r2
    1aaa:	f200 80ce 	bhi.w	1c4a <__udivdi3+0x282>
    1aae:	4666      	mov	r6, ip
    1ab0:	1a12      	subs	r2, r2, r0
    1ab2:	fbb2 f0f3 	udiv	r0, r2, r3
    1ab6:	fb03 2310 	mls	r3, r3, r0, r2
    1aba:	b2ad      	uxth	r5, r5
    1abc:	fb07 f700 	mul.w	r7, r7, r0
    1ac0:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
    1ac4:	429f      	cmp	r7, r3
    1ac6:	d907      	bls.n	1ad8 <__udivdi3+0x110>
    1ac8:	1e42      	subs	r2, r0, #1
    1aca:	191b      	adds	r3, r3, r4
    1acc:	f080 809e 	bcs.w	1c0c <__udivdi3+0x244>
    1ad0:	429f      	cmp	r7, r3
    1ad2:	f240 809b 	bls.w	1c0c <__udivdi3+0x244>
    1ad6:	3802      	subs	r0, #2
    1ad8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    1adc:	e7b6      	b.n	1a4c <__udivdi3+0x84>
    1ade:	2100      	movs	r1, #0
    1ae0:	4608      	mov	r0, r1
    1ae2:	e7b3      	b.n	1a4c <__udivdi3+0x84>
    1ae4:	f1c4 0620 	rsb	r6, r4, #32
    1ae8:	fa22 f506 	lsr.w	r5, r2, r6
    1aec:	fa03 f304 	lsl.w	r3, r3, r4
    1af0:	432b      	orrs	r3, r5
    1af2:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    1af6:	fa21 f506 	lsr.w	r5, r1, r6
    1afa:	fa01 f104 	lsl.w	r1, r1, r4
    1afe:	fa20 f606 	lsr.w	r6, r0, r6
    1b02:	fbb5 f7fc 	udiv	r7, r5, ip
    1b06:	ea46 0a01 	orr.w	sl, r6, r1
    1b0a:	fa1f f883 	uxth.w	r8, r3
    1b0e:	fb0c 5517 	mls	r5, ip, r7, r5
    1b12:	ea4f 411a 	mov.w	r1, sl, lsr #16
    1b16:	fb08 f907 	mul.w	r9, r8, r7
    1b1a:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
    1b1e:	45a9      	cmp	r9, r5
    1b20:	fa02 f204 	lsl.w	r2, r2, r4
    1b24:	d903      	bls.n	1b2e <__udivdi3+0x166>
    1b26:	1e7e      	subs	r6, r7, #1
    1b28:	18ed      	adds	r5, r5, r3
    1b2a:	d37f      	bcc.n	1c2c <__udivdi3+0x264>
    1b2c:	4637      	mov	r7, r6
    1b2e:	ebc9 0105 	rsb	r1, r9, r5
    1b32:	fbb1 f6fc 	udiv	r6, r1, ip
    1b36:	fb0c 1516 	mls	r5, ip, r6, r1
    1b3a:	fa1f fa8a 	uxth.w	sl, sl
    1b3e:	fb08 f806 	mul.w	r8, r8, r6
    1b42:	ea4a 4105 	orr.w	r1, sl, r5, lsl #16
    1b46:	4588      	cmp	r8, r1
    1b48:	d903      	bls.n	1b52 <__udivdi3+0x18a>
    1b4a:	1e75      	subs	r5, r6, #1
    1b4c:	18c9      	adds	r1, r1, r3
    1b4e:	d373      	bcc.n	1c38 <__udivdi3+0x270>
    1b50:	462e      	mov	r6, r5
    1b52:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
    1b56:	0c37      	lsrs	r7, r6, #16
    1b58:	fa1f fc82 	uxth.w	ip, r2
    1b5c:	fb0c f507 	mul.w	r5, ip, r7
    1b60:	0c12      	lsrs	r2, r2, #16
    1b62:	b2b3      	uxth	r3, r6
    1b64:	fb0c fc03 	mul.w	ip, ip, r3
    1b68:	fb02 5303 	mla	r3, r2, r3, r5
    1b6c:	eb03 431c 	add.w	r3, r3, ip, lsr #16
    1b70:	fb02 f207 	mul.w	r2, r2, r7
    1b74:	429d      	cmp	r5, r3
    1b76:	bf88      	it	hi
    1b78:	f502 3280 	addhi.w	r2, r2, #65536	; 0x10000
    1b7c:	ebc8 0101 	rsb	r1, r8, r1
    1b80:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    1b84:	4291      	cmp	r1, r2
    1b86:	d34b      	bcc.n	1c20 <__udivdi3+0x258>
    1b88:	d042      	beq.n	1c10 <__udivdi3+0x248>
    1b8a:	4630      	mov	r0, r6
    1b8c:	2100      	movs	r1, #0
    1b8e:	e75d      	b.n	1a4c <__udivdi3+0x84>
    1b90:	4094      	lsls	r4, r2
    1b92:	f1c2 0520 	rsb	r5, r2, #32
    1b96:	fa21 f605 	lsr.w	r6, r1, r5
    1b9a:	0c23      	lsrs	r3, r4, #16
    1b9c:	fa20 f705 	lsr.w	r7, r0, r5
    1ba0:	fa01 f102 	lsl.w	r1, r1, r2
    1ba4:	fbb6 fcf3 	udiv	ip, r6, r3
    1ba8:	4339      	orrs	r1, r7
    1baa:	0c0d      	lsrs	r5, r1, #16
    1bac:	b2a7      	uxth	r7, r4
    1bae:	fb03 661c 	mls	r6, r3, ip, r6
    1bb2:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    1bb6:	fb07 f80c 	mul.w	r8, r7, ip
    1bba:	45b0      	cmp	r8, r6
    1bbc:	fa00 f502 	lsl.w	r5, r0, r2
    1bc0:	d908      	bls.n	1bd4 <__udivdi3+0x20c>
    1bc2:	1936      	adds	r6, r6, r4
    1bc4:	f10c 30ff 	add.w	r0, ip, #4294967295
    1bc8:	d23d      	bcs.n	1c46 <__udivdi3+0x27e>
    1bca:	45b0      	cmp	r8, r6
    1bcc:	d93b      	bls.n	1c46 <__udivdi3+0x27e>
    1bce:	f1ac 0c02 	sub.w	ip, ip, #2
    1bd2:	1936      	adds	r6, r6, r4
    1bd4:	ebc8 0206 	rsb	r2, r8, r6
    1bd8:	fbb2 f0f3 	udiv	r0, r2, r3
    1bdc:	fb03 2610 	mls	r6, r3, r0, r2
    1be0:	b28a      	uxth	r2, r1
    1be2:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
    1be6:	fb07 f100 	mul.w	r1, r7, r0
    1bea:	4291      	cmp	r1, r2
    1bec:	d906      	bls.n	1bfc <__udivdi3+0x234>
    1bee:	1e46      	subs	r6, r0, #1
    1bf0:	1912      	adds	r2, r2, r4
    1bf2:	d226      	bcs.n	1c42 <__udivdi3+0x27a>
    1bf4:	4291      	cmp	r1, r2
    1bf6:	d924      	bls.n	1c42 <__udivdi3+0x27a>
    1bf8:	3802      	subs	r0, #2
    1bfa:	1912      	adds	r2, r2, r4
    1bfc:	1a52      	subs	r2, r2, r1
    1bfe:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
    1c02:	e741      	b.n	1a88 <__udivdi3+0xc0>
    1c04:	4638      	mov	r0, r7
    1c06:	e70a      	b.n	1a1e <__udivdi3+0x56>
    1c08:	4633      	mov	r3, r6
    1c0a:	e71c      	b.n	1a46 <__udivdi3+0x7e>
    1c0c:	4610      	mov	r0, r2
    1c0e:	e763      	b.n	1ad8 <__udivdi3+0x110>
    1c10:	fa1f fc8c 	uxth.w	ip, ip
    1c14:	fa00 f004 	lsl.w	r0, r0, r4
    1c18:	eb0c 4303 	add.w	r3, ip, r3, lsl #16
    1c1c:	4298      	cmp	r0, r3
    1c1e:	d2b4      	bcs.n	1b8a <__udivdi3+0x1c2>
    1c20:	1e70      	subs	r0, r6, #1
    1c22:	2100      	movs	r1, #0
    1c24:	e712      	b.n	1a4c <__udivdi3+0x84>
    1c26:	4621      	mov	r1, r4
    1c28:	4620      	mov	r0, r4
    1c2a:	e70f      	b.n	1a4c <__udivdi3+0x84>
    1c2c:	45a9      	cmp	r9, r5
    1c2e:	f67f af7d 	bls.w	1b2c <__udivdi3+0x164>
    1c32:	3f02      	subs	r7, #2
    1c34:	18ed      	adds	r5, r5, r3
    1c36:	e77a      	b.n	1b2e <__udivdi3+0x166>
    1c38:	4588      	cmp	r8, r1
    1c3a:	d989      	bls.n	1b50 <__udivdi3+0x188>
    1c3c:	3e02      	subs	r6, #2
    1c3e:	18c9      	adds	r1, r1, r3
    1c40:	e787      	b.n	1b52 <__udivdi3+0x18a>
    1c42:	4630      	mov	r0, r6
    1c44:	e7da      	b.n	1bfc <__udivdi3+0x234>
    1c46:	4684      	mov	ip, r0
    1c48:	e7c4      	b.n	1bd4 <__udivdi3+0x20c>
    1c4a:	3e02      	subs	r6, #2
    1c4c:	1912      	adds	r2, r2, r4
    1c4e:	e72f      	b.n	1ab0 <__udivdi3+0xe8>

00001c50 <m0_bin>:
    1c50:	20000fe0 	.word	0x20000fe0
    1c54:	2000e555 	.word	0x2000e555
    1c58:	2000e551 	.word	0x2000e551
    1c5c:	2000ccd5 	.word	0x2000ccd5
	...
    1c7c:	2000e551 	.word	0x2000e551
	...
    1c88:	2000e551 	.word	0x2000e551
    1c8c:	2000e551 	.word	0x2000e551
    1c90:	2000e54d 	.word	0x2000e54d
    1c94:	2000c1d9 	.word	0x2000c1d9
    1c98:	2000e54d 	.word	0x2000e54d
    1c9c:	00000000 	.word	0x00000000
    1ca0:	2000e54d 	.word	0x2000e54d
    1ca4:	2000e54d 	.word	0x2000e54d
    1ca8:	2000e54d 	.word	0x2000e54d
    1cac:	2000e54d 	.word	0x2000e54d
    1cb0:	2000db25 	.word	0x2000db25
    1cb4:	2000e54d 	.word	0x2000e54d
    1cb8:	2000e54d 	.word	0x2000e54d
    1cbc:	2000e54d 	.word	0x2000e54d
    1cc0:	2000e54d 	.word	0x2000e54d
    1cc4:	2000e54d 	.word	0x2000e54d
    1cc8:	2000e54d 	.word	0x2000e54d
    1ccc:	2000e54d 	.word	0x2000e54d
    1cd0:	2000e54d 	.word	0x2000e54d
    1cd4:	2000e54d 	.word	0x2000e54d
    1cd8:	2000e54d 	.word	0x2000e54d
    1cdc:	2000e54d 	.word	0x2000e54d
    1ce0:	2000e54d 	.word	0x2000e54d
    1ce4:	2000e54d 	.word	0x2000e54d
    1ce8:	2000e54d 	.word	0x2000e54d
    1cec:	2000e54d 	.word	0x2000e54d
    1cf0:	2000e54d 	.word	0x2000e54d
    1cf4:	2000e54d 	.word	0x2000e54d
    1cf8:	2000e54d 	.word	0x2000e54d
    1cfc:	2000e54d 	.word	0x2000e54d
    1d00:	2000e54d 	.word	0x2000e54d
    1d04:	2000e54d 	.word	0x2000e54d
    1d08:	2000e54d 	.word	0x2000e54d
    1d0c:	2000e54d 	.word	0x2000e54d
    1d10:	6903b508 	.word	0x6903b508
    1d14:	28006858 	.word	0x28006858
    1d18:	f000d001 	.word	0xf000d001
    1d1c:	f000f915 	.word	0xf000f915
    1d20:	bd08f8f9 	.word	0xbd08f8f9
    1d24:	22014b05 	.word	0x22014b05
    1d28:	70486819 	.word	0x70486819
    1d2c:	f3bf700a 	.word	0xf3bf700a
    1d30:	bf408f4f 	.word	0xbf408f4f
    1d34:	28006808 	.word	0x28006808
    1d38:	4770d1fc 	.word	0x4770d1fc
    1d3c:	2000ec6c 	.word	0x2000ec6c
    1d40:	22014b05 	.word	0x22014b05
    1d44:	70486819 	.word	0x70486819
    1d48:	f3bf700a 	.word	0xf3bf700a
    1d4c:	bf408f4f 	.word	0xbf408f4f
    1d50:	28006808 	.word	0x28006808
    1d54:	4770d1fc 	.word	0x4770d1fc
    1d58:	2000ec70 	.word	0x2000ec70
    1d5c:	4b20b538 	.word	0x4b20b538
    1d60:	68181c05 	.word	0x68181c05
    1d64:	70452201 	.word	0x70452201
    1d68:	f3bf7002 	.word	0xf3bf7002
    1d6c:	bf408f4f 	.word	0xbf408f4f
    1d70:	29006801 	.word	0x29006801
    1d74:	4c1bd1fc 	.word	0x4c1bd1fc
    1d78:	8b186823 	.word	0x8b186823
    1d7c:	f84ef002 	.word	0xf84ef002
    1d80:	8b406820 	.word	0x8b406820
    1d84:	f864f002 	.word	0xf864f002
    1d88:	2a00b26a 	.word	0x2a00b26a
    1d8c:	207fda12 	.word	0x207fda12
    1d90:	40056821 	.word	0x40056821
    1d94:	43552218 	.word	0x43552218
    1d98:	31041c08 	.word	0x31041c08
    1d9c:	30486fcb 	.word	0x30486fcb
    1da0:	69091959 	.word	0x69091959
    1da4:	f820f001 	.word	0xf820f001
    1da8:	1c206824 	.word	0x1c206824
    1dac:	30483404 	.word	0x30483404
    1db0:	e00d6fe3 	.word	0xe00d6fe3
    1db4:	68212318 	.word	0x68212318
    1db8:	6f8a435d 	.word	0x6f8a435d
    1dbc:	19511c08 	.word	0x19511c08
    1dc0:	69093048 	.word	0x69093048
    1dc4:	f810f001 	.word	0xf810f001
    1dc8:	1c206824 	.word	0x1c206824
    1dcc:	30486fa3 	.word	0x30486fa3
    1dd0:	7d29195d 	.word	0x7d29195d
    1dd4:	f828f001 	.word	0xf828f001
    1dd8:	20014a03 	.word	0x20014a03
    1ddc:	bd386010 	.word	0xbd386010
    1de0:	2000ec78 	.word	0x2000ec78
    1de4:	2000ef28 	.word	0x2000ef28
    1de8:	2000f000 	.word	0x2000f000
    1dec:	1c04b510 	.word	0x1c04b510
    1df0:	f840f001 	.word	0xf840f001
    1df4:	22024b0a 	.word	0x22024b0a
    1df8:	70446818 	.word	0x70446818
    1dfc:	f3bf7002 	.word	0xf3bf7002
    1e00:	bf408f4f 	.word	0xbf408f4f
    1e04:	29006801 	.word	0x29006801
    1e08:	4c06d1fc 	.word	0x4c06d1fc
    1e0c:	8b186823 	.word	0x8b186823
    1e10:	f804f002 	.word	0xf804f002
    1e14:	8b806820 	.word	0x8b806820
    1e18:	f81af002 	.word	0xf81af002
    1e1c:	46c0bd10 	.word	0x46c0bd10
    1e20:	2000ec78 	.word	0x2000ec78
    1e24:	2000ef28 	.word	0x2000ef28
    1e28:	22004b01 	.word	0x22004b01
    1e2c:	4770601a 	.word	0x4770601a
    1e30:	40043130 	.word	0x40043130
    1e34:	b08cb570 	.word	0xb08cb570
    1e38:	fc72f000 	.word	0xfc72f000
    1e3c:	ac014b27 	.word	0xac014b27
    1e40:	30486818 	.word	0x30486818
    1e44:	f84af001 	.word	0xf84af001
    1e48:	f0014825 	.word	0xf0014825
    1e4c:	f001feb5 	.word	0xf001feb5
    1e50:	4d24faf5 	.word	0x4d24faf5
    1e54:	1c292000 	.word	0x1c292000
    1e58:	fbeef001 	.word	0xfbeef001
    1e5c:	f0014822 	.word	0xf0014822
    1e60:	4822fd5f 	.word	0x4822fd5f
    1e64:	fd5cf001 	.word	0xfd5cf001
    1e68:	f0014821 	.word	0xf0014821
    1e6c:	4821fd59 	.word	0x4821fd59
    1e70:	fd56f001 	.word	0xfd56f001
    1e74:	f0014820 	.word	0xf0014820
    1e78:	4820fc35 	.word	0x4820fc35
    1e7c:	fc32f001 	.word	0xfc32f001
    1e80:	7020203a 	.word	0x7020203a
    1e84:	f0011c20 	.word	0xf0011c20
    1e88:	8b21fa4f 	.word	0x8b21fa4f
    1e8c:	d1032900 	.word	0xd1032900
    1e90:	6aa16a60 	.word	0x6aa16a60
    1e94:	fcc4f000 	.word	0xfcc4f000
    1e98:	21ff2008 	.word	0x21ff2008
    1e9c:	fa42f002 	.word	0xfa42f002
    1ea0:	1c012001 	.word	0x1c012001
    1ea4:	fa3ef002 	.word	0xfa3ef002
    1ea8:	f0022001 	.word	0xf0022001
    1eac:	1c28fa2f 	.word	0x1c28fa2f
    1eb0:	fc06f001 	.word	0xfc06f001
    1eb4:	4b134a12 	.word	0x4b134a12
    1eb8:	68164d13 	.word	0x68164d13
    1ebc:	68296818 	.word	0x68296818
    1ec0:	6834bf20 	.word	0x6834bf20
    1ec4:	680b6802 	.word	0x680b6802
    1ec8:	d0f9429c 	.word	0xd0f9429c
    1ecc:	48104e0f 	.word	0x48104e0f
    1ed0:	f00119a1 	.word	0xf00119a1
    1ed4:	682afdb1 	.word	0x682afdb1
    1ed8:	e7eb6014 	.word	0xe7eb6014
    1edc:	2000ef28 	.word	0x2000ef28
    1ee0:	2000c0c1 	.word	0x2000c0c1
    1ee4:	2000ee1c 	.word	0x2000ee1c
    1ee8:	2000ee48 	.word	0x2000ee48
    1eec:	2000ee68 	.word	0x2000ee68
    1ef0:	2000ee58 	.word	0x2000ee58
    1ef4:	2000eef0 	.word	0x2000eef0
    1ef8:	2000ee78 	.word	0x2000ee78
    1efc:	2000eec8 	.word	0x2000eec8
    1f00:	2000ec74 	.word	0x2000ec74
    1f04:	2000ec7c 	.word	0x2000ec7c
    1f08:	2000ec80 	.word	0x2000ec80
    1f0c:	20004000 	.word	0x20004000
    1f10:	2000ef00 	.word	0x2000ef00
    1f14:	1c04b538 	.word	0x1c04b538
    1f18:	fbf6f000 	.word	0xfbf6f000
    1f1c:	2c014d07 	.word	0x2c014d07
    1f20:	4807d106 	.word	0x4807d106
    1f24:	fbdef001 	.word	0xfbdef001
    1f28:	f7ff7828 	.word	0xf7ff7828
    1f2c:	e002ff17 	.word	0xe002ff17
    1f30:	f7ff7828 	.word	0xf7ff7828
    1f34:	4b03ff5b 	.word	0x4b03ff5b
    1f38:	bd38701c 	.word	0xbd38701c
    1f3c:	2000f500 	.word	0x2000f500
    1f40:	2000ef00 	.word	0x2000ef00
    1f44:	2000f004 	.word	0x2000f004
    1f48:	78184b01 	.word	0x78184b01
    1f4c:	46c04770 	.word	0x46c04770
    1f50:	2000f004 	.word	0x2000f004
    1f54:	7843b508 	.word	0x7843b508
    1f58:	d8062b1b 	.word	0xd8062b1b
    1f5c:	009b4a05 	.word	0x009b4a05
    1f60:	2b00589b 	.word	0x2b00589b
    1f64:	4798d004 	.word	0x4798d004
    1f68:	4248e003 	.word	0x4248e003
    1f6c:	e0004148 	.word	0xe0004148
    1f70:	bd082001 	.word	0xbd082001
    1f74:	2000f390 	.word	0x2000f390
    1f78:	2900b508 	.word	0x2900b508
    1f7c:	f000d101 	.word	0xf000d101
    1f80:	2000fcb7 	.word	0x2000fcb7
    1f84:	b570bd08 	.word	0xb570bd08
    1f88:	20001c05 	.word	0x20001c05
    1f8c:	42841e0c 	.word	0x42841e0c
    1f90:	886ed10d 	.word	0x886ed10d
    1f94:	1eb22001 	.word	0x1eb22001
    1f98:	d8082a0b 	.word	0xd8082a0b
    1f9c:	ffeaf000 	.word	0xffeaf000
    1fa0:	f0010430 	.word	0xf0010430
    1fa4:	69a8f8c7 	.word	0x69a8f8c7
    1fa8:	fd53f001 	.word	0xfd53f001
    1fac:	bd701c20 	.word	0xbd701c20
    1fb0:	2300b538 	.word	0x2300b538
    1fb4:	d1194299 	.word	0xd1194299
    1fb8:	23018881 	.word	0x23018881
    1fbc:	d81529ff 	.word	0xd81529ff
    1fc0:	429c8844 	.word	0x429c8844
    1fc4:	4d0ad812 	.word	0x4d0ad812
    1fc8:	1952094a 	.word	0x1952094a
    1fcc:	4029251f 	.word	0x4029251f
    1fd0:	408b0092 	.word	0x408b0092
    1fd4:	2c016811 	.word	0x2c016811
    1fd8:	430bd101 	.word	0x430bd101
    1fdc:	4399e001 	.word	0x4399e001
    1fe0:	60131c0b 	.word	0x60131c0b
    1fe4:	f0016980 	.word	0xf0016980
    1fe8:	2300fd34 	.word	0x2300fd34
    1fec:	bd381c18 	.word	0xbd381c18
    1ff0:	1003d800 	.word	0x1003d800
    1ff4:	1c05b538 	.word	0x1c05b538
    1ff8:	d1071e0c 	.word	0xd1071e0c
    1ffc:	ffbaf000 	.word	0xffbaf000
    2000:	f0011c20 	.word	0xf0011c20
    2004:	69a8f897 	.word	0x69a8f897
    2008:	fd23f001 	.word	0xfd23f001
    200c:	bd382000 	.word	0xbd382000
    2010:	1c04b5f8 	.word	0x1c04b5f8
    2014:	d12a2900 	.word	0xd12a2900
    2018:	88814b16 	.word	0x88814b16
    201c:	1c026818 	.word	0x1c026818
    2020:	88153276 	.word	0x88153276
    2024:	428d1c2e 	.word	0x428d1c2e
    2028:	1c0ed900 	.word	0x1c0ed900
    202c:	4912b2b2 	.word	0x4912b2b2
    2030:	d8022a40 	.word	0xd8022a40
    2034:	d0032a00 	.word	0xd0032a00
    2038:	2240e000 	.word	0x2240e000
    203c:	e0032300 	.word	0xe0032300
    2040:	69a0600d 	.word	0x69a0600d
    2044:	e00d2204 	.word	0xe00d2204
    2048:	da094293 	.word	0xda094293
    204c:	435e2618 	.word	0x435e2618
    2050:	009d6f87 	.word	0x009d6f87
    2054:	693719be 	.word	0x693719be
    2058:	007e3301 	.word	0x007e3301
    205c:	e7f3514e 	.word	0xe7f3514e
    2060:	009269a0 	.word	0x009269a0
    2064:	fce8f001 	.word	0xfce8f001
    2068:	f00169e0 	.word	0xf00169e0
    206c:	2000fcf2 	.word	0x2000fcf2
    2070:	46c0bdf8 	.word	0x46c0bdf8
    2074:	2000ef28 	.word	0x2000ef28
    2078:	2000f400 	.word	0x2000f400
    207c:	b5382200 	.word	0xb5382200
    2080:	1e0d1c04 	.word	0x1e0d1c04
    2084:	d11a4295 	.word	0xd11a4295
    2088:	22018883 	.word	0x22018883
    208c:	d8162bff 	.word	0xd8162bff
    2090:	0959480c 	.word	0x0959480c
    2094:	00881809 	.word	0x00881809
    2098:	201f6801 	.word	0x201f6801
    209c:	1c104003 	.word	0x1c104003
    20a0:	1c034098 	.word	0x1c034098
    20a4:	1e59400b 	.word	0x1e59400b
    20a8:	1c21418b 	.word	0x1c21418b
    20ac:	31087223 	.word	0x31087223
    20b0:	f00169a0 	.word	0xf00169a0
    20b4:	69e0fcc1 	.word	0x69e0fcc1
    20b8:	fccbf001 	.word	0xfccbf001
    20bc:	1c101c2a 	.word	0x1c101c2a
    20c0:	46c0bd38 	.word	0x46c0bd38
    20c4:	1003d800 	.word	0x1003d800
    20c8:	2500b570 	.word	0x2500b570
    20cc:	1e0e1c04 	.word	0x1e0e1c04
    20d0:	d11742ae 	.word	0xd11742ae
    20d4:	2b048883 	.word	0x2b048883
    20d8:	88c2d108 	.word	0x88c2d108
    20dc:	6980490a 	.word	0x6980490a
    20e0:	fcaaf001 	.word	0xfcaaf001
    20e4:	f00169e0 	.word	0xf00169e0
    20e8:	e00bfcb4 	.word	0xe00bfcb4
    20ec:	2b052501 	.word	0x2b052501
    20f0:	88c2d108 	.word	0x88c2d108
    20f4:	69804905 	.word	0x69804905
    20f8:	fc9ef001 	.word	0xfc9ef001
    20fc:	f00169e0 	.word	0xf00169e0
    2100:	1c35fca8 	.word	0x1c35fca8
    2104:	bd701c28 	.word	0xbd701c28
    2108:	2000ecaf 	.word	0x2000ecaf
    210c:	2000ed82 	.word	0x2000ed82
    2110:	1c04b510 	.word	0x1c04b510
    2114:	d1092900 	.word	0xd1092900
    2118:	1c017201 	.word	0x1c017201
    211c:	69803108 	.word	0x69803108
    2120:	f0012201 	.word	0xf0012201
    2124:	69e0fc89 	.word	0x69e0fc89
    2128:	fc93f001 	.word	0xfc93f001
    212c:	bd102000 	.word	0xbd102000
    2130:	1c04b510 	.word	0x1c04b510
    2134:	d10a2900 	.word	0xd10a2900
    2138:	2b018883 	.word	0x2b018883
    213c:	f000d102 	.word	0xf000d102
    2140:	e001fbdd 	.word	0xe001fbdd
    2144:	fbe4f000 	.word	0xfbe4f000
    2148:	f00169a0 	.word	0xf00169a0
    214c:	2000fc82 	.word	0x2000fc82
    2150:	0000bd10 	.word	0x0000bd10
    2154:	1c04b510 	.word	0x1c04b510
    2158:	d10f2900 	.word	0xd10f2900
    215c:	79214b08 	.word	0x79214b08
    2160:	30486818 	.word	0x30486818
    2164:	fde2f000 	.word	0xfde2f000
    2168:	72201c21 	.word	0x72201c21
    216c:	69a03108 	.word	0x69a03108
    2170:	f0012201 	.word	0xf0012201
    2174:	69e0fc61 	.word	0x69e0fc61
    2178:	fc6bf001 	.word	0xfc6bf001
    217c:	bd102000 	.word	0xbd102000
    2180:	2000ef28 	.word	0x2000ef28
    2184:	1c04b510 	.word	0x1c04b510
    2188:	d10f2900 	.word	0xd10f2900
    218c:	79214b08 	.word	0x79214b08
    2190:	30486818 	.word	0x30486818
    2194:	fdc1f000 	.word	0xfdc1f000
    2198:	72201c21 	.word	0x72201c21
    219c:	69a03108 	.word	0x69a03108
    21a0:	f0012201 	.word	0xf0012201
    21a4:	69e0fc49 	.word	0x69e0fc49
    21a8:	fc53f001 	.word	0xfc53f001
    21ac:	bd102000 	.word	0xbd102000
    21b0:	2000ef28 	.word	0x2000ef28
    21b4:	1c04b510 	.word	0x1c04b510
    21b8:	d10f2900 	.word	0xd10f2900
    21bc:	79214b08 	.word	0x79214b08
    21c0:	30486818 	.word	0x30486818
    21c4:	fda2f000 	.word	0xfda2f000
    21c8:	72201c21 	.word	0x72201c21
    21cc:	69a03108 	.word	0x69a03108
    21d0:	f0012201 	.word	0xf0012201
    21d4:	69e0fc31 	.word	0x69e0fc31
    21d8:	fc3bf001 	.word	0xfc3bf001
    21dc:	bd102000 	.word	0xbd102000
    21e0:	2000ef28 	.word	0x2000ef28
    21e4:	1c04b510 	.word	0x1c04b510
    21e8:	d10f2900 	.word	0xd10f2900
    21ec:	79214b08 	.word	0x79214b08
    21f0:	30486818 	.word	0x30486818
    21f4:	fd83f000 	.word	0xfd83f000
    21f8:	72201c21 	.word	0x72201c21
    21fc:	69a03108 	.word	0x69a03108
    2200:	f0012201 	.word	0xf0012201
    2204:	69e0fc19 	.word	0x69e0fc19
    2208:	fc23f001 	.word	0xfc23f001
    220c:	bd102000 	.word	0xbd102000
    2210:	2000ef28 	.word	0x2000ef28
    2214:	1c04b510 	.word	0x1c04b510
    2218:	d10f2900 	.word	0xd10f2900
    221c:	79214b08 	.word	0x79214b08
    2220:	30486818 	.word	0x30486818
    2224:	fd64f000 	.word	0xfd64f000
    2228:	72201c21 	.word	0x72201c21
    222c:	69a03108 	.word	0x69a03108
    2230:	f0012201 	.word	0xf0012201
    2234:	69e0fc01 	.word	0x69e0fc01
    2238:	fc0bf001 	.word	0xfc0bf001
    223c:	bd102000 	.word	0xbd102000
    2240:	2000ef28 	.word	0x2000ef28
    2244:	1c04b510 	.word	0x1c04b510
    2248:	d1052900 	.word	0xd1052900
    224c:	22044909 	.word	0x22044909
    2250:	f00169c0 	.word	0xf00169c0
    2254:	e00bfbf1 	.word	0xe00bfbf1
    2258:	d1092901 	.word	0xd1092901
    225c:	49054b06 	.word	0x49054b06
    2260:	68096818 	.word	0x68096818
    2264:	f0003048 	.word	0xf0003048
    2268:	69a0fcef 	.word	0x69a0fcef
    226c:	fbf1f001 	.word	0xfbf1f001
    2270:	bd102000 	.word	0xbd102000
    2274:	2000f388 	.word	0x2000f388
    2278:	2000ef28 	.word	0x2000ef28
    227c:	1c04b570 	.word	0x1c04b570
    2280:	42812000 	.word	0x42812000
    2284:	88a3d155 	.word	0x88a3d155
    2288:	2b3f4a2a 	.word	0x2b3f4a2a
    228c:	6810d806 	.word	0x6810d806
    2290:	88013076 	.word	0x88013076
    2294:	42992001 	.word	0x42992001
    2298:	e04adc2a 	.word	0xe04adc2a
    229c:	681220fa 	.word	0x681220fa
    22a0:	43580080 	.word	0x43580080
    22a4:	33761c13 	.word	0x33761c13
    22a8:	4299881b 	.word	0x4299881b
    22ac:	2518da0c 	.word	0x2518da0c
    22b0:	6f96434d 	.word	0x6f96434d
    22b4:	692e1975 	.word	0x692e1975
    22b8:	428500b5 	.word	0x428500b5
    22bc:	4a1ed102 	.word	0x4a1ed102
    22c0:	e01a7011 	.word	0xe01a7011
    22c4:	e7f03101 	.word	0xe7f03101
    22c8:	317e1c11 	.word	0x317e1c11
    22cc:	23008809 	.word	0x23008809
    22d0:	3301e000 	.word	0x3301e000
    22d4:	da0e428b 	.word	0xda0e428b
    22d8:	6fee1d15 	.word	0x6fee1d15
    22dc:	435d2518 	.word	0x435d2518
    22e0:	69351976 	.word	0x69351976
    22e4:	428600ae 	.word	0x428600ae
    22e8:	2080d1f3 	.word	0x2080d1f3
    22ec:	430b4241 	.word	0x430b4241
    22f0:	70334e11 	.word	0x70334e11
    22f4:	2001e001 	.word	0x2001e001
    22f8:	f7ffe01b 	.word	0xf7ffe01b
    22fc:	4d0efe25 	.word	0x4d0efe25
    2300:	2e011e06 	.word	0x2e011e06
    2304:	7828d102 	.word	0x7828d102
    2308:	fd70f7ff 	.word	0xfd70f7ff
    230c:	f7ff7828 	.word	0xf7ff7828
    2310:	2e01fd09 	.word	0x2e01fd09
    2314:	7828d102 	.word	0x7828d102
    2318:	fd20f7ff 	.word	0xfd20f7ff
    231c:	1c212201 	.word	0x1c212201
    2320:	31087222 	.word	0x31087222
    2324:	f00169a0 	.word	0xf00169a0
    2328:	69e0fb87 	.word	0x69e0fb87
    232c:	fb91f001 	.word	0xfb91f001
    2330:	bd702000 	.word	0xbd702000
    2334:	2000ef28 	.word	0x2000ef28
    2338:	2000f500 	.word	0x2000f500
    233c:	1c04b570 	.word	0x1c04b570
    2340:	42812000 	.word	0x42812000
    2344:	88a3d121 	.word	0x88a3d121
    2348:	42832001 	.word	0x42832001
    234c:	b2ded81d 	.word	0xb2ded81d
    2350:	fdfaf7ff 	.word	0xfdfaf7ff
    2354:	2d011e05 	.word	0x2d011e05
    2358:	480cd103 	.word	0x480cd103
    235c:	f7ff7800 	.word	0xf7ff7800
    2360:	1c30fd45 	.word	0x1c30fd45
    2364:	fcecf7ff 	.word	0xfcecf7ff
    2368:	d1032d01 	.word	0xd1032d01
    236c:	78084907 	.word	0x78084907
    2370:	fcf4f7ff 	.word	0xfcf4f7ff
    2374:	1c212201 	.word	0x1c212201
    2378:	31087222 	.word	0x31087222
    237c:	f00169a0 	.word	0xf00169a0
    2380:	69e0fb5b 	.word	0x69e0fb5b
    2384:	fb65f001 	.word	0xfb65f001
    2388:	bd702000 	.word	0xbd702000
    238c:	2000f500 	.word	0x2000f500
    2390:	2500b570 	.word	0x2500b570
    2394:	1c06b092 	.word	0x1c06b092
    2398:	d12642a9 	.word	0xd12642a9
    239c:	2336ac07 	.word	0x2336ac07
    23a0:	70231c20 	.word	0x70231c20
    23a4:	ffc0f000 	.word	0xffc0f000
    23a8:	42a88b20 	.word	0x42a88b20
    23ac:	2501d001 	.word	0x2501d001
    23b0:	69e1e01b 	.word	0x69e1e01b
    23b4:	233a6a22 	.word	0x233a6a22
    23b8:	91011c20 	.word	0x91011c20
    23bc:	70239202 	.word	0x70239202
    23c0:	ffb2f000 	.word	0xffb2f000
    23c4:	28008b20 	.word	0x28008b20
    23c8:	69e1d1f1 	.word	0x69e1d1f1
    23cc:	6a636a22 	.word	0x6a636a22
    23d0:	91036aa4 	.word	0x91036aa4
    23d4:	69b09204 	.word	0x69b09204
    23d8:	2218a901 	.word	0x2218a901
    23dc:	94069305 	.word	0x94069305
    23e0:	fb2af001 	.word	0xfb2af001
    23e4:	f00169f0 	.word	0xf00169f0
    23e8:	1c28fb34 	.word	0x1c28fb34
    23ec:	bd70b012 	.word	0xbd70b012
    23f0:	1c05b538 	.word	0x1c05b538
    23f4:	d1222900 	.word	0xd1222900
    23f8:	22004c12 	.word	0x22004c12
    23fc:	2080190b 	.word	0x2080190b
    2400:	701a3101 	.word	0x701a3101
    2404:	42990043 	.word	0x42990043
    2408:	490fd1f6 	.word	0x490fd1f6
    240c:	68091c20 	.word	0x68091c20
    2410:	f0023108 	.word	0xf0023108
    2414:	1c20f8b5 	.word	0x1c20f8b5
    2418:	f8baf002 	.word	0xf8baf002
    241c:	1900490b 	.word	0x1900490b
    2420:	f8aef002 	.word	0xf8aef002
    2424:	f0021c20 	.word	0xf0021c20
    2428:	1d02f8b3 	.word	0x1d02f8b3
    242c:	43822003 	.word	0x43822003
    2430:	69a81c21 	.word	0x69a81c21
    2434:	fb00f001 	.word	0xfb00f001
    2438:	f00169e8 	.word	0xf00169e8
    243c:	2000fb0a 	.word	0x2000fb0a
    2440:	46c0bd38 	.word	0x46c0bd38
    2444:	2000f400 	.word	0x2000f400
    2448:	2000ef28 	.word	0x2000ef28
    244c:	2000e950 	.word	0x2000e950
    2450:	1c05b5f8 	.word	0x1c05b5f8
    2454:	d1312900 	.word	0xd1312900
    2458:	884788c4 	.word	0x884788c4
    245c:	26808882 	.word	0x26808882
    2460:	40862001 	.word	0x40862001
    2464:	d83642b4 	.word	0xd83642b4
    2468:	43100438 	.word	0x43100438
    246c:	19072380 	.word	0x19072380
    2470:	035a4e19 	.word	0x035a4e19
    2474:	d9174297 	.word	0xd9174297
    2478:	d90d2c03 	.word	0xd90d2c03
    247c:	1c272303 	.word	0x1c272303
    2480:	d109401f 	.word	0xd109401f
    2484:	d1084003 	.word	0xd1084003
    2488:	009a08a1 	.word	0x009a08a1
    248c:	33015817 	.word	0x33015817
    2490:	428b50b7 	.word	0x428b50b7
    2494:	e00bd3f9 	.word	0xe00bd3f9
    2498:	1c39e000 	.word	0x1c39e000
    249c:	d20742a1 	.word	0xd20742a1
    24a0:	54725c0a 	.word	0x54725c0a
    24a4:	e7f93101 	.word	0xe7f93101
    24a8:	1c321c21 	.word	0x1c321c21
    24ac:	fef2f000 	.word	0xfef2f000
    24b0:	1c3169a8 	.word	0x1c3169a8
    24b4:	f0011c22 	.word	0xf0011c22
    24b8:	e00bfabf 	.word	0xe00bfabf
    24bc:	29012000 	.word	0x29012000
    24c0:	88ead109 	.word	0x88ead109
    24c4:	1c082380 	.word	0x1c082380
    24c8:	428a0059 	.word	0x428a0059
    24cc:	69e8d803 	.word	0x69e8d803
    24d0:	fabff001 	.word	0xfabff001
    24d4:	bdf82000 	.word	0xbdf82000
    24d8:	2000f400 	.word	0x2000f400
    24dc:	1c04b570 	.word	0x1c04b570
    24e0:	d1171e0d 	.word	0xd1171e0d
    24e4:	230188e2 	.word	0x230188e2
    24e8:	88402680 	.word	0x88402680
    24ec:	409e88a1 	.word	0x409e88a1
    24f0:	d82a42b2 	.word	0xd82a42b2
    24f4:	20800405 	.word	0x20800405
    24f8:	0341430d 	.word	0x0341430d
    24fc:	d824428d 	.word	0xd824428d
    2500:	428e18ae 	.word	0x428e18ae
    2504:	4912d821 	.word	0x4912d821
    2508:	f00169e0 	.word	0xf00169e0
    250c:	f000fa95 	.word	0xf000fa95
    2510:	e019fd31 	.word	0xe019fd31
    2514:	29012300 	.word	0x29012300
    2518:	88e1d117 	.word	0x88e1d117
    251c:	1c2b2680 	.word	0x1c2b2680
    2520:	88a28840 	.word	0x88a28840
    2524:	42a90075 	.word	0x42a90075
    2528:	0400d80f 	.word	0x0400d80f
    252c:	22804310 	.word	0x22804310
    2530:	42b00356 	.word	0x42b00356
    2534:	1845d809 	.word	0x1845d809
    2538:	d80642b5 	.word	0xd80642b5
    253c:	f0004a04 	.word	0xf0004a04
    2540:	69a0fe69 	.word	0x69a0fe69
    2544:	fa85f001 	.word	0xfa85f001
    2548:	1c182300 	.word	0x1c182300
    254c:	46c0bd70 	.word	0x46c0bd70
    2550:	2000f400 	.word	0x2000f400
    2554:	2500b570 	.word	0x2500b570
    2558:	1e0e1c04 	.word	0x1e0e1c04
    255c:	d11442ae 	.word	0xd11442ae
    2560:	25018881 	.word	0x25018881
    2564:	d81029ff 	.word	0xd81029ff
    2568:	b2c94b09 	.word	0xb2c94b09
    256c:	30486818 	.word	0x30486818
    2570:	faf4f000 	.word	0xfaf4f000
    2574:	1c2a1c21 	.word	0x1c2a1c21
    2578:	31087220 	.word	0x31087220
    257c:	f00169a0 	.word	0xf00169a0
    2580:	69e0fa5b 	.word	0x69e0fa5b
    2584:	fa65f001 	.word	0xfa65f001
    2588:	1c281c35 	.word	0x1c281c35
    258c:	46c0bd70 	.word	0x46c0bd70
    2590:	2000ef28 	.word	0x2000ef28
    2594:	1c04b538 	.word	0x1c04b538
    2598:	1e0d2000 	.word	0x1e0d2000
    259c:	d1114285 	.word	0xd1114285
    25a0:	200188a1 	.word	0x200188a1
    25a4:	d80d29ff 	.word	0xd80d29ff
    25a8:	2aff8862 	.word	0x2aff8862
    25ac:	4b06d80a 	.word	0x4b06d80a
    25b0:	6818b2c9 	.word	0x6818b2c9
    25b4:	3048b2d2 	.word	0x3048b2d2
    25b8:	fa8ef000 	.word	0xfa8ef000
    25bc:	f00169a0 	.word	0xf00169a0
    25c0:	1c28fa48 	.word	0x1c28fa48
    25c4:	46c0bd38 	.word	0x46c0bd38
    25c8:	2000ef28 	.word	0x2000ef28
    25cc:	2500b570 	.word	0x2500b570
    25d0:	1e0e1c04 	.word	0x1e0e1c04
    25d4:	d11142ae 	.word	0xd11142ae
    25d8:	25018880 	.word	0x25018880
    25dc:	d80d28ff 	.word	0xd80d28ff
    25e0:	f000b2c0 	.word	0xf000b2c0
    25e4:	1c21f9c0 	.word	0x1c21f9c0
    25e8:	72201c2a 	.word	0x72201c2a
    25ec:	69a03108 	.word	0x69a03108
    25f0:	fa22f001 	.word	0xfa22f001
    25f4:	f00169e0 	.word	0xf00169e0
    25f8:	1c35fa2c 	.word	0x1c35fa2c
    25fc:	bd701c28 	.word	0xbd701c28
    2600:	1c04b538 	.word	0x1c04b538
    2604:	1e0d2000 	.word	0x1e0d2000
    2608:	d10e4285 	.word	0xd10e4285
    260c:	200188a3 	.word	0x200188a3
    2610:	d80a2bff 	.word	0xd80a2bff
    2614:	29ff8861 	.word	0x29ff8861
    2618:	b2d8d807 	.word	0xb2d8d807
    261c:	f000b2c9 	.word	0xf000b2c9
    2620:	69a0f991 	.word	0x69a0f991
    2624:	fa15f001 	.word	0xfa15f001
    2628:	bd381c28 	.word	0xbd381c28
    262c:	2300b538 	.word	0x2300b538
    2630:	1e0c1c05 	.word	0x1e0c1c05
    2634:	d10a429c 	.word	0xd10a429c
    2638:	23018840 	.word	0x23018840
    263c:	d8064298 	.word	0xd8064298
    2640:	f7ffb2c0 	.word	0xf7ffb2c0
    2644:	69a8fc67 	.word	0x69a8fc67
    2648:	fa03f001 	.word	0xfa03f001
    264c:	1c181c23 	.word	0x1c181c23
    2650:	0000bd38 	.word	0x0000bd38
    2654:	2300b538 	.word	0x2300b538
    2658:	d11b4299 	.word	0xd11b4299
    265c:	23018882 	.word	0x23018882
    2660:	d8172aff 	.word	0xd8172aff
    2664:	429c8844 	.word	0x429c8844
    2668:	4d0bd814 	.word	0x4d0bd814
    266c:	19490951 	.word	0x19490951
    2670:	402a251f 	.word	0x402a251f
    2674:	40930089 	.word	0x40930089
    2678:	d1032c01 	.word	0xd1032c01
    267c:	00aa2580 	.word	0x00aa2580
    2680:	e0021889 	.word	0xe0021889
    2684:	009422a0 	.word	0x009422a0
    2688:	600b1909 	.word	0x600b1909
    268c:	f0016980 	.word	0xf0016980
    2690:	2300f9e0 	.word	0x2300f9e0
    2694:	bd381c18 	.word	0xbd381c18
    2698:	1003d800 	.word	0x1003d800
    269c:	1c04b510 	.word	0x1c04b510
    26a0:	42812000 	.word	0x42812000
    26a4:	88a2d122 	.word	0x88a2d122
    26a8:	2aff2001 	.word	0x2aff2001
    26ac:	4910d81e 	.word	0x4910d81e
    26b0:	185b0953 	.word	0x185b0953
    26b4:	400a211f 	.word	0x400a211f
    26b8:	4090009b 	.word	0x4090009b
    26bc:	4210681a 	.word	0x4210681a
    26c0:	2180d003 	.word	0x2180d003
    26c4:	189b008a 	.word	0x189b008a
    26c8:	3301e001 	.word	0x3301e001
    26cc:	681b33ff 	.word	0x681b33ff
    26d0:	40181c21 	.word	0x40181c21
    26d4:	41981e43 	.word	0x41981e43
    26d8:	31087220 	.word	0x31087220
    26dc:	69a02201 	.word	0x69a02201
    26e0:	f9aaf001 	.word	0xf9aaf001
    26e4:	f00169e0 	.word	0xf00169e0
    26e8:	2000f9b4 	.word	0x2000f9b4
    26ec:	46c0bd10 	.word	0x46c0bd10
    26f0:	1003d800 	.word	0x1003d800
    26f4:	009a2380 	.word	0x009a2380
    26f8:	60011880 	.word	0x60011880
    26fc:	23a04770 	.word	0x23a04770
    2700:	1880009a 	.word	0x1880009a
    2704:	47706001 	.word	0x47706001
    2708:	4803b508 	.word	0x4803b508
    270c:	fecef000 	.word	0xfecef000
    2710:	f0004802 	.word	0xf0004802
    2714:	bd08fecb 	.word	0xbd08fecb
    2718:	2000ef00 	.word	0x2000ef00
    271c:	2000eea0 	.word	0x2000eea0
    2720:	49204b1f 	.word	0x49204b1f
    2724:	22004820 	.word	0x22004820
    2728:	6008701a 	.word	0x6008701a
    272c:	4a204b1f 	.word	0x4a204b1f
    2730:	49214820 	.word	0x49214820
    2734:	6058601a 	.word	0x6058601a
    2738:	4a206099 	.word	0x4a206099
    273c:	49214820 	.word	0x49214820
    2740:	611860da 	.word	0x611860da
    2744:	4a206159 	.word	0x4a206159
    2748:	49214820 	.word	0x49214820
    274c:	61d8619a 	.word	0x61d8619a
    2750:	4a206219 	.word	0x4a206219
    2754:	49214820 	.word	0x49214820
    2758:	6298625a 	.word	0x6298625a
    275c:	4a2062d9 	.word	0x4a2062d9
    2760:	49214820 	.word	0x49214820
    2764:	6358631a 	.word	0x6358631a
    2768:	4a206399 	.word	0x4a206399
    276c:	49214820 	.word	0x49214820
    2770:	4a2163da 	.word	0x4a2163da
    2774:	64596418 	.word	0x64596418
    2778:	49214820 	.word	0x49214820
    277c:	4a21649a 	.word	0x4a21649a
    2780:	651964d8 	.word	0x651964d8
    2784:	49214820 	.word	0x49214820
    2788:	4a21655a 	.word	0x4a21655a
    278c:	65d96598 	.word	0x65d96598
    2790:	4820661a 	.word	0x4820661a
    2794:	4a214920 	.word	0x4a214920
    2798:	66996658 	.word	0x66996658
    279c:	477066da 	.word	0x477066da
    27a0:	2000f500 	.word	0x2000f500
    27a4:	2000f388 	.word	0x2000f388
    27a8:	05f5e100 	.word	0x05f5e100
    27ac:	2000f390 	.word	0x2000f390
    27b0:	2000c329 	.word	0x2000c329
    27b4:	2000c9dd 	.word	0x2000c9dd
    27b8:	2000c9b1 	.word	0x2000c9b1
    27bc:	2000c97d 	.word	0x2000c97d
    27c0:	2000c945 	.word	0x2000c945
    27c4:	2000c905 	.word	0x2000c905
    27c8:	2000c3a5 	.word	0x2000c3a5
    27cc:	2000c88d 	.word	0x2000c88d
    27d0:	2000c801 	.word	0x2000c801
    27d4:	2000c4c1 	.word	0x2000c4c1
    27d8:	2000c7a1 	.word	0x2000c7a1
    27dc:	2000c741 	.word	0x2000c741
    27e0:	2000c62d 	.word	0x2000c62d
    27e4:	2000c5f5 	.word	0x2000c5f5
    27e8:	2000c5c5 	.word	0x2000c5c5
    27ec:	2000c595 	.word	0x2000c595
    27f0:	2000c565 	.word	0x2000c565
    27f4:	2000c535 	.word	0x2000c535
    27f8:	2000c505 	.word	0x2000c505
    27fc:	2000c479 	.word	0x2000c479
    2800:	2000c4e1 	.word	0x2000c4e1
    2804:	2000ca05 	.word	0x2000ca05
    2808:	2000ca4d 	.word	0x2000ca4d
    280c:	2000c361 	.word	0x2000c361
    2810:	2000c42d 	.word	0x2000c42d
    2814:	2000c3c1 	.word	0x2000c3c1
    2818:	2000c6ed 	.word	0x2000c6ed
    281c:	2000c337 	.word	0x2000c337
    2820:	4b2db5f0 	.word	0x4b2db5f0
    2824:	092c0e05 	.word	0x092c0e05
    2828:	240f5d1e 	.word	0x240f5d1e
    282c:	4a2b4025 	.word	0x4a2b4025
    2830:	25ff5d5f 	.word	0x25ff5d5f
    2834:	76177596 	.word	0x76177596
    2838:	1c07042e 	.word	0x1c07042e
    283c:	0c3d4037 	.word	0x0c3d4037
    2840:	5ddf092f 	.word	0x5ddf092f
    2844:	5d5d4025 	.word	0x5d5d4025
    2848:	27ff7697 	.word	0x27ff7697
    284c:	023d7715 	.word	0x023d7715
    2850:	0a2f4005 	.word	0x0a2f4005
    2854:	5d5d093d 	.word	0x5d5d093d
    2858:	46bc4027 	.word	0x46bc4027
    285c:	46657795 	.word	0x46657795
    2860:	1c575d5d 	.word	0x1c575d5d
    2864:	b2c777fd 	.word	0xb2c777fd
    2868:	5d5d093d 	.word	0x5d5d093d
    286c:	5c184020 	.word	0x5c184020
    2870:	77fd1cd7 	.word	0x77fd1cd7
    2874:	77f81d57 	.word	0x77f81d57
    2878:	09050e08 	.word	0x09050e08
    287c:	1dd75d5d 	.word	0x1dd75d5d
    2880:	5c184020 	.word	0x5c184020
    2884:	400e77fd 	.word	0x400e77fd
    2888:	0c351c17 	.word	0x0c351c17
    288c:	70383728 	.word	0x70383728
    2890:	5dd8092f 	.word	0x5dd8092f
    2894:	362a1c16 	.word	0x362a1c16
    2898:	40257030 	.word	0x40257030
    289c:	5d5d26ff 	.word	0x5d5d26ff
    28a0:	02301c17 	.word	0x02301c17
    28a4:	372c4008 	.word	0x372c4008
    28a8:	0a07703d 	.word	0x0a07703d
    28ac:	5d98093e 	.word	0x5d98093e
    28b0:	40271c15 	.word	0x40271c15
    28b4:	352e5ddf 	.word	0x352e5ddf
    28b8:	70281c16 	.word	0x70281c16
    28bc:	b2cd3630 	.word	0xb2cd3630
    28c0:	400c7037 	.word	0x400c7037
    28c4:	5d9f092e 	.word	0x5d9f092e
    28c8:	5d191c10 	.word	0x5d191c10
    28cc:	32343032 	.word	0x32343032
    28d0:	70117007 	.word	0x70117007
    28d4:	46c0bdf0 	.word	0x46c0bdf0
    28d8:	2000e9a0 	.word	0x2000e9a0
    28dc:	2000ecd7 	.word	0x2000ecd7
    28e0:	42832300 	.word	0x42832300
    28e4:	46c0d002 	.word	0x46c0d002
    28e8:	e7fa3301 	.word	0xe7fa3301
    28ec:	00004770 	.word	0x00004770
    28f0:	22014b01 	.word	0x22014b01
    28f4:	e7fe601a 	.word	0xe7fe601a
    28f8:	40053100 	.word	0x40053100
    28fc:	2180b508 	.word	0x2180b508
    2900:	01894802 	.word	0x01894802
    2904:	fef6f7ff 	.word	0xfef6f7ff
    2908:	46c0bd08 	.word	0x46c0bd08
    290c:	400f6004 	.word	0x400f6004
    2910:	2180b508 	.word	0x2180b508
    2914:	01894802 	.word	0x01894802
    2918:	fef1f7ff 	.word	0xfef1f7ff
    291c:	46c0bd08 	.word	0x46c0bd08
    2920:	400f6004 	.word	0x400f6004
    2924:	46752404 	.word	0x46752404
    2928:	d002422c 	.word	0xd002422c
    292c:	8009f3ef 	.word	0x8009f3ef
    2930:	f3efe002 	.word	0xf3efe002
    2934:	e7ff8008 	.word	0xe7ff8008
    2938:	60184b01 	.word	0x60184b01
    293c:	e7febe00 	.word	0xe7febe00
    2940:	2000f740 	.word	0x2000f740
    2944:	1c0cb538 	.word	0x1c0cb538
    2948:	f0011c05 	.word	0xf0011c05
    294c:	20c0fa9d 	.word	0x20c0fa9d
    2950:	fadaf001 	.word	0xfadaf001
    2954:	f0011c28 	.word	0xf0011c28
    2958:	1c20fad7 	.word	0x1c20fad7
    295c:	fad4f001 	.word	0xfad4f001
    2960:	fb72f001 	.word	0xfb72f001
    2964:	b510bd38 	.word	0xb510bd38
    2968:	f0011c04 	.word	0xf0011c04
    296c:	20c0fa8d 	.word	0x20c0fa8d
    2970:	facaf001 	.word	0xfacaf001
    2974:	f0011c20 	.word	0xf0011c20
    2978:	f001fac7 	.word	0xf001fac7
    297c:	20c1fa85 	.word	0x20c1fa85
    2980:	fac2f001 	.word	0xfac2f001
    2984:	fb0cf001 	.word	0xfb0cf001
    2988:	f0011c04 	.word	0xf0011c04
    298c:	1c20fb5d 	.word	0x1c20fb5d
    2990:	0000bd10 	.word	0x0000bd10
    2994:	4b0cb538 	.word	0x4b0cb538
    2998:	68181c05 	.word	0x68181c05
    299c:	06021c0c 	.word	0x06021c0c
    29a0:	490ad510 	.word	0x490ad510
    29a4:	2a00780a 	.word	0x2a00780a
    29a8:	f001d10c 	.word	0xf001d10c
    29ac:	2034fa8d 	.word	0x2034fa8d
    29b0:	fad0f001 	.word	0xfad0f001
    29b4:	f0011c28 	.word	0xf0011c28
    29b8:	1c20facd 	.word	0x1c20facd
    29bc:	facaf001 	.word	0xfacaf001
    29c0:	fb54f001 	.word	0xfb54f001
    29c4:	46c0bd38 	.word	0x46c0bd38
    29c8:	400f6204 	.word	0x400f6204
    29cc:	2000ef2c 	.word	0x2000ef2c
    29d0:	28312100 	.word	0x28312100
    29d4:	4a04d906 	.word	0x4a04d906
    29d8:	21143832 	.word	0x21143832
    29dc:	d8014290 	.word	0xd8014290
    29e0:	5c194b02 	.word	0x5c194b02
    29e4:	47701c08 	.word	0x47701c08
    29e8:	00000257 	.word	0x00000257
    29ec:	2000e9c4 	.word	0x2000e9c4
    29f0:	4b0eb538 	.word	0x4b0eb538
    29f4:	68181c05 	.word	0x68181c05
    29f8:	d5160602 	.word	0xd5160602
    29fc:	780c490c 	.word	0x780c490c
    2a00:	d1122c00 	.word	0xd1122c00
    2a04:	fa60f001 	.word	0xfa60f001
    2a08:	f0012034 	.word	0xf0012034
    2a0c:	2005faa3 	.word	0x2005faa3
    2a10:	faa0f001 	.word	0xfaa0f001
    2a14:	34015d28 	.word	0x34015d28
    2a18:	fa9cf001 	.word	0xfa9cf001
    2a1c:	d1f92c1b 	.word	0xd1f92c1b
    2a20:	f0012000 	.word	0xf0012000
    2a24:	f001fa97 	.word	0xf001fa97
    2a28:	bd38fb21 	.word	0xbd38fb21
    2a2c:	400f6204 	.word	0x400f6204
    2a30:	2000ef2c 	.word	0x2000ef2c
    2a34:	4b25b5f8 	.word	0x4b25b5f8
    2a38:	681a1c16 	.word	0x681a1c16
    2a3c:	1c0d2480 	.word	0x1c0d2480
    2a40:	d00c4014 	.word	0xd00c4014
    2a44:	24004922 	.word	0x24004922
    2a48:	2f00780f 	.word	0x2f00780f
    2a4c:	e00cd107 	.word	0xe00cd107
    2a50:	2f1d1f67 	.word	0x2f1d1f67
    2a54:	1902d806 	.word	0x1902d806
    2a58:	552b79d3 	.word	0x552b79d3
    2a5c:	42b43401 	.word	0x42b43401
    2a60:	e032dbf6 	.word	0xe032dbf6
    2a64:	424b2101 	.word	0x424b2101
    2a68:	f001e7f7 	.word	0xf001e7f7
    2a6c:	2035fa2d 	.word	0x2035fa2d
    2a70:	fa70f001 	.word	0xfa70f001
    2a74:	2e014c17 	.word	0x2e014c17
    2a78:	1c38d80e 	.word	0x1c38d80e
    2a7c:	fab6f001 	.word	0xfab6f001
    2a80:	4006260f 	.word	0x4006260f
    2a84:	5da20907 	.word	0x5da20907
    2a88:	5c24b2f8 	.word	0x5c24b2f8
    2a8c:	43210111 	.word	0x43210111
    2a90:	f0017029 	.word	0xf0017029
    2a94:	e018faeb 	.word	0xe018faeb
    2a98:	1e731c2f 	.word	0x1e731c2f
    2a9c:	42981b78 	.word	0x42981b78
    2aa0:	2001da0d 	.word	0x2001da0d
    2aa4:	faa2f001 	.word	0xfaa2f001
    2aa8:	4003230f 	.word	0x4003230f
    2aac:	09005ce2 	.word	0x09005ce2
    2ab0:	0111b2c3 	.word	0x0111b2c3
    2ab4:	43115ce2 	.word	0x43115ce2
    2ab8:	37017039 	.word	0x37017039
    2abc:	2000e7ed 	.word	0x2000e7ed
    2ac0:	f00119ad 	.word	0xf00119ad
    2ac4:	3d01fa93 	.word	0x3d01fa93
    2ac8:	bdf8e7da 	.word	0xbdf8e7da
    2acc:	400f6204 	.word	0x400f6204
    2ad0:	2000ef2c 	.word	0x2000ef2c
    2ad4:	2000ec5b 	.word	0x2000ec5b
    2ad8:	b5704b0e 	.word	0xb5704b0e
    2adc:	68181c06 	.word	0x68181c06
    2ae0:	1c141c0d 	.word	0x1c141c0d
    2ae4:	d5030602 	.word	0xd5030602
    2ae8:	780a490b 	.word	0x780a490b
    2aec:	d0022a00 	.word	0xd0022a00
    2af0:	71f41976 	.word	0x71f41976
    2af4:	f001bd70 	.word	0xf001bd70
    2af8:	2034f9e7 	.word	0x2034f9e7
    2afc:	fa2af001 	.word	0xfa2af001
    2b00:	f0011c28 	.word	0xf0011c28
    2b04:	1c20fa27 	.word	0x1c20fa27
    2b08:	fa24f001 	.word	0xfa24f001
    2b0c:	faaef001 	.word	0xfaaef001
    2b10:	46c0e7ee 	.word	0x46c0e7ee
    2b14:	400f6204 	.word	0x400f6204
    2b18:	2000ef2c 	.word	0x2000ef2c
    2b1c:	1f4bb508 	.word	0x1f4bb508
    2b20:	d8022b1d 	.word	0xd8022b1d
    2b24:	7b1b18c3 	.word	0x7b1b18c3
    2b28:	2301e001 	.word	0x2301e001
    2b2c:	4293425b 	.word	0x4293425b
    2b30:	f7ffd001 	.word	0xf7ffd001
    2b34:	2000ffd1 	.word	0x2000ffd1
    2b38:	b510bd08 	.word	0xb510bd08
    2b3c:	2c1d1f4c 	.word	0x2c1d1f4c
    2b40:	1904d808 	.word	0x1904d808
    2b44:	439c7b24 	.word	0x439c7b24
    2b48:	1c224013 	.word	0x1c224013
    2b4c:	f7ff431a 	.word	0xf7ff431a
    2b50:	e001ffe5 	.word	0xe001ffe5
    2b54:	42402001 	.word	0x42402001
    2b58:	0000bd10 	.word	0x0000bd10
    2b5c:	4d04b538 	.word	0x4d04b538
    2b60:	1c0c1c4a 	.word	0x1c0c1c4a
    2b64:	1c29b2d2 	.word	0x1c29b2d2
    2b68:	ff64f7ff 	.word	0xff64f7ff
    2b6c:	bd385d28 	.word	0xbd385d28
    2b70:	2000f744 	.word	0x2000f744
    2b74:	6805b5f7 	.word	0x6805b5f7
    2b78:	1c0e1c04 	.word	0x1c0e1c04
    2b7c:	1c5f2300 	.word	0x1c5f2300
    2b80:	4a2f1c31 	.word	0x4a2f1c31
    2b84:	188840b9 	.word	0x188840b9
    2b88:	4288492e 	.word	0x4288492e
    2b8c:	1e3bd903 	.word	0x1e3bd903
    2b90:	d1f42b05 	.word	0xd1f42b05
    2b94:	1c1fe000 	.word	0x1c1fe000
    2b98:	b2d2017a 	.word	0xb2d2017a
    2b9c:	21101c20 	.word	0x21101c20
    2ba0:	f7ff23e0 	.word	0xf7ff23e0
    2ba4:	2800ffca 	.word	0x2800ffca
    2ba8:	3701db48 	.word	0x3701db48
    2bac:	08680c69 	.word	0x08680c69
    2bb0:	900140be 	.word	0x900140be
    2bb4:	18709100 	.word	0x18709100
    2bb8:	f0011c29 	.word	0xf0011c29
    2bbc:	1c03fbcd 	.word	0x1c03fbcd
    2bc0:	b2da3b0d 	.word	0xb2da3b0d
    2bc4:	08901c07 	.word	0x08901c07
    2bc8:	1a530081 	.word	0x1a530081
    2bcc:	1880019a 	.word	0x1880019a
    2bd0:	2114b2c2 	.word	0x2114b2c2
    2bd4:	f7ff1c20 	.word	0xf7ff1c20
    2bd8:	2800ffa1 	.word	0x2800ffa1
    2bdc:	b2ffdb2e 	.word	0xb2ffdb2e
    2be0:	1b76437d 	.word	0x1b76437d
    2be4:	2208d104 	.word	0x2208d104
    2be8:	21121c20 	.word	0x21121c20
    2bec:	e0231c13 	.word	0xe0231c13
    2bf0:	27009d00 	.word	0x27009d00
    2bf4:	1c3b1976 	.word	0x1c3b1976
    2bf8:	40da9a01 	.word	0x40da9a01
    2bfc:	d3064296 	.word	0xd3064296
    2c00:	02082180 	.word	0x02082180
    2c04:	43074118 	.word	0x43074118
    2c08:	1ab6b2bf 	.word	0x1ab6b2bf
    2c0c:	3301d002 	.word	0x3301d002
    2c10:	d1f12b10 	.word	0xd1f12b10
    2c14:	1c20b2fa 	.word	0x1c20b2fa
    2c18:	f7ff2115 	.word	0xf7ff2115
    2c1c:	2800ff7f 	.word	0x2800ff7f
    2c20:	0a3adb0c 	.word	0x0a3adb0c
    2c24:	21161c20 	.word	0x21161c20
    2c28:	ff78f7ff 	.word	0xff78f7ff
    2c2c:	db052800 	.word	0xdb052800
    2c30:	21121c20 	.word	0x21121c20
    2c34:	23082200 	.word	0x23082200
    2c38:	ff7ff7ff 	.word	0xff7ff7ff
    2c3c:	46c0bdfe 	.word	0x46c0bdfe
    2c40:	967ff180 	.word	0x967ff180
    2c44:	7ef53880 	.word	0x7ef53880
    2c48:	4b26b5f8 	.word	0x4b26b5f8
    2c4c:	1c044a24 	.word	0x1c044a24
    2c50:	68871c0d 	.word	0x68871c0d
    2c54:	21001c08 	.word	0x21001c08
    2c58:	fbcef001 	.word	0xfbcef001
    2c5c:	f7ff1c08 	.word	0xf7ff1c08
    2c60:	2603feb7 	.word	0x2603feb7
    2c64:	49204370 	.word	0x49204370
    2c68:	180e2308 	.word	0x180e2308
    2c6c:	1c207832 	.word	0x1c207832
    2c70:	f7ff2117 	.word	0xf7ff2117
    2c74:	2800ff62 	.word	0x2800ff62
    2c78:	7872db2e 	.word	0x7872db2e
    2c7c:	211a1c20 	.word	0x211a1c20
    2c80:	f7ff23c3 	.word	0xf7ff23c3
    2c84:	2800ff5a 	.word	0x2800ff5a
    2c88:	78b2db26 	.word	0x78b2db26
    2c8c:	211b1c20 	.word	0x211b1c20
    2c90:	ff44f7ff 	.word	0xff44f7ff
    2c94:	db1f2800 	.word	0xdb1f2800
    2c98:	21101c20 	.word	0x21101c20
    2c9c:	230b2208 	.word	0x230b2208
    2ca0:	ff4bf7ff 	.word	0xff4bf7ff
    2ca4:	db172800 	.word	0xdb172800
    2ca8:	21081c20 	.word	0x21081c20
    2cac:	233f2200 	.word	0x233f2200
    2cb0:	ff43f7ff 	.word	0xff43f7ff
    2cb4:	db0f2800 	.word	0xdb0f2800
    2cb8:	21091c20 	.word	0x21091c20
    2cbc:	233f2200 	.word	0x233f2200
    2cc0:	ff3bf7ff 	.word	0xff3bf7ff
    2cc4:	db072800 	.word	0xdb072800
    2cc8:	1c2019e9 	.word	0x1c2019e9
    2ccc:	ff52f7ff 	.word	0xff52f7ff
    2cd0:	db012800 	.word	0xdb012800
    2cd4:	20006065 	.word	0x20006065
    2cd8:	46c0bdf8 	.word	0x46c0bdf8
    2cdc:	46c046c0 	.word	0x46c046c0
    2ce0:	000010c7 	.word	0x000010c7
    2ce4:	00000000 	.word	0x00000000
    2ce8:	2000ec1c 	.word	0x2000ec1c
    2cec:	46c046c0 	.word	0x46c046c0
    2cf0:	1c0ab508 	.word	0x1c0ab508
    2cf4:	2105230f 	.word	0x2105230f
    2cf8:	ff1ff7ff 	.word	0xff1ff7ff
    2cfc:	b508bd08 	.word	0xb508bd08
    2d00:	230f1c0a 	.word	0x230f1c0a
    2d04:	f7ff2107 	.word	0xf7ff2107
    2d08:	bd08ff18 	.word	0xbd08ff18
    2d0c:	1c0ab508 	.word	0x1c0ab508
    2d10:	210c230f 	.word	0x210c230f
    2d14:	ff11f7ff 	.word	0xff11f7ff
    2d18:	b508bd08 	.word	0xb508bd08
    2d1c:	414a424a 	.word	0x414a424a
    2d20:	21050112 	.word	0x21050112
    2d24:	f7ff2310 	.word	0xf7ff2310
    2d28:	bd08ff08 	.word	0xbd08ff08
    2d2c:	1e0ab508 	.word	0x1e0ab508
    2d30:	2210d000 	.word	0x2210d000
    2d34:	23102107 	.word	0x23102107
    2d38:	fefff7ff 	.word	0xfefff7ff
    2d3c:	0000bd08 	.word	0x0000bd08
    2d40:	1c04b537 	.word	0x1c04b537
    2d44:	1c202505 	.word	0x1c202505
    2d48:	2208210b 	.word	0x2208210b
    2d4c:	f7ff2360 	.word	0xf7ff2360
    2d50:	2800fef4 	.word	0x2800fef4
    2d54:	2204db43 	.word	0x2204db43
    2d58:	210f1c20 	.word	0x210f1c20
    2d5c:	f7ff1c13 	.word	0xf7ff1c13
    2d60:	2800feec 	.word	0x2800feec
    2d64:	1c20db3b 	.word	0x1c20db3b
    2d68:	22002110 	.word	0x22002110
    2d6c:	f7ff2303 	.word	0xf7ff2303
    2d70:	2800fee4 	.word	0x2800fee4
    2d74:	1c20db33 	.word	0x1c20db33
    2d78:	f7ff4919 	.word	0xf7ff4919
    2d7c:	2800fefb 	.word	0x2800fefb
    2d80:	2210db2d 	.word	0x2210db2d
    2d84:	210b1c20 	.word	0x210b1c20
    2d88:	f7ff1c13 	.word	0xf7ff1c13
    2d8c:	2800fed6 	.word	0x2800fed6
    2d90:	4814db25 	.word	0x4814db25
    2d94:	fda4f7ff 	.word	0xfda4f7ff
    2d98:	210b1c20 	.word	0x210b1c20
    2d9c:	23102200 	.word	0x23102200
    2da0:	fecbf7ff 	.word	0xfecbf7ff
    2da4:	db1a2800 	.word	0xdb1a2800
    2da8:	210f1c20 	.word	0x210f1c20
    2dac:	23042200 	.word	0x23042200
    2db0:	fec3f7ff 	.word	0xfec3f7ff
    2db4:	db122800 	.word	0xdb122800
    2db8:	22051c20 	.word	0x22051c20
    2dbc:	f7ff4669 	.word	0xf7ff4669
    2dc0:	466bfe39 	.word	0x466bfe39
    2dc4:	200f791a 	.word	0x200f791a
    2dc8:	d0014010 	.word	0xd0014010
    2dcc:	d105280f 	.word	0xd105280f
    2dd0:	2d003d01 	.word	0x2d003d01
    2dd4:	2101d1b7 	.word	0x2101d1b7
    2dd8:	e0004248 	.word	0xe0004248
    2ddc:	bd3e2000 	.word	0xbd3e2000
    2de0:	053ec600 	.word	0x053ec600
    2de4:	00002710 	.word	0x00002710
    2de8:	4b0eb538 	.word	0x4b0eb538
    2dec:	22001c04 	.word	0x22001c04
    2df0:	300c6081 	.word	0x300c6081
    2df4:	f7ff701a 	.word	0xf7ff701a
    2df8:	6861fdfb 	.word	0x6861fdfb
    2dfc:	f7ff1c20 	.word	0xf7ff1c20
    2e00:	1c20ff23 	.word	0x1c20ff23
    2e04:	f7ff6865 	.word	0xf7ff6865
    2e08:	6065ff9b 	.word	0x6065ff9b
    2e0c:	da032800 	.word	0xda032800
    2e10:	f7ff1c20 	.word	0xf7ff1c20
    2e14:	6065ff95 	.word	0x6065ff95
    2e18:	1c201c29 	.word	0x1c201c29
    2e1c:	ff14f7ff 	.word	0xff14f7ff
    2e20:	46c0bd38 	.word	0x46c0bd38
    2e24:	2000ef2c 	.word	0x2000ef2c
    2e28:	4f11b5f0 	.word	0x4f11b5f0
    2e2c:	ae01b087 	.word	0xae01b087
    2e30:	1c0d1c04 	.word	0x1c0d1c04
    2e34:	1c391c30 	.word	0x1c391c30
    2e38:	f0012204 	.word	0xf0012204
    2e3c:	1d39faff 	.word	0x1d39faff
    2e40:	2210a802 	.word	0x2210a802
    2e44:	fafaf001 	.word	0xfafaf001
    2e48:	092b200f 	.word	0x092b200f
    2e4c:	4005a902 	.word	0x4005a902
    2e50:	5d4a5cf6 	.word	0x5d4a5cf6
    2e54:	430625b0 	.word	0x430625b0
    2e58:	1c20432a 	.word	0x1c20432a
    2e5c:	f7ff210a 	.word	0xf7ff210a
    2e60:	1c20fe5d 	.word	0x1c20fe5d
    2e64:	1c32210b 	.word	0x1c32210b
    2e68:	fe58f7ff 	.word	0xfe58f7ff
    2e6c:	bdf0b007 	.word	0xbdf0b007
    2e70:	2000e9b0 	.word	0x2000e9b0
    2e74:	2005b508 	.word	0x2005b508
    2e78:	f7ff21a0 	.word	0xf7ff21a0
    2e7c:	2006fd8b 	.word	0x2006fd8b
    2e80:	f7ff21d0 	.word	0xf7ff21d0
    2e84:	2007fd87 	.word	0x2007fd87
    2e88:	f7ff2100 	.word	0xf7ff2100
    2e8c:	2008fd83 	.word	0x2008fd83
    2e90:	f7ff2140 	.word	0xf7ff2140
    2e94:	2009fd7f 	.word	0x2009fd7f
    2e98:	f7ff21c0 	.word	0xf7ff21c0
    2e9c:	200afd7b 	.word	0x200afd7b
    2ea0:	f7ff2170 	.word	0xf7ff2170
    2ea4:	200cfd77 	.word	0x200cfd77
    2ea8:	f7ff21a0 	.word	0xf7ff21a0
    2eac:	200ffd73 	.word	0x200ffd73
    2eb0:	f7ff212a 	.word	0xf7ff212a
    2eb4:	2011fd6f 	.word	0x2011fd6f
    2eb8:	f7ff2103 	.word	0xf7ff2103
    2ebc:	2017fd6b 	.word	0x2017fd6b
    2ec0:	f7ff21f4 	.word	0xf7ff21f4
    2ec4:	2019fd67 	.word	0x2019fd67
    2ec8:	f7ff210c 	.word	0xf7ff210c
    2ecc:	4b02fd63 	.word	0x4b02fd63
    2ed0:	20002201 	.word	0x20002201
    2ed4:	bd08701a 	.word	0xbd08701a
    2ed8:	2000ef2c 	.word	0x2000ef2c
    2edc:	4b04b508 	.word	0x4b04b508
    2ee0:	300c2200 	.word	0x300c2200
    2ee4:	f7ff701a 	.word	0xf7ff701a
    2ee8:	f7fffd83 	.word	0xf7fffd83
    2eec:	bd08ffc3 	.word	0xbd08ffc3
    2ef0:	2000ef2c 	.word	0x2000ef2c
    2ef4:	4d0bb570 	.word	0x4d0bb570
    2ef8:	01242480 	.word	0x01242480
    2efc:	1c211c28 	.word	0x1c211c28
    2f00:	fbfdf7ff 	.word	0xfbfdf7ff
    2f04:	20002105 	.word	0x20002105
    2f08:	f922f001 	.word	0xf922f001
    2f0c:	200021ff 	.word	0x200021ff
    2f10:	f91ef001 	.word	0xf91ef001
    2f14:	1c061c21 	.word	0x1c061c21
    2f18:	f7ff1c28 	.word	0xf7ff1c28
    2f1c:	b2f0fbeb 	.word	0xb2f0fbeb
    2f20:	46c0bd70 	.word	0x46c0bd70
    2f24:	400f6014 	.word	0x400f6014
    2f28:	4d11b570 	.word	0x4d11b570
    2f2c:	01242480 	.word	0x01242480
    2f30:	1c211c28 	.word	0x1c211c28
    2f34:	fbe3f7ff 	.word	0xfbe3f7ff
    2f38:	200021ab 	.word	0x200021ab
    2f3c:	f908f001 	.word	0xf908f001
    2f40:	200021ff 	.word	0x200021ff
    2f44:	f904f001 	.word	0xf904f001
    2f48:	200021ff 	.word	0x200021ff
    2f4c:	f900f001 	.word	0xf900f001
    2f50:	200021ff 	.word	0x200021ff
    2f54:	f8fcf001 	.word	0xf8fcf001
    2f58:	200021ff 	.word	0x200021ff
    2f5c:	f8f8f001 	.word	0xf8f8f001
    2f60:	1c061c21 	.word	0x1c061c21
    2f64:	f7ff1c28 	.word	0xf7ff1c28
    2f68:	b2f0fbc5 	.word	0xb2f0fbc5
    2f6c:	46c0bd70 	.word	0x46c0bd70
    2f70:	400f6014 	.word	0x400f6014
    2f74:	2280b5f0 	.word	0x2280b5f0
    2f78:	03904b31 	.word	0x03904b31
    2f7c:	6018b087 	.word	0x6018b087
    2f80:	483021f2 	.word	0x483021f2
    2f84:	ff48f000 	.word	0xff48f000
    2f88:	21f0482f 	.word	0x21f0482f
    2f8c:	ff44f000 	.word	0xff44f000
    2f90:	21f0482e 	.word	0x21f0482e
    2f94:	ff40f000 	.word	0xff40f000
    2f98:	21f0482d 	.word	0x21f0482d
    2f9c:	ff3cf000 	.word	0xff3cf000
    2fa0:	21f4482c 	.word	0x21f4482c
    2fa4:	ff38f000 	.word	0xff38f000
    2fa8:	21f4482b 	.word	0x21f4482b
    2fac:	ff34f000 	.word	0xff34f000
    2fb0:	21f54827 	.word	0x21f54827
    2fb4:	ff30f000 	.word	0xff30f000
    2fb8:	21f54826 	.word	0x21f54826
    2fbc:	ff2cf000 	.word	0xff2cf000
    2fc0:	21f24820 	.word	0x21f24820
    2fc4:	ff28f000 	.word	0xff28f000
    2fc8:	21f0481f 	.word	0x21f0481f
    2fcc:	ff24f000 	.word	0xff24f000
    2fd0:	481e4d22 	.word	0x481e4d22
    2fd4:	27c021f0 	.word	0x27c021f0
    2fd8:	ff1ef000 	.word	0xff1ef000
    2fdc:	481e4c20 	.word	0x481e4c20
    2fe0:	023f21f4 	.word	0x023f21f4
    2fe4:	f0002680 	.word	0xf0002680
    2fe8:	0136ff17 	.word	0x0136ff17
    2fec:	1c391c28 	.word	0x1c391c28
    2ff0:	fb80f7ff 	.word	0xfb80f7ff
    2ff4:	1c201c31 	.word	0x1c201c31
    2ff8:	fb7cf7ff 	.word	0xfb7cf7ff
    2ffc:	20026829 	.word	0x20026829
    3000:	602f430f 	.word	0x602f430f
    3004:	25006822 	.word	0x25006822
    3008:	60264316 	.word	0x60264316
    300c:	90001c2b 	.word	0x90001c2b
    3010:	95029001 	.word	0x95029001
    3014:	95049503 	.word	0x95049503
    3018:	21071c28 	.word	0x21071c28
    301c:	f0011c2a 	.word	0xf0011c2a
    3020:	4b10f837 	.word	0x4b10f837
    3024:	1c1f701d 	.word	0x1c1f701d
    3028:	2c13783c 	.word	0x2c13783c
    302c:	2c15d005 	.word	0x2c15d005
    3030:	f7ffd003 	.word	0xf7ffd003
    3034:	7038ff79 	.word	0x7038ff79
    3038:	b007e7f6 	.word	0xb007e7f6
    303c:	46c0bdf0 	.word	0x46c0bdf0
    3040:	40053104 	.word	0x40053104
    3044:	4008618c 	.word	0x4008618c
    3048:	40086190 	.word	0x40086190
    304c:	40086194 	.word	0x40086194
    3050:	40086198 	.word	0x40086198
    3054:	4008619c 	.word	0x4008619c
    3058:	400861a0 	.word	0x400861a0
    305c:	400f6004 	.word	0x400f6004
    3060:	400f6014 	.word	0x400f6014
    3064:	2000f764 	.word	0x2000f764
    3068:	b5382180 	.word	0xb5382180
    306c:	1c050109 	.word	0x1c050109
    3070:	f7ff4820 	.word	0xf7ff4820
    3074:	4b20fb44 	.word	0x4b20fb44
    3078:	28137818 	.word	0x28137818
    307c:	2000d119 	.word	0x2000d119
    3080:	f001214b 	.word	0xf001214b
    3084:	2404f865 	.word	0x2404f865
    3088:	21ff2000 	.word	0x21ff2000
    308c:	f0013c01 	.word	0xf0013c01
    3090:	2c00f85f 	.word	0x2c00f85f
    3094:	2000d1f8 	.word	0x2000d1f8
    3098:	f00121ff 	.word	0xf00121ff
    309c:	5528f859 	.word	0x5528f859
    30a0:	2c083401 	.word	0x2c083401
    30a4:	2280d1f7 	.word	0x2280d1f7
    30a8:	01114812 	.word	0x01114812
    30ac:	fb22f7ff 	.word	0xfb22f7ff
    30b0:	2815bd38 	.word	0x2815bd38
    30b4:	214bd1f7 	.word	0x214bd1f7
    30b8:	f0012000 	.word	0xf0012000
    30bc:	2000f849 	.word	0x2000f849
    30c0:	f0011c01 	.word	0xf0011c01
    30c4:	2101f845 	.word	0x2101f845
    30c8:	f0012000 	.word	0xf0012000
    30cc:	2102f841 	.word	0x2102f841
    30d0:	f0012000 	.word	0xf0012000
    30d4:	2000f83d 	.word	0x2000f83d
    30d8:	f00121ff 	.word	0xf00121ff
    30dc:	2400f839 	.word	0x2400f839
    30e0:	21ff2000 	.word	0x21ff2000
    30e4:	f834f001 	.word	0xf834f001
    30e8:	34015528 	.word	0x34015528
    30ec:	d1f72c08 	.word	0xd1f72c08
    30f0:	46c0e7d9 	.word	0x46c0e7d9
    30f4:	400f6014 	.word	0x400f6014
    30f8:	2000f764 	.word	0x2000f764
    30fc:	f7ffb508 	.word	0xf7ffb508
    3100:	07c3fef9 	.word	0x07c3fef9
    3104:	bd08d4fb 	.word	0xbd08d4fb
    3108:	4d09b538 	.word	0x4d09b538
    310c:	01242480 	.word	0x01242480
    3110:	fff4f7ff 	.word	0xfff4f7ff
    3114:	1c211c28 	.word	0x1c211c28
    3118:	faf1f7ff 	.word	0xfaf1f7ff
    311c:	20002106 	.word	0x20002106
    3120:	f816f001 	.word	0xf816f001
    3124:	1c211c28 	.word	0x1c211c28
    3128:	fae4f7ff 	.word	0xfae4f7ff
    312c:	46c0bd38 	.word	0x46c0bd38
    3130:	400f6014 	.word	0x400f6014
    3134:	4d17b538 	.word	0x4d17b538
    3138:	1c042300 	.word	0x1c042300
    313c:	7828702b 	.word	0x7828702b
    3140:	d0052813 	.word	0xd0052813
    3144:	d0032815 	.word	0xd0032815
    3148:	feeef7ff 	.word	0xfeeef7ff
    314c:	e7f67028 	.word	0xe7f67028
    3150:	ffdaf7ff 	.word	0xffdaf7ff
    3154:	ffd2f7ff 	.word	0xffd2f7ff
    3158:	480f2180 	.word	0x480f2180
    315c:	f7ff0109 	.word	0xf7ff0109
    3160:	21d8face 	.word	0x21d8face
    3164:	f0002000 	.word	0xf0002000
    3168:	0222fff3 	.word	0x0222fff3
    316c:	04250e11 	.word	0x04250e11
    3170:	f0002000 	.word	0xf0002000
    3174:	0e29ffed 	.word	0x0e29ffed
    3178:	f0002000 	.word	0xf0002000
    317c:	b2e1ffe9 	.word	0xb2e1ffe9
    3180:	24802000 	.word	0x24802000
    3184:	ffe4f000 	.word	0xffe4f000
    3188:	01214803 	.word	0x01214803
    318c:	fab2f7ff 	.word	0xfab2f7ff
    3190:	46c0bd38 	.word	0x46c0bd38
    3194:	2000f764 	.word	0x2000f764
    3198:	400f6014 	.word	0x400f6014
    319c:	b2c7b5f8 	.word	0xb2c7b5f8
    31a0:	23801c16 	.word	0x23801c16
    31a4:	1c0419ca 	.word	0x1c0419ca
    31a8:	00581c0d 	.word	0x00581c0d
    31ac:	d82e4282 	.word	0xd82e4282
    31b0:	034a2180 	.word	0x034a2180
    31b4:	429c1b53 	.word	0x429c1b53
    31b8:	f7ffd829 	.word	0xf7ffd829
    31bc:	f7ffffa5 	.word	0xf7ffffa5
    31c0:	2180ff9d 	.word	0x2180ff9d
    31c4:	01094812 	.word	0x01094812
    31c8:	fa99f7ff 	.word	0xfa99f7ff
    31cc:	20002102 	.word	0x20002102
    31d0:	ffbef000 	.word	0xffbef000
    31d4:	0e010220 	.word	0x0e010220
    31d8:	20000424 	.word	0x20000424
    31dc:	ffb8f000 	.word	0xffb8f000
    31e0:	20000e21 	.word	0x20000e21
    31e4:	ffb4f000 	.word	0xffb4f000
    31e8:	2000b2b9 	.word	0x2000b2b9
    31ec:	ffb0f000 	.word	0xffb0f000
    31f0:	1ba71c34 	.word	0x1ba71c34
    31f4:	da0542af 	.word	0xda0542af
    31f8:	20007821 	.word	0x20007821
    31fc:	ffa8f000 	.word	0xffa8f000
    3200:	e7f63401 	.word	0xe7f63401
    3204:	48022580 	.word	0x48022580
    3208:	f7ff0129 	.word	0xf7ff0129
    320c:	bdf8fa73 	.word	0xbdf8fa73
    3210:	400f6014 	.word	0x400f6014
    3214:	1c04b5f8 	.word	0x1c04b5f8
    3218:	1c171c0d 	.word	0x1c171c0d
    321c:	fe84f7ff 	.word	0xfe84f7ff
    3220:	d0012813 	.word	0xd0012813
    3224:	d1f92815 	.word	0xd1f92815
    3228:	03582380 	.word	0x03582380
    322c:	d82f4285 	.word	0xd82f4285
    3230:	d82d4284 	.word	0xd82d4284
    3234:	4282192a 	.word	0x4282192a
    3238:	2680d82a 	.word	0x2680d82a
    323c:	b2e10073 	.word	0xb2e10073
    3240:	b2861a58 	.word	0xb2861a58
    3244:	d20242b5 	.word	0xd20242b5
    3248:	2e00b2ae 	.word	0x2e00b2ae
    324c:	1c20d007 	.word	0x1c20d007
    3250:	1c311c3a 	.word	0x1c311c3a
    3254:	ffa2f7ff 	.word	0xffa2f7ff
    3258:	19bf19a4 	.word	0x19bf19a4
    325c:	1c261bad 	.word	0x1c261bad
    3260:	19611b3a 	.word	0x19611b3a
    3264:	1b8b1992 	.word	0x1b8b1992
    3268:	d9072bff 	.word	0xd9072bff
    326c:	1c302180 	.word	0x1c302180
    3270:	36010049 	.word	0x36010049
    3274:	ff92f7ff 	.word	0xff92f7ff
    3278:	e7f136ff 	.word	0xe7f136ff
    327c:	02060a28 	.word	0x02060a28
    3280:	1930b2ed 	.word	0x1930b2ed
    3284:	2d0019ba 	.word	0x2d0019ba
    3288:	b2a9d002 	.word	0xb2a9d002
    328c:	ff86f7ff 	.word	0xff86f7ff
    3290:	0000bdf8 	.word	0x0000bdf8
    3294:	2380b5f8 	.word	0x2380b5f8
    3298:	1c0e1c05 	.word	0x1c0e1c05
    329c:	03581c14 	.word	0x03581c14
    32a0:	d8314281 	.word	0xd8314281
    32a4:	d82f4285 	.word	0xd82f4285
    32a8:	4282194a 	.word	0x4282194a
    32ac:	f7ffd82c 	.word	0xf7ffd82c
    32b0:	2180ff25 	.word	0x2180ff25
    32b4:	01094815 	.word	0x01094815
    32b8:	fa21f7ff 	.word	0xfa21f7ff
    32bc:	2000210b 	.word	0x2000210b
    32c0:	ff46f000 	.word	0xff46f000
    32c4:	20000c29 	.word	0x20000c29
    32c8:	ff42f000 	.word	0xff42f000
    32cc:	0a2927ff 	.word	0x0a2927ff
    32d0:	20004039 	.word	0x20004039
    32d4:	ff3cf000 	.word	0xff3cf000
    32d8:	40391c29 	.word	0x40391c29
    32dc:	f0002000 	.word	0xf0002000
    32e0:	2000ff37 	.word	0x2000ff37
    32e4:	f0001c39 	.word	0xf0001c39
    32e8:	19a5ff33 	.word	0x19a5ff33
    32ec:	d00642ac 	.word	0xd00642ac
    32f0:	21ff2000 	.word	0x21ff2000
    32f4:	ff2cf000 	.word	0xff2cf000
    32f8:	34017020 	.word	0x34017020
    32fc:	2480e7f6 	.word	0x2480e7f6
    3300:	01214802 	.word	0x01214802
    3304:	f9f6f7ff 	.word	0xf9f6f7ff
    3308:	46c0bdf8 	.word	0x46c0bdf8
    330c:	400f6014 	.word	0x400f6014
    3310:	49044b03 	.word	0x49044b03
    3314:	18406818 	.word	0x18406818
    3318:	41981e43 	.word	0x41981e43
    331c:	46c04770 	.word	0x46c04770
    3320:	10400100 	.word	0x10400100
    3324:	edcba988 	.word	0xedcba988
    3328:	1c04b538 	.word	0x1c04b538
    332c:	fff0f7ff 	.word	0xfff0f7ff
    3330:	d0061e05 	.word	0xd0061e05
    3334:	1c214d10 	.word	0x1c214d10
    3338:	682a3118 	.word	0x682a3118
    333c:	47901c20 	.word	0x47901c20
    3340:	f7ffe018 	.word	0xf7ffe018
    3344:	7823fe17 	.word	0x7823fe17
    3348:	d0082b36 	.word	0xd0082b36
    334c:	d10e2b3a 	.word	0xd10e2b3a
    3350:	61e51c20 	.word	0x61e51c20
    3354:	30246225 	.word	0x30246225
    3358:	fe86f7ff 	.word	0xfe86f7ff
    335c:	4a07e005 	.word	0x4a07e005
    3360:	68134807 	.word	0x68134807
    3364:	680161e3 	.word	0x680161e3
    3368:	83256221 	.word	0x83256221
    336c:	2080e002 	.word	0x2080e002
    3370:	83210041 	.word	0x83210041
    3374:	bd388b20 	.word	0xbd388b20
    3378:	10400100 	.word	0x10400100
    337c:	40043200 	.word	0x40043200
    3380:	40045000 	.word	0x40045000
    3384:	49084b07 	.word	0x49084b07
    3388:	60184a08 	.word	0x60184a08
    338c:	60084b08 	.word	0x60084b08
    3390:	68196010 	.word	0x68196010
    3394:	60194001 	.word	0x60194001
    3398:	681a4b06 	.word	0x681a4b06
    339c:	60184010 	.word	0x60184010
    33a0:	46c04770 	.word	0x46c04770
    33a4:	40006178 	.word	0x40006178
    33a8:	4000617c 	.word	0x4000617c
    33ac:	40006144 	.word	0x40006144
    33b0:	400061ac 	.word	0x400061ac
    33b4:	400061bc 	.word	0x400061bc
    33b8:	68194b04 	.word	0x68194b04
    33bc:	d1fb4201 	.word	0xd1fb4201
    33c0:	60184b03 	.word	0x60184b03
    33c4:	4202681a 	.word	0x4202681a
    33c8:	4770d1fc 	.word	0x4770d1fc
    33cc:	400061b0 	.word	0x400061b0
    33d0:	400061b4 	.word	0x400061b4
    33d4:	4b0d4a0c 	.word	0x4b0d4a0c
    33d8:	480d6811 	.word	0x480d6811
    33dc:	60114019 	.word	0x60114019
    33e0:	401a6802 	.word	0x401a6802
    33e4:	480b6002 	.word	0x480b6002
    33e8:	68014a0b 	.word	0x68014a0b
    33ec:	60014019 	.word	0x60014019
    33f0:	40186810 	.word	0x40186810
    33f4:	4a096010 	.word	0x4a096010
    33f8:	68114809 	.word	0x68114809
    33fc:	60114019 	.word	0x60114019
    3400:	40136802 	.word	0x40136802
    3404:	47706003 	.word	0x47706003
    3408:	400061c0 	.word	0x400061c0
    340c:	ff7fff7f 	.word	0xff7fff7f
    3410:	400061c4 	.word	0x400061c4
    3414:	400061c8 	.word	0x400061c8
    3418:	400061cc 	.word	0x400061cc
    341c:	400061d0 	.word	0x400061d0
    3420:	400061d4 	.word	0x400061d4
    3424:	0603220f 	.word	0x0603220f
    3428:	0fd94010 	.word	0x0fd94010
    342c:	180b0040 	.word	0x180b0040
    3430:	01994a01 	.word	0x01994a01
    3434:	47701888 	.word	0x47701888
    3438:	2000f800 	.word	0x2000f800
    343c:	23804a05 	.word	0x23804a05
    3440:	21000298 	.word	0x21000298
    3444:	60116010 	.word	0x60116010
    3448:	68134a03 	.word	0x68134a03
    344c:	d0fb4203 	.word	0xd0fb4203
    3450:	46c04770 	.word	0x46c04770
    3454:	40053100 	.word	0x40053100
    3458:	40053150 	.word	0x40053150
    345c:	6904b538 	.word	0x6904b538
    3460:	1c201c0d 	.word	0x1c201c0d
    3464:	ffdef7ff 	.word	0xffdef7ff
    3468:	22c068c3 	.word	0x22c068c3
    346c:	60854393 	.word	0x60854393
    3470:	200f60c3 	.word	0x200f60c3
    3474:	21014020 	.word	0x21014020
    3478:	4d034081 	.word	0x4d034081
    347c:	06201c0b 	.word	0x06201c0b
    3480:	040bd500 	.word	0x040bd500
    3484:	bd38602b 	.word	0xbd38602b
    3488:	400061b0 	.word	0x400061b0
    348c:	b5386902 	.word	0xb5386902
    3490:	250f1c04 	.word	0x250f1c04
    3494:	f0004015 	.word	0xf0004015
    3498:	6923fa6d 	.word	0x6923fa6d
    349c:	40a82001 	.word	0x40a82001
    34a0:	d500061a 	.word	0xd500061a
    34a4:	f7ff0400 	.word	0xf7ff0400
    34a8:	bd38ff87 	.word	0xbd38ff87
    34ac:	b5106903 	.word	0xb5106903
    34b0:	1c04210f 	.word	0x1c04210f
    34b4:	40194810 	.word	0x40194810
    34b8:	18092280 	.word	0x18092280
    34bc:	d0054213 	.word	0xd0054213
    34c0:	68080089 	.word	0x68080089
    34c4:	40034b0d 	.word	0x40034b0d
    34c8:	e003600b 	.word	0xe003600b
    34cc:	6818008b 	.word	0x6818008b
    34d0:	60184390 	.word	0x60184390
    34d4:	f0001c20 	.word	0xf0001c20
    34d8:	6921fa4d 	.word	0x6921fa4d
    34dc:	400a220f 	.word	0x400a220f
    34e0:	40902001 	.word	0x40902001
    34e4:	d5000609 	.word	0xd5000609
    34e8:	f7ff0400 	.word	0xf7ff0400
    34ec:	1c20ff4b 	.word	0x1c20ff4b
    34f0:	ffccf7ff 	.word	0xffccf7ff
    34f4:	46c0bd10 	.word	0x46c0bd10
    34f8:	10001870 	.word	0x10001870
    34fc:	ff7fffff 	.word	0xff7fffff
    3500:	6904b510 	.word	0x6904b510
    3504:	4023230f 	.word	0x4023230f
    3508:	22014907 	.word	0x22014907
    350c:	d5030620 	.word	0xd5030620
    3510:	6808409a 	.word	0x6808409a
    3514:	e0020414 	.word	0xe0020414
    3518:	6808409a 	.word	0x6808409a
    351c:	40201c14 	.word	0x40201c14
    3520:	41981e43 	.word	0x41981e43
    3524:	46c0bd10 	.word	0x46c0bd10
    3528:	400061b8 	.word	0x400061b8
    352c:	6903b5f8 	.word	0x6903b5f8
    3530:	1c16600a 	.word	0x1c16600a
    3534:	1c05220f 	.word	0x1c05220f
    3538:	4813401a 	.word	0x4813401a
    353c:	061c2101 	.word	0x061c2101
    3540:	4091d503 	.word	0x4091d503
    3544:	040f6804 	.word	0x040f6804
    3548:	4091e002 	.word	0x4091e002
    354c:	1c0f6804 	.word	0x1c0f6804
    3550:	1e62403c 	.word	0x1e62403c
    3554:	2c004194 	.word	0x2c004194
    3558:	4c0cd115 	.word	0x4c0cd115
    355c:	68222080 	.word	0x68222080
    3560:	433a01c7 	.word	0x433a01c7
    3564:	1c286022 	.word	0x1c286022
    3568:	ffcaf7ff 	.word	0xffcaf7ff
    356c:	42396821 	.word	0x42396821
    3570:	6822d0f3 	.word	0x6822d0f3
    3574:	40134b06 	.word	0x40134b06
    3578:	28006023 	.word	0x28006023
    357c:	1c28d103 	.word	0x1c28d103
    3580:	f7ff1c31 	.word	0xf7ff1c31
    3584:	bdf8ff6b 	.word	0xbdf8ff6b
    3588:	400061b0 	.word	0x400061b0
    358c:	40006140 	.word	0x40006140
    3590:	ffffbfff 	.word	0xffffbfff
    3594:	1c05b538 	.word	0x1c05b538
    3598:	1c281c0c 	.word	0x1c281c0c
    359c:	ffb0f7ff 	.word	0xffb0f7ff
    35a0:	d1fa2800 	.word	0xd1fa2800
    35a4:	1c282301 	.word	0x1c282301
    35a8:	1c216023 	.word	0x1c216023
    35ac:	ff56f7ff 	.word	0xff56f7ff
    35b0:	0000bd38 	.word	0x0000bd38
    35b4:	230f6902 	.word	0x230f6902
    35b8:	40134804 	.word	0x40134804
    35bc:	008b1819 	.word	0x008b1819
    35c0:	4803681a 	.word	0x4803681a
    35c4:	601a4302 	.word	0x601a4302
    35c8:	46c04770 	.word	0x46c04770
    35cc:	10001870 	.word	0x10001870
    35d0:	00010001 	.word	0x00010001
    35d4:	1c024b08 	.word	0x1c024b08
    35d8:	20016819 	.word	0x20016819
    35dc:	d10a428a 	.word	0xd10a428a
    35e0:	23c04806 	.word	0x23c04806
    35e4:	05196802 	.word	0x05196802
    35e8:	401120f8 	.word	0x401120f8
    35ec:	18880602 	.word	0x18880602
    35f0:	41584243 	.word	0x41584243
    35f4:	47703001 	.word	0x47703001
    35f8:	2000f340 	.word	0x2000f340
    35fc:	40006184 	.word	0x40006184
    3600:	681a4b03 	.word	0x681a4b03
    3604:	d1024290 	.word	0xd1024290
    3608:	06494802 	.word	0x06494802
    360c:	47706001 	.word	0x47706001
    3610:	2000f340 	.word	0x2000f340
    3614:	40006154 	.word	0x40006154
    3618:	681a4b05 	.word	0x681a4b05
    361c:	d1054290 	.word	0xd1054290
    3620:	21800648 	.word	0x21800648
    3624:	4b03044a 	.word	0x4b03044a
    3628:	601a4302 	.word	0x601a4302
    362c:	46c04770 	.word	0x46c04770
    3630:	2000f340 	.word	0x2000f340
    3634:	40006154 	.word	0x40006154
    3638:	2800b508 	.word	0x2800b508
    363c:	4816d12b 	.word	0x4816d12b
    3640:	68024b16 	.word	0x68024b16
    3644:	21206019 	.word	0x21206019
    3648:	6002438a 	.word	0x6002438a
    364c:	fec2f7ff 	.word	0xfec2f7ff
    3650:	42582301 	.word	0x42582301
    3654:	fe96f7ff 	.word	0xfe96f7ff
    3658:	42402001 	.word	0x42402001
    365c:	feacf7ff 	.word	0xfeacf7ff
    3660:	21014b0f 	.word	0x21014b0f
    3664:	2002681a 	.word	0x2002681a
    3668:	601a438a 	.word	0x601a438a
    366c:	68186018 	.word	0x68186018
    3670:	4a0b2102 	.word	0x4a0b2102
    3674:	d1fa4208 	.word	0xd1fa4208
    3678:	20094b0a 	.word	0x20094b0a
    367c:	490a6019 	.word	0x490a6019
    3680:	60084b0a 	.word	0x60084b0a
    3684:	490a6810 	.word	0x490a6810
    3688:	60134003 	.word	0x60134003
    368c:	4a0a4809 	.word	0x4a0a4809
    3690:	600a4b0a 	.word	0x600a4b0a
    3694:	bd086018 	.word	0xbd086018
    3698:	40043004 	.word	0x40043004
    369c:	2000f340 	.word	0x2000f340
    36a0:	40006140 	.word	0x40006140
    36a4:	400061a8 	.word	0x400061a8
    36a8:	400061a4 	.word	0x400061a4
    36ac:	ff00ffff 	.word	0xff00ffff
    36b0:	40006158 	.word	0x40006158
    36b4:	00000147 	.word	0x00000147
    36b8:	2000f800 	.word	0x2000f800
    36bc:	40006148 	.word	0x40006148
    36c0:	4b06b508 	.word	0x4b06b508
    36c4:	42886819 	.word	0x42886819
    36c8:	2008d102 	.word	0x2008d102
    36cc:	fe1ef000 	.word	0xfe1ef000
    36d0:	23014803 	.word	0x23014803
    36d4:	431a6802 	.word	0x431a6802
    36d8:	bd086002 	.word	0xbd086002
    36dc:	2000f340 	.word	0x2000f340
    36e0:	40006140 	.word	0x40006140
    36e4:	1c04b5f8 	.word	0x1c04b5f8
    36e8:	fed0f7ff 	.word	0xfed0f7ff
    36ec:	68186963 	.word	0x68186963
    36f0:	1c2079c7 	.word	0x1c2079c7
    36f4:	fa41f000 	.word	0xfa41f000
    36f8:	d0061e05 	.word	0xd0061e05
    36fc:	fa52f000 	.word	0xfa52f000
    3700:	1c281c07 	.word	0x1c281c07
    3704:	fa54f000 	.word	0xfa54f000
    3708:	69261c05 	.word	0x69261c05
    370c:	f7ff1c30 	.word	0xf7ff1c30
    3710:	426bfe89 	.word	0x426bfe89
    3714:	2280416b 	.word	0x2280416b
    3718:	03df0439 	.word	0x03df0439
    371c:	43190593 	.word	0x43190593
    3720:	60014339 	.word	0x60014339
    3724:	21002701 	.word	0x21002701
    3728:	604160c1 	.word	0x604160c1
    372c:	60876101 	.word	0x60876101
    3730:	61816141 	.word	0x61816141
    3734:	620161c1 	.word	0x620161c1
    3738:	240f6244 	.word	0x240f6244
    373c:	4034480b 	.word	0x4034480b
    3740:	00931822 	.word	0x00931822
    3744:	4c0a6819 	.word	0x4c0a6819
    3748:	04ad00af 	.word	0x04ad00af
    374c:	400c433d 	.word	0x400c433d
    3750:	601d4325 	.word	0x601d4325
    3754:	d5030632 	.word	0xd5030632
    3758:	681822c0 	.word	0x681822c0
    375c:	e0010416 	.word	0xe0010416
    3760:	20c0681e 	.word	0x20c0681e
    3764:	601e4306 	.word	0x601e4306
    3768:	46c0bdf8 	.word	0x46c0bdf8
    376c:	10001870 	.word	0x10001870
    3770:	fff3fff3 	.word	0xfff3fff3
    3774:	4b5db5f0 	.word	0x4b5db5f0
    3778:	68194a5d 	.word	0x68194a5d
    377c:	b0856810 	.word	0xb0856810
    3780:	91004001 	.word	0x91004001
    3784:	d1006019 	.word	0xd1006019
    3788:	07cbe0ad 	.word	0x07cbe0ad
    378c:	9800d418 	.word	0x9800d418
    3790:	d4000642 	.word	0xd4000642
    3794:	4e57e0a7 	.word	0x4e57e0a7
    3798:	68372401 	.word	0x68372401
    379c:	f7ff2501 	.word	0xf7ff2501
    37a0:	4260fe19 	.word	0x4260fe19
    37a4:	fdeef7ff 	.word	0xfdeef7ff
    37a8:	f7ff4268 	.word	0xf7ff4268
    37ac:	1c38fe05 	.word	0x1c38fe05
    37b0:	f7ff2100 	.word	0xf7ff2100
    37b4:	1c38ff25 	.word	0x1c38ff25
    37b8:	f0002100 	.word	0xf0002100
    37bc:	e092fa03 	.word	0xe092fa03
    37c0:	26004f4d 	.word	0x26004f4d
    37c4:	9303683b 	.word	0x9303683b
    37c8:	d15d42b3 	.word	0xd15d42b3
    37cc:	24004e4b 	.word	0x24004e4b
    37d0:	42a76837 	.word	0x42a76837
    37d4:	e7dad170 	.word	0xe7dad170
    37d8:	f7ff1c30 	.word	0xf7ff1c30
    37dc:	6a44fe23 	.word	0x6a44fe23
    37e0:	d0582c00 	.word	0xd0582c00
    37e4:	28006a20 	.word	0x28006a20
    37e8:	6923d055 	.word	0x6923d055
    37ec:	93011c18 	.word	0x93011c18
    37f0:	fe18f7ff 	.word	0xfe18f7ff
    37f4:	31281c01 	.word	0x31281c01
    37f8:	1c05780a 	.word	0x1c05780a
    37fc:	35297022 	.word	0x35297022
    3800:	1c01782b 	.word	0x1c01782b
    3804:	312a7063 	.word	0x312a7063
    3808:	1c05780a 	.word	0x1c05780a
    380c:	352b70a2 	.word	0x352b70a2
    3810:	1c01782b 	.word	0x1c01782b
    3814:	312c70e3 	.word	0x312c70e3
    3818:	1c05780a 	.word	0x1c05780a
    381c:	352d7122 	.word	0x352d7122
    3820:	1c01782b 	.word	0x1c01782b
    3824:	312e7163 	.word	0x312e7163
    3828:	302f780a 	.word	0x302f780a
    382c:	780071a2 	.word	0x780071a2
    3830:	71e069a5 	.word	0x71e069a5
    3834:	f7ff9801 	.word	0xf7ff9801
    3838:	1c03fdf5 	.word	0x1c03fdf5
    383c:	78193328 	.word	0x78193328
    3840:	70291c02 	.word	0x70291c02
    3844:	78133229 	.word	0x78133229
    3848:	706b1c01 	.word	0x706b1c01
    384c:	780a312a 	.word	0x780a312a
    3850:	70aa1c03 	.word	0x70aa1c03
    3854:	7819332b 	.word	0x7819332b
    3858:	70e91c02 	.word	0x70e91c02
    385c:	7813322c 	.word	0x7813322c
    3860:	712b1c01 	.word	0x712b1c01
    3864:	780a312d 	.word	0x780a312d
    3868:	716a1c03 	.word	0x716a1c03
    386c:	7819332e 	.word	0x7819332e
    3870:	71a9302f 	.word	0x71a9302f
    3874:	71e87800 	.word	0x71e87800
    3878:	6a229d02 	.word	0x6a229d02
    387c:	1c20603d 	.word	0x1c20603d
    3880:	36014790 	.word	0x36014790
    3884:	d0a12e06 	.word	0xd0a12e06
    3888:	9a032101 	.word	0x9a032101
    388c:	910240b1 	.word	0x910240b1
    3890:	d0f6420a 	.word	0xd0f6420a
    3894:	9d02e7a0 	.word	0x9d02e7a0
    3898:	e7f2603d 	.word	0xe7f2603d
    389c:	1c206035 	.word	0x1c206035
    38a0:	fdc0f7ff 	.word	0xfdc0f7ff
    38a4:	28006a40 	.word	0x28006a40
    38a8:	0429d10b 	.word	0x0429d10b
    38ac:	d10d420f 	.word	0xd10d420f
    38b0:	2c063401 	.word	0x2c063401
    38b4:	e76ad100 	.word	0xe76ad100
    38b8:	40a52501 	.word	0x40a52501
    38bc:	d0f4422f 	.word	0xd0f4422f
    38c0:	6a43e7ec 	.word	0x6a43e7ec
    38c4:	d0f02b00 	.word	0xd0f02b00
    38c8:	e7ee4798 	.word	0xe7ee4798
    38cc:	60311c20 	.word	0x60311c20
    38d0:	f7ff3080 	.word	0xf7ff3080
    38d4:	6a40fda7 	.word	0x6a40fda7
    38d8:	d0e92800 	.word	0xd0e92800
    38dc:	2a006a42 	.word	0x2a006a42
    38e0:	4790d0e6 	.word	0x4790d0e6
    38e4:	b005e7e4 	.word	0xb005e7e4
    38e8:	46c0bdf0 	.word	0x46c0bdf0
    38ec:	40006144 	.word	0x40006144
    38f0:	40006148 	.word	0x40006148
    38f4:	2000f340 	.word	0x2000f340
    38f8:	400061ac 	.word	0x400061ac
    38fc:	400061bc 	.word	0x400061bc
    3900:	210f6903 	.word	0x210f6903
    3904:	400b061a 	.word	0x400b061a
    3908:	005b0fd0 	.word	0x005b0fd0
    390c:	4903181a 	.word	0x4903181a
    3910:	58400090 	.word	0x58400090
    3914:	d1002800 	.word	0xd1002800
    3918:	4770e7fe 	.word	0x4770e7fe
    391c:	2000f344 	.word	0x2000f344
    3920:	b5706803 	.word	0xb5706803
    3924:	220f691c 	.word	0x220f691c
    3928:	40140621 	.word	0x40140621
    392c:	00660fcd 	.word	0x00660fcd
    3930:	4b0e19ac 	.word	0x4b0e19ac
    3934:	58ca00a1 	.word	0x58ca00a1
    3938:	d0002a00 	.word	0xd0002a00
    393c:	50c8e7fe 	.word	0x50c8e7fe
    3940:	68446881 	.word	0x68446881
    3944:	1e651c0b 	.word	0x1e651c0b
    3948:	d20642aa 	.word	0xd20642aa
    394c:	1c1e3380 	.word	0x1c1e3380
    3950:	60333e80 	.word	0x60333e80
    3954:	32016670 	.word	0x32016670
    3958:	4d05e7f6 	.word	0x4d05e7f6
    395c:	19622300 	.word	0x19622300
    3960:	198c01d6 	.word	0x198c01d6
    3964:	66606023 	.word	0x66606023
    3968:	46c0bd70 	.word	0x46c0bd70
    396c:	2000f344 	.word	0x2000f344
    3970:	01ffffff 	.word	0x01ffffff
    3974:	f7ffb508 	.word	0xf7ffb508
    3978:	b672ffc3 	.word	0xb672ffc3
    397c:	2b0068c3 	.word	0x2b0068c3
    3980:	68c3d007 	.word	0x68c3d007
    3984:	6e5a6819 	.word	0x6e5a6819
    3988:	689160c1 	.word	0x689160c1
    398c:	60936019 	.word	0x60936019
    3990:	b662e7f4 	.word	0xb662e7f4
    3994:	0000bd08 	.word	0x0000bd08
    3998:	1c0cb538 	.word	0x1c0cb538
    399c:	f7ff1c15 	.word	0xf7ff1c15
    39a0:	6883ffaf 	.word	0x6883ffaf
    39a4:	d0422b00 	.word	0xd0422b00
    39a8:	6883b672 	.word	0x6883b672
    39ac:	68192200 	.word	0x68192200
    39b0:	601a6081 	.word	0x601a6081
    39b4:	2101b662 	.word	0x2101b662
    39b8:	491e6419 	.word	0x491e6419
    39bc:	430a042a 	.word	0x430a042a
    39c0:	2280645a 	.word	0x2280645a
    39c4:	18620151 	.word	0x18620151
    39c8:	030a0b11 	.word	0x030a0b11
    39cc:	649c2180 	.word	0x649c2180
    39d0:	018a64da 	.word	0x018a64da
    39d4:	0b0a18a1 	.word	0x0b0a18a1
    39d8:	22c00311 	.word	0x22c00311
    39dc:	01916519 	.word	0x01916519
    39e0:	0b111862 	.word	0x0b111862
    39e4:	2180030a 	.word	0x2180030a
    39e8:	01ca655a 	.word	0x01ca655a
    39ec:	0b2118a4 	.word	0x0b2118a4
    39f0:	659a030a 	.word	0x659a030a
    39f4:	b672661d 	.word	0xb672661d
    39f8:	68ec6e5d 	.word	0x68ec6e5d
    39fc:	d00d2c00 	.word	0xd00d2c00
    3a00:	680a68e9 	.word	0x680a68e9
    3a04:	d0012a00 	.word	0xd0012a00
    3a08:	e7fa1c11 	.word	0xe7fa1c11
    3a0c:	600b1c1a 	.word	0x600b1c1a
    3a10:	31406800 	.word	0x31406800
    3a14:	f7ff3240 	.word	0xf7ff3240
    3a18:	e005fd89 	.word	0xe005fd89
    3a1c:	60eb1c19 	.word	0x60eb1c19
    3a20:	31406800 	.word	0x31406800
    3a24:	fdb6f7ff 	.word	0xfdb6f7ff
    3a28:	2000b662 	.word	0x2000b662
    3a2c:	2001e001 	.word	0x2001e001
    3a30:	bd384240 	.word	0xbd384240
    3a34:	00008080 	.word	0x00008080
    3a38:	1c06b570 	.word	0x1c06b570
    3a3c:	1c141c0d 	.word	0x1c141c0d
    3a40:	1c291c30 	.word	0x1c291c30
    3a44:	f7ff1c22 	.word	0xf7ff1c22
    3a48:	3001ffa7 	.word	0x3001ffa7
    3a4c:	2000d0f8 	.word	0x2000d0f8
    3a50:	b508bd70 	.word	0xb508bd70
    3a54:	1c0a2100 	.word	0x1c0a2100
    3a58:	ffeef7ff 	.word	0xffeef7ff
    3a5c:	b510bd08 	.word	0xb510bd08
    3a60:	ff4ef7ff 	.word	0xff4ef7ff
    3a64:	d1002800 	.word	0xd1002800
    3a68:	68c3e7fe 	.word	0x68c3e7fe
    3a6c:	d0102b00 	.word	0xd0102b00
    3a70:	21686c5a 	.word	0x21686c5a
    3a74:	d000420a 	.word	0xd000420a
    3a78:	0611e7fe 	.word	0x0611e7fe
    3a7c:	681ad409 	.word	0x681ad409
    3a80:	60c26e59 	.word	0x60c26e59
    3a84:	688cb672 	.word	0x688cb672
    3a88:	608b601c 	.word	0x608b601c
    3a8c:	1c13b662 	.word	0x1c13b662
    3a90:	bd10e7ec 	.word	0xbd10e7ec
    3a94:	7802b510 	.word	0x7802b510
    3a98:	1c042360 	.word	0x1c042360
    3a9c:	2b404013 	.word	0x2b404013
    3aa0:	d806d00f 	.word	0xd806d00f
    3aa4:	d0092b00 	.word	0xd0092b00
    3aa8:	d1122b20 	.word	0xd1122b20
    3aac:	6842480b 	.word	0x6842480b
    3ab0:	2b60e009 	.word	0x2b60e009
    3ab4:	4b09d10d 	.word	0x4b09d10d
    3ab8:	e00468da 	.word	0xe00468da
    3abc:	68124a07 	.word	0x68124a07
    3ac0:	4806e001 	.word	0x4806e001
    3ac4:	2a006882 	.word	0x2a006882
    3ac8:	1c20d003 	.word	0x1c20d003
    3acc:	28004790 	.word	0x28004790
    3ad0:	1c20d002 	.word	0x1c20d002
    3ad4:	fd6ef7ff 	.word	0xfd6ef7ff
    3ad8:	46c0bd10 	.word	0x46c0bd10
    3adc:	2000e97c 	.word	0x2000e97c
    3ae0:	2100b508 	.word	0x2100b508
    3ae4:	ffd6f7ff 	.word	0xffd6f7ff
    3ae8:	b510bd08 	.word	0xb510bd08
    3aec:	1c047803 	.word	0x1c047803
    3af0:	210209da 	.word	0x210209da
    3af4:	d1002a00 	.word	0xd1002a00
    3af8:	f7ff2101 	.word	0xf7ff2101
    3afc:	1c20ffcb 	.word	0x1c20ffcb
    3b00:	ffadf7ff 	.word	0xffadf7ff
    3b04:	b510bd10 	.word	0xb510bd10
    3b08:	1c047803 	.word	0x1c047803
    3b0c:	210109da 	.word	0x210109da
    3b10:	d1002a00 	.word	0xd1002a00
    3b14:	f7ff2102 	.word	0xf7ff2102
    3b18:	1c20ffbd 	.word	0x1c20ffbd
    3b1c:	ff9ff7ff 	.word	0xff9ff7ff
    3b20:	b510bd10 	.word	0xb510bd10
    3b24:	88c31c04 	.word	0x88c31c04
    3b28:	780a7848 	.word	0x780a7848
    3b2c:	d0012802 	.word	0xd0012802
    3b30:	d1032807 	.word	0xd1032807
    3b34:	788878ca 	.word	0x788878ca
    3b38:	43020212 	.word	0x43020212
    3b3c:	429a69a0 	.word	0x429a69a0
    3b40:	1c1ad900 	.word	0x1c1ad900
    3b44:	ff78f7ff 	.word	0xff78f7ff
    3b48:	f7ff69e0 	.word	0xf7ff69e0
    3b4c:	2000ff82 	.word	0x2000ff82
    3b50:	6943bd10 	.word	0x6943bd10
    3b54:	68ddb570 	.word	0x68ddb570
    3b58:	cd082400 	.word	0xcd082400
    3b5c:	d00a2b00 	.word	0xd00a2b00
    3b60:	428e7a1e 	.word	0x428e7a1e
    3b64:	4294d1f9 	.word	0x4294d1f9
    3b68:	6819d103 	.word	0x6819d103
    3b6c:	ffd9f7ff 	.word	0xffd9f7ff
    3b70:	3401e002 	.word	0x3401e002
    3b74:	2001e7f1 	.word	0x2001e7f1
    3b78:	6943bd70 	.word	0x6943bd70
    3b7c:	691bb510 	.word	0x691bb510
    3b80:	2b001c02 	.word	0x2b001c02
    3b84:	6818d00c 	.word	0x6818d00c
    3b88:	2b007803 	.word	0x2b007803
    3b8c:	7841d008 	.word	0x7841d008
    3b90:	d1032905 	.word	0xd1032905
    3b94:	69147881 	.word	0x69147881
    3b98:	d00242a1 	.word	0xd00242a1
    3b9c:	e7f318c0 	.word	0xe7f318c0
    3ba0:	bd101c18 	.word	0xbd101c18
    3ba4:	79037942 	.word	0x79037942
    3ba8:	1c080211 	.word	0x1c080211
    3bac:	47704318 	.word	0x47704318
    3bb0:	230378c0 	.word	0x230378c0
    3bb4:	47704018 	.word	0x47704018
    3bb8:	60184b01 	.word	0x60184b01
    3bbc:	46c04770 	.word	0x46c04770
    3bc0:	2000f374 	.word	0x2000f374
    3bc4:	1c04b570 	.word	0x1c04b570
    3bc8:	d00e1e0d 	.word	0xd00e1e0d
    3bcc:	2e0068c6 	.word	0x2e0068c6
    3bd0:	f7ffd018 	.word	0xf7ffd018
    3bd4:	ce08fcff 	.word	0xce08fcff
    3bd8:	d0132b00 	.word	0xd0132b00
    3bdc:	42827a1a 	.word	0x42827a1a
    3be0:	6859d1f9 	.word	0x6859d1f9
    3be4:	d1f642a9 	.word	0xd1f642a9
    3be8:	1c0be000 	.word	0x1c0be000
    3bec:	42836920 	.word	0x42836920
    3bf0:	6123d000 	.word	0x6123d000
    3bf4:	681d4b04 	.word	0x681d4b04
    3bf8:	d0012d00 	.word	0xd0012d00
    3bfc:	47a81c20 	.word	0x47a81c20
    3c00:	e0002001 	.word	0xe0002001
    3c04:	bd702000 	.word	0xbd702000
    3c08:	2000f374 	.word	0x2000f374
    3c0c:	1c04b5f8 	.word	0x1c04b5f8
    3c10:	1c0e7840 	.word	0x1c0e7840
    3c14:	d900280b 	.word	0xd900280b
    3c18:	f000e0ea 	.word	0xf000e0ea
    3c1c:	2a06fb93 	.word	0x2a06fb93
    3c20:	afe93ee9 	.word	0xafe93ee9
    3c24:	bacce970 	.word	0xbacce970
    3c28:	25006353 	.word	0x25006353
    3c2c:	d00042a9 	.word	0xd00042a9
    3c30:	7822e0df 	.word	0x7822e0df
    3c34:	400a211f 	.word	0x400a211f
    3c38:	d0162a01 	.word	0xd0162a01
    3c3c:	d01142aa 	.word	0xd01142aa
    3c40:	d0002a02 	.word	0xd0002a02
    3c44:	88a7e0d5 	.word	0x88a7e0d5
    3c48:	230f486b 	.word	0x230f486b
    3c4c:	181e403b 	.word	0x181e403b
    3c50:	680f00b1 	.word	0x680f00b1
    3c54:	496a4b69 	.word	0x496a4b69
    3c58:	1e58403b 	.word	0x1e58403b
    3c5c:	800b4183 	.word	0x800b4183
    3c60:	e03b69a0 	.word	0xe03b69a0
    3c64:	496769a0 	.word	0x496769a0
    3c68:	69a0e001 	.word	0x69a0e001
    3c6c:	22024966 	.word	0x22024966
    3c70:	2500e034 	.word	0x2500e034
    3c74:	d00042a9 	.word	0xd00042a9
    3c78:	7822e0bb 	.word	0x7822e0bb
    3c7c:	4011211f 	.word	0x4011211f
    3c80:	d0002902 	.word	0xd0002902
    3c84:	88a7e0b5 	.word	0x88a7e0b5
    3c88:	230f485b 	.word	0x230f485b
    3c8c:	181e403b 	.word	0x181e403b
    3c90:	683a00b7 	.word	0x683a00b7
    3c94:	4010485d 	.word	0x4010485d
    3c98:	2500e012 	.word	0x2500e012
    3c9c:	d00042a9 	.word	0xd00042a9
    3ca0:	7827e0a7 	.word	0x7827e0a7
    3ca4:	4038201f 	.word	0x4038201f
    3ca8:	d0002802 	.word	0xd0002802
    3cac:	88a6e0a1 	.word	0x88a6e0a1
    3cb0:	4951220f 	.word	0x4951220f
    3cb4:	18534032 	.word	0x18534032
    3cb8:	6838009f 	.word	0x6838009f
    3cbc:	43304e4f 	.word	0x43304e4f
    3cc0:	e0186038 	.word	0xe0186038
    3cc4:	42a92500 	.word	0x42a92500
    3cc8:	e092d000 	.word	0xe092d000
    3ccc:	201f7822 	.word	0x201f7822
    3cd0:	2a014002 	.word	0x2a014002
    3cd4:	e08cd000 	.word	0xe08cd000
    3cd8:	494d69a0 	.word	0x494d69a0
    3cdc:	feacf7ff 	.word	0xfeacf7ff
    3ce0:	e00969e0 	.word	0xe00969e0
    3ce4:	42a92500 	.word	0x42a92500
    3ce8:	e082d000 	.word	0xe082d000
    3cec:	231f7822 	.word	0x231f7822
    3cf0:	2b014013 	.word	0x2b014013
    3cf4:	69a0d17d 	.word	0x69a0d17d
    3cf8:	feabf7ff 	.word	0xfeabf7ff
    3cfc:	2900e079 	.word	0x2900e079
    3d00:	78e0d15b 	.word	0x78e0d15b
    3d04:	28063801 	.word	0x28063801
    3d08:	f000d872 	.word	0xf000d872
    3d0c:	0704fb1b 	.word	0x0704fb1b
    3d10:	10717121 	.word	0x10717121
    3d14:	69610013 	.word	0x69610013
    3d18:	e0236809 	.word	0xe0236809
    3d1c:	f7ff6960 	.word	0xf7ff6960
    3d20:	78a2fc59 	.word	0x78a2fc59
    3d24:	1c201c01 	.word	0x1c201c01
    3d28:	d10a2902 	.word	0xd10a2902
    3d2c:	6963e00d 	.word	0x6963e00d
    3d30:	e0176899 	.word	0xe0176899
    3d34:	f7ff6960 	.word	0xf7ff6960
    3d38:	78a2fc4d 	.word	0x78a2fc4d
    3d3c:	d1022802 	.word	0xd1022802
    3d40:	21011c20 	.word	0x21011c20
    3d44:	1c20e001 	.word	0x1c20e001
    3d48:	f7ff2102 	.word	0xf7ff2102
    3d4c:	e00cff02 	.word	0xe00cff02
    3d50:	28ee78a0 	.word	0x28ee78a0
    3d54:	1c20d102 	.word	0x1c20d102
    3d58:	e004492e 	.word	0xe004492e
    3d5c:	26006967 	.word	0x26006967
    3d60:	e007687d 	.word	0xe007687d
    3d64:	f7ff1c20 	.word	0xf7ff1c20
    3d68:	1c05fedc 	.word	0x1c05fedc
    3d6c:	4286e041 	.word	0x4286e041
    3d70:	3601d0f8 	.word	0x3601d0f8
    3d74:	2900cd02 	.word	0x2900cd02
    3d78:	e039d1f9 	.word	0xe039d1f9
    3d7c:	d11c2900 	.word	0xd11c2900
    3d80:	696078a1 	.word	0x696078a1
    3d84:	fc48f7ff 	.word	0xfc48f7ff
    3d88:	f7ff69a0 	.word	0xf7ff69a0
    3d8c:	1c35fe62 	.word	0x1c35fe62
    3d90:	2900e02f 	.word	0x2900e02f
    3d94:	78a7d111 	.word	0x78a7d111
    3d98:	1c396960 	.word	0x1c396960
    3d9c:	ff12f7ff 	.word	0xff12f7ff
    3da0:	28002501 	.word	0x28002501
    3da4:	2f00d025 	.word	0x2f00d025
    3da8:	6960d103 	.word	0x6960d103
    3dac:	f7ff1c31 	.word	0xf7ff1c31
    3db0:	69a0fc27 	.word	0x69a0fc27
    3db4:	2900e018 	.word	0x2900e018
    3db8:	2202d004 	.word	0x2202d004
    3dbc:	419b42b2 	.word	0x419b42b2
    3dc0:	e016425d 	.word	0xe016425d
    3dc4:	250188e1 	.word	0x250188e1
    3dc8:	d11242a9 	.word	0xd11242a9
    3dcc:	72266965 	.word	0x72266965
    3dd0:	2e00692e 	.word	0x2e00692e
    3dd4:	6872d001 	.word	0x6872d001
    3dd8:	1c217222 	.word	0x1c217222
    3ddc:	69a03108 	.word	0x69a03108
    3de0:	f7ff2201 	.word	0xf7ff2201
    3de4:	69e0fe29 	.word	0x69e0fe29
    3de8:	fe33f7ff 	.word	0xfe33f7ff
    3dec:	e0002500 	.word	0xe0002500
    3df0:	1c282501 	.word	0x1c282501
    3df4:	46c0bdf8 	.word	0x46c0bdf8
    3df8:	10001870 	.word	0x10001870
    3dfc:	00010001 	.word	0x00010001
    3e00:	2000fb00 	.word	0x2000fb00
    3e04:	2000f37a 	.word	0x2000f37a
    3e08:	2000f378 	.word	0x2000f378
    3e0c:	fffefffe 	.word	0xfffefffe
    3e10:	2000f37c 	.word	0x2000f37c
    3e14:	2000ed41 	.word	0x2000ed41
    3e18:	47706001 	.word	0x47706001
    3e1c:	4b074a06 	.word	0x4b074a06
    3e20:	601a4907 	.word	0x601a4907
    3e24:	60084a07 	.word	0x60084a07
    3e28:	60104b07 	.word	0x60104b07
    3e2c:	206c4a07 	.word	0x206c4a07
    3e30:	60182140 	.word	0x60182140
    3e34:	47706011 	.word	0x47706011
    3e38:	00000808 	.word	0x00000808
    3e3c:	40086c84 	.word	0x40086c84
    3e40:	400a1010 	.word	0x400a1010
    3e44:	400a1014 	.word	0x400a1014
    3e48:	400a1018 	.word	0x400a1018
    3e4c:	400a1000 	.word	0x400a1000
    3e50:	49084a07 	.word	0x49084a07
    3e54:	601323c1 	.word	0x601323c1
    3e58:	4b07600b 	.word	0x4b07600b
    3e5c:	60184a07 	.word	0x60184a07
    3e60:	4b084907 	.word	0x4b084907
    3e64:	206c6010 	.word	0x206c6010
    3e68:	60082240 	.word	0x60082240
    3e6c:	4770601a 	.word	0x4770601a
    3e70:	4008610c 	.word	0x4008610c
    3e74:	40086110 	.word	0x40086110
    3e78:	400e0010 	.word	0x400e0010
    3e7c:	400e0014 	.word	0x400e0014
    3e80:	400e0018 	.word	0x400e0018
    3e84:	400e0000 	.word	0x400e0000
    3e88:	490d4a0c 	.word	0x490d4a0c
    3e8c:	20202308 	.word	0x20202308
    3e90:	60086013 	.word	0x60086013
    3e94:	4213680a 	.word	0x4213680a
    3e98:	4b0ad10b 	.word	0x4b0ad10b
    3e9c:	e0052208 	.word	0xe0052208
    3ea0:	42026808 	.word	0x42026808
    3ea4:	3b02d105 	.word	0x3b02d105
    3ea8:	d0022b00 	.word	0xd0022b00
    3eac:	42026808 	.word	0x42026808
    3eb0:	4b02d0f6 	.word	0x4b02d0f6
    3eb4:	60192120 	.word	0x60192120
    3eb8:	46c04770 	.word	0x46c04770
    3ebc:	400a1018 	.word	0x400a1018
    3ec0:	400a1000 	.word	0x400a1000
    3ec4:	00002710 	.word	0x00002710
    3ec8:	490d4a0c 	.word	0x490d4a0c
    3ecc:	20202308 	.word	0x20202308
    3ed0:	60086013 	.word	0x60086013
    3ed4:	4213680a 	.word	0x4213680a
    3ed8:	4b0ad10b 	.word	0x4b0ad10b
    3edc:	e0052208 	.word	0xe0052208
    3ee0:	42026808 	.word	0x42026808
    3ee4:	3b02d105 	.word	0x3b02d105
    3ee8:	d0022b00 	.word	0xd0022b00
    3eec:	42026808 	.word	0x42026808
    3ef0:	4b02d0f6 	.word	0x4b02d0f6
    3ef4:	60192120 	.word	0x60192120
    3ef8:	46c04770 	.word	0x46c04770
    3efc:	400e0018 	.word	0x400e0018
    3f00:	400e0000 	.word	0x400e0000
    3f04:	00002710 	.word	0x00002710
    3f08:	21204b0e 	.word	0x21204b0e
    3f0c:	4211681a 	.word	0x4211681a
    3f10:	4b0dd001 	.word	0x4b0dd001
    3f14:	4a0d6019 	.word	0x4a0d6019
    3f18:	6010490b 	.word	0x6010490b
    3f1c:	60082008 	.word	0x60082008
    3f20:	680b4908 	.word	0x680b4908
    3f24:	d10b4218 	.word	0xd10b4218
    3f28:	22084b09 	.word	0x22084b09
    3f2c:	6808e005 	.word	0x6808e005
    3f30:	d1054202 	.word	0xd1054202
    3f34:	2b003b02 	.word	0x2b003b02
    3f38:	6808d002 	.word	0x6808d002
    3f3c:	d0f64202 	.word	0xd0f64202
    3f40:	46c04770 	.word	0x46c04770
    3f44:	400a1000 	.word	0x400a1000
    3f48:	400a1018 	.word	0x400a1018
    3f4c:	400a1008 	.word	0x400a1008
    3f50:	00002710 	.word	0x00002710
    3f54:	21204b0e 	.word	0x21204b0e
    3f58:	4211681a 	.word	0x4211681a
    3f5c:	4b0dd001 	.word	0x4b0dd001
    3f60:	4a0d6019 	.word	0x4a0d6019
    3f64:	6010490b 	.word	0x6010490b
    3f68:	60082008 	.word	0x60082008
    3f6c:	680b4908 	.word	0x680b4908
    3f70:	d10b4218 	.word	0xd10b4218
    3f74:	22084b09 	.word	0x22084b09
    3f78:	6808e005 	.word	0x6808e005
    3f7c:	d1054202 	.word	0xd1054202
    3f80:	2b003b02 	.word	0x2b003b02
    3f84:	6808d002 	.word	0x6808d002
    3f88:	d0f64202 	.word	0xd0f64202
    3f8c:	46c04770 	.word	0x46c04770
    3f90:	400e0000 	.word	0x400e0000
    3f94:	400e0018 	.word	0x400e0018
    3f98:	400e0008 	.word	0x400e0008
    3f9c:	00002710 	.word	0x00002710
    3fa0:	20204b0e 	.word	0x20204b0e
    3fa4:	4210681a 	.word	0x4210681a
    3fa8:	490dd001 	.word	0x490dd001
    3fac:	4a0c6008 	.word	0x4a0c6008
    3fb0:	490a2308 	.word	0x490a2308
    3fb4:	68086013 	.word	0x68086013
    3fb8:	d10b4203 	.word	0xd10b4203
    3fbc:	22084b09 	.word	0x22084b09
    3fc0:	6808e005 	.word	0x6808e005
    3fc4:	d1054202 	.word	0xd1054202
    3fc8:	2b003b02 	.word	0x2b003b02
    3fcc:	6808d002 	.word	0x6808d002
    3fd0:	d0f64202 	.word	0xd0f64202
    3fd4:	680b4904 	.word	0x680b4904
    3fd8:	4770b2d8 	.word	0x4770b2d8
    3fdc:	400a1000 	.word	0x400a1000
    3fe0:	400a1018 	.word	0x400a1018
    3fe4:	00002710 	.word	0x00002710
    3fe8:	400a1008 	.word	0x400a1008
    3fec:	21204b12 	.word	0x21204b12
    3ff0:	4211681a 	.word	0x4211681a
    3ff4:	4b11d001 	.word	0x4b11d001
    3ff8:	22046019 	.word	0x22046019
    3ffc:	d0182800 	.word	0xd0182800
    4000:	600a490d 	.word	0x600a490d
    4004:	23084a0d 	.word	0x23084a0d
    4008:	6013490b 	.word	0x6013490b
    400c:	42036808 	.word	0x42036808
    4010:	4b0bd10b 	.word	0x4b0bd10b
    4014:	e0052208 	.word	0xe0052208
    4018:	42026808 	.word	0x42026808
    401c:	3b02d105 	.word	0x3b02d105
    4020:	d0022b00 	.word	0xd0022b00
    4024:	42026808 	.word	0x42026808
    4028:	4906d0f6 	.word	0x4906d0f6
    402c:	b2d8680b 	.word	0xb2d8680b
    4030:	48024770 	.word	0x48024770
    4034:	e7e56002 	.word	0xe7e56002
    4038:	400e0000 	.word	0x400e0000
    403c:	400e0018 	.word	0x400e0018
    4040:	00002710 	.word	0x00002710
    4044:	400e0008 	.word	0x400e0008
    4048:	20204b06 	.word	0x20204b06
    404c:	4210681a 	.word	0x4210681a
    4050:	4905d001 	.word	0x4905d001
    4054:	4b036008 	.word	0x4b036008
    4058:	22104903 	.word	0x22104903
    405c:	601a2008 	.word	0x601a2008
    4060:	47706008 	.word	0x47706008
    4064:	400a1000 	.word	0x400a1000
    4068:	400a1018 	.word	0x400a1018
    406c:	20204b06 	.word	0x20204b06
    4070:	4210681a 	.word	0x4210681a
    4074:	4905d001 	.word	0x4905d001
    4078:	4b036008 	.word	0x4b036008
    407c:	22104903 	.word	0x22104903
    4080:	601a2008 	.word	0x601a2008
    4084:	47706008 	.word	0x47706008
    4088:	400e0000 	.word	0x400e0000
    408c:	400e0018 	.word	0x400e0018
    4090:	465fb5f0 	.word	0x465fb5f0
    4094:	4656464d 	.word	0x4656464d
    4098:	b4f04644 	.word	0xb4f04644
    409c:	469cb083 	.word	0x469cb083
    40a0:	781cab0c 	.word	0x781cab0c
    40a4:	782ead0d 	.word	0x782ead0d
    40a8:	46a3af0e 	.word	0x46a3af0e
    40ac:	46b1ac10 	.word	0x46b1ac10
    40b0:	7827783e 	.word	0x7827783e
    40b4:	781dab0f 	.word	0x781dab0f
    40b8:	4b1a9701 	.word	0x4b1a9701
    40bc:	d0242800 	.word	0xd0242800
    40c0:	4f1a4819 	.word	0x4f1a4819
    40c4:	683c6003 	.word	0x683c6003
    40c8:	43232301 	.word	0x43232301
    40cc:	603b4c18 	.word	0x603b4c18
    40d0:	4f194818 	.word	0x4f194818
    40d4:	230046a0 	.word	0x230046a0
    40d8:	46446003 	.word	0x46446003
    40dc:	6023464b 	.word	0x6023464b
    40e0:	465b4311 	.word	0x465b4311
    40e4:	021c4662 	.word	0x021c4662
    40e8:	43214311 	.word	0x43214311
    40ec:	21026039 	.word	0x21026039
    40f0:	9e014331 	.word	0x9e014331
    40f4:	43314329 	.word	0x43314329
    40f8:	6005b2cd 	.word	0x6005b2cd
    40fc:	bc3cb003 	.word	0xbc3cb003
    4100:	46994690 	.word	0x46994690
    4104:	46ab46a2 	.word	0x46ab46a2
    4108:	4f0cbdf0 	.word	0x4f0cbdf0
    410c:	603b480c 	.word	0x603b480c
    4110:	27016803 	.word	0x27016803
    4114:	6007431f 	.word	0x6007431f
    4118:	4f0b480a 	.word	0x4f0b480a
    411c:	480b4680 	.word	0x480b4680
    4120:	46c0e7d9 	.word	0x46c0e7d9
    4124:	09000800 	.word	0x09000800
    4128:	40050098 	.word	0x40050098
    412c:	40051628 	.word	0x40051628
    4130:	400c5010 	.word	0x400c5010
    4134:	400c5004 	.word	0x400c5004
    4138:	400c5000 	.word	0x400c5000
    413c:	40050094 	.word	0x40050094
    4140:	40051518 	.word	0x40051518
    4144:	40083010 	.word	0x40083010
    4148:	40083000 	.word	0x40083000
    414c:	40083004 	.word	0x40083004
    4150:	2800b530 	.word	0x2800b530
    4154:	4d0dd116 	.word	0x4d0dd116
    4158:	24024b0d 	.word	0x24024b0d
    415c:	4214681a 	.word	0x4214681a
    4160:	6029d0fc 	.word	0x6029d0fc
    4164:	d10b2800 	.word	0xd10b2800
    4168:	21104809 	.word	0x21104809
    416c:	42216804 	.word	0x42216804
    4170:	2004d1fc 	.word	0x2004d1fc
    4174:	4210681a 	.word	0x4210681a
    4178:	682dd0fc 	.word	0x682dd0fc
    417c:	bd30b2a8 	.word	0xbd30b2a8
    4180:	e7f24804 	.word	0xe7f24804
    4184:	4b034d04 	.word	0x4b034d04
    4188:	46c0e7e7 	.word	0x46c0e7e7
    418c:	40083008 	.word	0x40083008
    4190:	4008300c 	.word	0x4008300c
    4194:	400c500c 	.word	0x400c500c
    4198:	400c5008 	.word	0x400c5008
    419c:	46c0e7fe 	.word	0x46c0e7fe
    41a0:	46c04770 	.word	0x46c04770
    41a4:	4b504a4f 	.word	0x4b504a4f
    41a8:	d21f429a 	.word	0xd21f429a
    41ac:	1d141cdf 	.word	0x1d141cdf
    41b0:	08811b38 	.word	0x08811b38
    41b4:	008f3101 	.word	0x008f3101
    41b8:	1f384b4c 	.word	0x1f384b4c
    41bc:	18fe0741 	.word	0x18fe0741
    41c0:	cb020fc8 	.word	0xcb020fc8
    41c4:	42b36011 	.word	0x42b36011
    41c8:	2800d00f 	.word	0x2800d00f
    41cc:	cb01d003 	.word	0xcb01d003
    41d0:	42b3c401 	.word	0x42b3c401
    41d4:	1c18d009 	.word	0x1c18d009
    41d8:	1c21c820 	.word	0x1c21c820
    41dc:	685bc120 	.word	0x685bc120
    41e0:	1d036063 	.word	0x1d036063
    41e4:	42b31d0c 	.word	0x42b31d0c
    41e8:	19d2d1f5 	.word	0x19d2d1f5
    41ec:	42824840 	.word	0x42824840
    41f0:	1cc4d216 	.word	0x1cc4d216
    41f4:	1ae51d13 	.word	0x1ae51d13
    41f8:	310108a9 	.word	0x310108a9
    41fc:	18100088 	.word	0x18100088
    4200:	21001ac4 	.word	0x21001ac4
    4204:	d5080765 	.word	0xd5080765
    4208:	1c1a6011 	.word	0x1c1a6011
    420c:	60113304 	.word	0x60113304
    4210:	d0054283 	.word	0xd0054283
    4214:	60191d1a 	.word	0x60191d1a
    4218:	60111d13 	.word	0x60111d13
    421c:	d1f94283 	.word	0xd1f94283
    4220:	49354834 	.word	0x49354834
    4224:	d21b4288 	.word	0xd21b4288
    4228:	1d063103 	.word	0x1d063103
    422c:	08bd1b8f 	.word	0x08bd1b8f
    4230:	1c6f2401 	.word	0x1c6f2401
    4234:	6802402c 	.word	0x6802402c
    4238:	47902501 	.word	0x47902501
    423c:	d00f42bd 	.word	0xd00f42bd
    4240:	d0042c00 	.word	0xd0042c00
    4244:	2502ce08 	.word	0x2502ce08
    4248:	42bd4798 	.word	0x42bd4798
    424c:	1c34d008 	.word	0x1c34d008
    4250:	4780cc01 	.word	0x4780cc01
    4254:	68763502 	.word	0x68763502
    4258:	1d2647b0 	.word	0x1d2647b0
    425c:	d1f642bd 	.word	0xd1f642bd
    4260:	49274b26 	.word	0x49274b26
    4264:	d21b428b 	.word	0xd21b428b
    4268:	1d1e3103 	.word	0x1d1e3103
    426c:	08bd1b8f 	.word	0x08bd1b8f
    4270:	1c6f2401 	.word	0x1c6f2401
    4274:	681a402c 	.word	0x681a402c
    4278:	47902501 	.word	0x47902501
    427c:	d00f42bd 	.word	0xd00f42bd
    4280:	d0042c00 	.word	0xd0042c00
    4284:	2502ce01 	.word	0x2502ce01
    4288:	42bd4780 	.word	0x42bd4780
    428c:	1c34d008 	.word	0x1c34d008
    4290:	4798cc08 	.word	0x4798cc08
    4294:	68763502 	.word	0x68763502
    4298:	1d2647b0 	.word	0x1d2647b0
    429c:	d1f642bd 	.word	0xd1f642bd
    42a0:	fdc8f7fd 	.word	0xfdc8f7fd
    42a4:	49184817 	.word	0x49184817
    42a8:	d21b4288 	.word	0xd21b4288
    42ac:	1d063103 	.word	0x1d063103
    42b0:	08bd1b8f 	.word	0x08bd1b8f
    42b4:	1c6f2401 	.word	0x1c6f2401
    42b8:	6802402c 	.word	0x6802402c
    42bc:	47902501 	.word	0x47902501
    42c0:	d00f42bd 	.word	0xd00f42bd
    42c4:	d0042c00 	.word	0xd0042c00
    42c8:	2502ce08 	.word	0x2502ce08
    42cc:	42bd4798 	.word	0x42bd4798
    42d0:	1c34d008 	.word	0x1c34d008
    42d4:	4780cc01 	.word	0x4780cc01
    42d8:	68763502 	.word	0x68763502
    42dc:	1d2647b0 	.word	0x1d2647b0
    42e0:	d1f642bd 	.word	0xd1f642bd
    42e4:	2000ef30 	.word	0x2000ef30
    42e8:	2000ef30 	.word	0x2000ef30
    42ec:	2000ec6c 	.word	0x2000ec6c
    42f0:	2000fb04 	.word	0x2000fb04
    42f4:	2000ec6c 	.word	0x2000ec6c
    42f8:	2000ec6c 	.word	0x2000ec6c
    42fc:	2000ec6c 	.word	0x2000ec6c
    4300:	2000ec6c 	.word	0x2000ec6c
    4304:	2000ec6c 	.word	0x2000ec6c
    4308:	2000ec6c 	.word	0x2000ec6c
    430c:	4a040943 	.word	0x4a040943
    4310:	188b0099 	.word	0x188b0099
    4314:	4008211f 	.word	0x4008211f
    4318:	40822201 	.word	0x40822201
    431c:	4770601a 	.word	0x4770601a
    4320:	e000e100 	.word	0xe000e100
    4324:	d803281f 	.word	0xd803281f
    4328:	18c04b04 	.word	0x18c04b04
    432c:	47707001 	.word	0x47707001
    4330:	4b03220f 	.word	0x4b03220f
    4334:	18c04010 	.word	0x18c04010
    4338:	e7f87001 	.word	0xe7f87001
    433c:	e000e400 	.word	0xe000e400
    4340:	e000ed14 	.word	0xe000ed14
    4344:	4671b402 	.word	0x4671b402
    4348:	00490849 	.word	0x00490849
    434c:	00495c09 	.word	0x00495c09
    4350:	bc02448e 	.word	0xbc02448e
    4354:	46c04770 	.word	0x46c04770
    4358:	d0342900 	.word	0xd0342900
    435c:	22002301 	.word	0x22002301
    4360:	4288b410 	.word	0x4288b410
    4364:	2401d32c 	.word	0x2401d32c
    4368:	42a10724 	.word	0x42a10724
    436c:	4281d204 	.word	0x4281d204
    4370:	0109d202 	.word	0x0109d202
    4374:	e7f8011b 	.word	0xe7f8011b
    4378:	42a100e4 	.word	0x42a100e4
    437c:	4281d204 	.word	0x4281d204
    4380:	0049d202 	.word	0x0049d202
    4384:	e7f8005b 	.word	0xe7f8005b
    4388:	d3014288 	.word	0xd3014288
    438c:	431a1a40 	.word	0x431a1a40
    4390:	42a0084c 	.word	0x42a0084c
    4394:	1b00d302 	.word	0x1b00d302
    4398:	4322085c 	.word	0x4322085c
    439c:	42a0088c 	.word	0x42a0088c
    43a0:	1b00d302 	.word	0x1b00d302
    43a4:	4322089c 	.word	0x4322089c
    43a8:	42a008cc 	.word	0x42a008cc
    43ac:	1b00d302 	.word	0x1b00d302
    43b0:	432208dc 	.word	0x432208dc
    43b4:	d0032800 	.word	0xd0032800
    43b8:	d001091b 	.word	0xd001091b
    43bc:	e7e30909 	.word	0xe7e30909
    43c0:	bc101c10 	.word	0xbc101c10
    43c4:	28004770 	.word	0x28004770
    43c8:	2000d001 	.word	0x2000d001
    43cc:	b40743c0 	.word	0xb40743c0
    43d0:	a1024802 	.word	0xa1024802
    43d4:	90021840 	.word	0x90021840
    43d8:	46c0bd03 	.word	0x46c0bd03
    43dc:	00000019 	.word	0x00000019
    43e0:	d0f02900 	.word	0xd0f02900
    43e4:	f7ffb503 	.word	0xf7ffb503
    43e8:	bc0effb9 	.word	0xbc0effb9
    43ec:	1a894342 	.word	0x1a894342
    43f0:	46c04718 	.word	0x46c04718
    43f4:	46c04770 	.word	0x46c04770
    43f8:	0403469c 	.word	0x0403469c
    43fc:	0c1bb5f0 	.word	0x0c1bb5f0
    4400:	0c3f0417 	.word	0x0c3f0417
    4404:	1c1e0c15 	.word	0x1c1e0c15
    4408:	0c001c04 	.word	0x0c001c04
    440c:	436b437e 	.word	0x436b437e
    4410:	43454347 	.word	0x43454347
    4414:	0c3018fb 	.word	0x0c3018fb
    4418:	42871818 	.word	0x42871818
    441c:	2780d902 	.word	0x2780d902
    4420:	18ed027b 	.word	0x18ed027b
    4424:	19ed0c07 	.word	0x19ed0c07
    4428:	437c4667 	.word	0x437c4667
    442c:	0436434a 	.word	0x0436434a
    4430:	18a10c33 	.word	0x18a10c33
    4434:	19490400 	.word	0x19490400
    4438:	bdf018c0 	.word	0xbdf018c0
    443c:	464fb5f0 	.word	0x464fb5f0
    4440:	b4c04646 	.word	0xb4c04646
    4444:	d9722a0f 	.word	0xd9722a0f
    4448:	43031c0b 	.word	0x43031c0b
    444c:	d000079c 	.word	0xd000079c
    4450:	1c17e090 	.word	0x1c17e090
    4454:	093c3f10 	.word	0x093c3f10
    4458:	01273401 	.word	0x01273401
    445c:	1c3b680c 	.word	0x1c3b680c
    4460:	3b106004 	.word	0x3b106004
    4464:	684b06de 	.word	0x684b06de
    4468:	604319cd 	.word	0x604319cd
    446c:	0ff6688c 	.word	0x0ff6688c
    4470:	68cb6084 	.word	0x68cb6084
    4474:	60c31c04 	.word	0x60c31c04
    4478:	33101c0b 	.word	0x33101c0b
    447c:	429d3410 	.word	0x429d3410
    4480:	2e00d027 	.word	0x2e00d027
    4484:	6819d00b 	.word	0x6819d00b
    4488:	685e6021 	.word	0x685e6021
    448c:	68996066 	.word	0x68996066
    4490:	68de60a1 	.word	0x68de60a1
    4494:	60e63310 	.word	0x60e63310
    4498:	429d3410 	.word	0x429d3410
    449c:	6819d019 	.word	0x6819d019
    44a0:	685e6021 	.word	0x685e6021
    44a4:	68996066 	.word	0x68996066
    44a8:	68de60a1 	.word	0x68de60a1
    44ac:	60e61c19 	.word	0x60e61c19
    44b0:	1c26691b 	.word	0x1c26691b
    44b4:	694c6123 	.word	0x694c6123
    44b8:	698b6174 	.word	0x698b6174
    44bc:	69cc61b3 	.word	0x69cc61b3
    44c0:	61f43110 	.word	0x61f43110
    44c4:	36101c0b 	.word	0x36101c0b
    44c8:	33101c34 	.word	0x33101c34
    44cc:	429d3410 	.word	0x429d3410
    44d0:	183fd1e5 	.word	0x183fd1e5
    44d4:	46b8210f 	.word	0x46b8210f
    44d8:	29034011 	.word	0x29034011
    44dc:	3904d94d 	.word	0x3904d94d
    44e0:	00b3088e 	.word	0x00b3088e
    44e4:	18ec3304 	.word	0x18ec3304
    44e8:	3b0446a4 	.word	0x3b0446a4
    44ec:	075f1c2c 	.word	0x075f1c2c
    44f0:	4641cc08 	.word	0x4641cc08
    44f4:	c10846b1 	.word	0xc10846b1
    44f8:	45640ffe 	.word	0x45640ffe
    44fc:	2e00d00f 	.word	0x2e00d00f
    4500:	cc80d003 	.word	0xcc80d003
    4504:	4564c180 	.word	0x4564c180
    4508:	1c27d009 	.word	0x1c27d009
    450c:	1c0ecf08 	.word	0x1c0ecf08
    4510:	6864c608 	.word	0x6864c608
    4514:	1d3c604c 	.word	0x1d3c604c
    4518:	45641d31 	.word	0x45641d31
    451c:	4649d1f5 	.word	0x4649d1f5
    4520:	008e3101 	.word	0x008e3101
    4524:	19ad2703 	.word	0x19ad2703
    4528:	4446403a 	.word	0x4446403a
    452c:	1c0de001 	.word	0x1c0de001
    4530:	2a001c06 	.word	0x2a001c06
    4534:	782fd01a 	.word	0x782fd01a
    4538:	43f318b2 	.word	0x43f318b2
    453c:	240118d1 	.word	0x240118d1
    4540:	36017037 	.word	0x36017037
    4544:	3501400c 	.word	0x3501400c
    4548:	d00f4296 	.word	0xd00f4296
    454c:	d0052c00 	.word	0xd0052c00
    4550:	3501782b 	.word	0x3501782b
    4554:	36017033 	.word	0x36017033
    4558:	d0074296 	.word	0xd0074296
    455c:	70317829 	.word	0x70317829
    4560:	3502786c 	.word	0x3502786c
    4564:	36027074 	.word	0x36027074
    4568:	d1f74296 	.word	0xd1f74296
    456c:	4690bc0c 	.word	0x4690bc0c
    4570:	bdf04699 	.word	0xbdf04699
    4574:	1c0d1c06 	.word	0x1c0d1c06
    4578:	1c3ee7dd 	.word	0x1c3ee7dd
    457c:	e7d81c0a 	.word	0xe7d81c0a
    4580:	780a1c03 	.word	0x780a1c03
    4584:	701a3101 	.word	0x701a3101
    4588:	2a003301 	.word	0x2a003301
    458c:	4770d1f9 	.word	0x4770d1f9
    4590:	5cc22300 	.word	0x5cc22300
    4594:	2a003301 	.word	0x2a003301
    4598:	1e58d1fb 	.word	0x1e58d1fb
    459c:	46c04770 	.word	0x46c04770
    45a0:	2e317620 	.word	0x2e317620
    45a4:	2d302e30 	.word	0x2d302e30
    45a8:	30316372 	.word	0x30316372
    45ac:	672d342d 	.word	0x672d342d
    45b0:	37356138 	.word	0x37356138
    45b4:	2d366435 	.word	0x2d366435
    45b8:	74726964 	.word	0x74726964
    45bc:	30322079 	.word	0x30322079
    45c0:	302d3032 	.word	0x302d3032
    45c4:	37302d35 	.word	0x37302d35
    45c8:	00000000 	.word	0x00000000
    45cc:	2000dfbd 	.word	0x2000dfbd
    45d0:	00000000 	.word	0x00000000
    45d4:	2000c305 	.word	0x2000c305
    45d8:	00000000 	.word	0x00000000
    45dc:	2000ed1f 	.word	0x2000ed1f
    45e0:	2000ed23 	.word	0x2000ed23
    45e4:	2000ed74 	.word	0x2000ed74
    45e8:	2000ecd7 	.word	0x2000ecd7
    45ec:	00000000 	.word	0x00000000
    45f0:	33323130 	.word	0x33323130
    45f4:	37363534 	.word	0x37363534
    45f8:	42413938 	.word	0x42413938
    45fc:	46454443 	.word	0x46454443
    4600:	006080e0 	.word	0x006080e0
    4604:	0c0d0e0f 	.word	0x0c0d0e0f
    4608:	08090a0b 	.word	0x08090a0b
    460c:	04050607 	.word	0x04050607
    4610:	00010203 	.word	0x00010203
    4614:	01010101 	.word	0x01010101
    4618:	02020201 	.word	0x02020201
    461c:	03030202 	.word	0x03030202
    4620:	04030303 	.word	0x04030303
    4624:	04040404 	.word	0x04040404
    4628:	05050505 	.word	0x05050505
    462c:	06060605 	.word	0x06060605
    4630:	07070606 	.word	0x07070606
    4634:	07070707 	.word	0x07070707
    4638:	07070707 	.word	0x07070707
    463c:	08080808 	.word	0x08080808
    4640:	08080808 	.word	0x08080808
    4644:	09090808 	.word	0x09090808
    4648:	09090909 	.word	0x09090909
    464c:	09090909 	.word	0x09090909
    4650:	0a0a0a0a 	.word	0x0a0a0a0a
    4654:	0a0a0a0a 	.word	0x0a0a0a0a
    4658:	0b0b0a0a 	.word	0x0b0b0a0a
    465c:	0b0b0b0b 	.word	0x0b0b0b0b
    4660:	0b0b0b0b 	.word	0x0b0b0b0b
    4664:	0b0b0b0b 	.word	0x0b0b0b0b
    4668:	0b0b0b0b 	.word	0x0b0b0b0b
    466c:	0c0c0b0b 	.word	0x0c0c0b0b
    4670:	0c0c0c0c 	.word	0x0c0c0c0c
    4674:	0c0c0c0c 	.word	0x0c0c0c0c
    4678:	0c0c0c0c 	.word	0x0c0c0c0c
    467c:	0c0c0c0c 	.word	0x0c0c0c0c
    4680:	0c0c0c0c 	.word	0x0c0c0c0c
    4684:	0c0c0c0c 	.word	0x0c0c0c0c
    4688:	0c0c0c0c 	.word	0x0c0c0c0c
    468c:	0c0c0c0c 	.word	0x0c0c0c0c
    4690:	0c0c0c0c 	.word	0x0c0c0c0c
    4694:	0d0d0c0c 	.word	0x0d0d0c0c
    4698:	0d0d0d0d 	.word	0x0d0d0d0d
    469c:	0d0d0d0d 	.word	0x0d0d0d0d
    46a0:	0d0d0d0d 	.word	0x0d0d0d0d
    46a4:	0d0d0d0d 	.word	0x0d0d0d0d
    46a8:	0d0d0d0d 	.word	0x0d0d0d0d
    46ac:	0d0d0d0d 	.word	0x0d0d0d0d
    46b0:	0d0d0d0d 	.word	0x0d0d0d0d
    46b4:	0d0d0d0d 	.word	0x0d0d0d0d
    46b8:	0d0d0d0d 	.word	0x0d0d0d0d
    46bc:	0e0e0d0d 	.word	0x0e0e0d0d
    46c0:	0e0e0e0e 	.word	0x0e0e0e0e
    46c4:	0e0e0e0e 	.word	0x0e0e0e0e
    46c8:	0e0e0e0e 	.word	0x0e0e0e0e
    46cc:	0e0e0e0e 	.word	0x0e0e0e0e
    46d0:	0e0e0e0e 	.word	0x0e0e0e0e
    46d4:	0e0e0e0e 	.word	0x0e0e0e0e
    46d8:	0e0e0e0e 	.word	0x0e0e0e0e
    46dc:	0f0f0f0f 	.word	0x0f0f0f0f
    46e0:	0f0f0f0f 	.word	0x0f0f0f0f
    46e4:	0f0f0f0f 	.word	0x0f0f0f0f
    46e8:	0f0f0f0f 	.word	0x0f0f0f0f
    46ec:	0f0f0f0f 	.word	0x0f0f0f0f
    46f0:	0f0f0f0f 	.word	0x0f0f0f0f
    46f4:	0f0f0f0f 	.word	0x0f0f0f0f
    46f8:	10100f0f 	.word	0x10100f0f
    46fc:	10101010 	.word	0x10101010
    4700:	10101010 	.word	0x10101010
    4704:	10101010 	.word	0x10101010
    4708:	10101010 	.word	0x10101010
    470c:	10101010 	.word	0x10101010
    4710:	10101010 	.word	0x10101010
    4714:	10101010 	.word	0x10101010
    4718:	11111111 	.word	0x11111111
    471c:	11111111 	.word	0x11111111
    4720:	11111111 	.word	0x11111111
    4724:	11111111 	.word	0x11111111
    4728:	11111111 	.word	0x11111111
    472c:	11111111 	.word	0x11111111
    4730:	11111111 	.word	0x11111111
    4734:	11111111 	.word	0x11111111
    4738:	11111111 	.word	0x11111111
    473c:	11111111 	.word	0x11111111
    4740:	11111111 	.word	0x11111111
    4744:	11111111 	.word	0x11111111
    4748:	11111111 	.word	0x11111111
    474c:	11111111 	.word	0x11111111
    4750:	11111111 	.word	0x11111111
    4754:	11111111 	.word	0x11111111
    4758:	11111111 	.word	0x11111111
    475c:	11111111 	.word	0x11111111
    4760:	11111111 	.word	0x11111111
    4764:	11111111 	.word	0x11111111
    4768:	11111111 	.word	0x11111111
    476c:	11111111 	.word	0x11111111
    4770:	11111111 	.word	0x11111111
    4774:	11111111 	.word	0x11111111
    4778:	11111111 	.word	0x11111111
    477c:	11111111 	.word	0x11111111
    4780:	11111111 	.word	0x11111111
    4784:	11111111 	.word	0x11111111
    4788:	11111111 	.word	0x11111111
    478c:	11111111 	.word	0x11111111
    4790:	11111111 	.word	0x11111111
    4794:	11111111 	.word	0x11111111
    4798:	11111111 	.word	0x11111111
    479c:	11111111 	.word	0x11111111
    47a0:	11111111 	.word	0x11111111
    47a4:	12121212 	.word	0x12121212
    47a8:	12121212 	.word	0x12121212
    47ac:	12121212 	.word	0x12121212
    47b0:	12121212 	.word	0x12121212
    47b4:	12121212 	.word	0x12121212
    47b8:	12121212 	.word	0x12121212
    47bc:	12121212 	.word	0x12121212
    47c0:	12121212 	.word	0x12121212
    47c4:	12121212 	.word	0x12121212
    47c8:	12121212 	.word	0x12121212
    47cc:	12121212 	.word	0x12121212
    47d0:	12121212 	.word	0x12121212
    47d4:	12121212 	.word	0x12121212
    47d8:	12121212 	.word	0x12121212
    47dc:	12121212 	.word	0x12121212
    47e0:	12121212 	.word	0x12121212
    47e4:	12121212 	.word	0x12121212
    47e8:	12121212 	.word	0x12121212
    47ec:	12121212 	.word	0x12121212
    47f0:	12121212 	.word	0x12121212
    47f4:	12121212 	.word	0x12121212
    47f8:	12121212 	.word	0x12121212
    47fc:	12121212 	.word	0x12121212
    4800:	12121212 	.word	0x12121212
    4804:	12121212 	.word	0x12121212
    4808:	12121212 	.word	0x12121212
    480c:	12121212 	.word	0x12121212
    4810:	12121212 	.word	0x12121212
    4814:	12121212 	.word	0x12121212
    4818:	12121212 	.word	0x12121212
    481c:	12121212 	.word	0x12121212
    4820:	12121212 	.word	0x12121212
    4824:	12121212 	.word	0x12121212
    4828:	12121212 	.word	0x12121212
    482c:	13131212 	.word	0x13131212
    4830:	13131313 	.word	0x13131313
    4834:	13131313 	.word	0x13131313
    4838:	13131313 	.word	0x13131313
    483c:	13131313 	.word	0x13131313
    4840:	13131313 	.word	0x13131313
    4844:	13131313 	.word	0x13131313
    4848:	13131313 	.word	0x13131313
    484c:	13131313 	.word	0x13131313
    4850:	13131313 	.word	0x13131313
    4854:	13131313 	.word	0x13131313
    4858:	13131313 	.word	0x13131313
    485c:	13131313 	.word	0x13131313
    4860:	13131313 	.word	0x13131313
    4864:	13131313 	.word	0x13131313
    4868:	13131313 	.word	0x13131313
    486c:	08df0208 	.word	0x08df0208
    4870:	0208be02 	.word	0x0208be02
    4874:	7b02088b 	.word	0x7b02088b
    4878:	08690208 	.word	0x08690208
    487c:	02005802 	.word	0x02005802
    4880:	44020044 	.word	0x44020044
    4884:	00340200 	.word	0x00340200
    4888:	02003402 	.word	0x02003402
    488c:	24020024 	.word	0x24020024
    4890:	00140200 	.word	0x00140200
    4894:	02001302 	.word	0x02001302
    4898:	11020013 	.word	0x11020013
    489c:	00000200 	.word	0x00000200
    48a0:	41000041 	.word	0x41000041
    48a4:	00400000 	.word	0x00400000
    48a8:	00004000 	.word	0x00004000
    48ac:	020c0408 	.word	0x020c0408
    48b0:	010e060a 	.word	0x010e060a
    48b4:	030d0509 	.word	0x030d0509
    48b8:	000f070b 	.word	0x000f070b
    48bc:	20003004 	.word	0x20003004
    48c0:	20003008 	.word	0x20003008
    48c4:	20001c00 	.word	0x20001c00
    48c8:	20003000 	.word	0x20003000
    48cc:	20001c04 	.word	0x20001c04
    48d0:	20001c08 	.word	0x20001c08
    48d4:	0200060a 	.word	0x0200060a
    48d8:	40000000 	.word	0x40000000
    48dc:	02090001 	.word	0x02090001
    48e0:	01010020 	.word	0x01010020
    48e4:	09fa8000 	.word	0x09fa8000
    48e8:	02000004 	.word	0x02000004
    48ec:	00ffffff 	.word	0x00ffffff
    48f0:	02810507 	.word	0x02810507
    48f4:	07000040 	.word	0x07000040
    48f8:	40020205 	.word	0x40020205
    48fc:	28000000 	.word	0x28000000
    4900:	00000000 	.word	0x00000000
    4904:	01000401 	.word	0x01000401
    4908:	00000000 	.word	0x00000000
    490c:	01000000 	.word	0x01000000
    4910:	4e495701 	.word	0x4e495701
    4914:	00425355 	.word	0x00425355
    4918:	4e495700 	.word	0x4e495700
    491c:	00425355 	.word	0x00425355
    4920:	00000000 	.word	0x00000000
    4924:	36000000 	.word	0x36000000
    4928:	49004103 	.word	0x49004103
    492c:	53005200 	.word	0x53005200
    4930:	59005000 	.word	0x59005000
    4934:	53002000 	.word	0x53002000
    4938:	3a004e00 	.word	0x3a004e00
    493c:	20002000 	.word	0x20002000
    4940:	20002000 	.word	0x20002000
    4944:	20002000 	.word	0x20002000
    4948:	20002000 	.word	0x20002000
    494c:	20002000 	.word	0x20002000
    4950:	20002000 	.word	0x20002000
    4954:	20002000 	.word	0x20002000
    4958:	20002000 	.word	0x20002000
    495c:	00011200 	.word	0x00011200
    4960:	00000002 	.word	0x00000002
    4964:	a11d5040 	.word	0xa11d5040
    4968:	01010060 	.word	0x01010060
    496c:	04010302 	.word	0x04010302
    4970:	1e040903 	.word	0x1e040903
    4974:	77007703 	.word	0x77007703
    4978:	2e007700 	.word	0x2e007700
    497c:	69006100 	.word	0x69006100
    4980:	73007200 	.word	0x73007200
    4984:	79007000 	.word	0x79007000
    4988:	63002e00 	.word	0x63002e00
    498c:	6d006f00 	.word	0x6d006f00
    4990:	4d031200 	.word	0x4d031200
    4994:	46005300 	.word	0x46005300
    4998:	31005400 	.word	0x31005400
    499c:	30003000 	.word	0x30003000
    49a0:	09001300 	.word	0x09001300
    49a4:	01002002 	.word	0x01002002
    49a8:	fa800001 	.word	0xfa800001
    49ac:	00000409 	.word	0x00000409
    49b0:	ffffff02 	.word	0xffffff02
    49b4:	81050700 	.word	0x81050700
    49b8:	00020002 	.word	0x00020002
    49bc:	02020507 	.word	0x02020507
    49c0:	00000200 	.word	0x00000200
    49c4:	0041030e 	.word	0x0041030e
    49c8:	00520049 	.word	0x00520049
    49cc:	00500053 	.word	0x00500053
    49d0:	008e0059 	.word	0x008e0059
    49d4:	01000000 	.word	0x01000000
    49d8:	00010005 	.word	0x00010005
    49dc:	00000084 	.word	0x00000084
    49e0:	00000001 	.word	0x00000001
    49e4:	00440028 	.word	0x00440028
    49e8:	00760065 	.word	0x00760065
    49ec:	00630069 	.word	0x00630069
    49f0:	00490065 	.word	0x00490065
    49f4:	0074006e 	.word	0x0074006e
    49f8:	00720065 	.word	0x00720065
    49fc:	00610066 	.word	0x00610066
    4a00:	00650063 	.word	0x00650063
    4a04:	00550047 	.word	0x00550047
    4a08:	00440049 	.word	0x00440049
    4a0c:	004e0000 	.word	0x004e0000
    4a10:	007b0000 	.word	0x007b0000
    4a14:	00410034 	.word	0x00410034
    4a18:	00340046 	.word	0x00340046
    4a1c:	00380031 	.word	0x00380031
    4a20:	00350036 	.word	0x00350036
    4a24:	0042002d 	.word	0x0042002d
    4a28:	00310043 	.word	0x00310043
    4a2c:	002d0045 	.word	0x002d0045
    4a30:	00340037 	.word	0x00340037
    4a34:	00410035 	.word	0x00410035
    4a38:	0039002d 	.word	0x0039002d
    4a3c:	00320038 	.word	0x00320038
    4a40:	002d0036 	.word	0x002d0036
    4a44:	00370039 	.word	0x00370039
    4a48:	00410043 	.word	0x00410043
    4a4c:	00380041 	.word	0x00380041
    4a50:	00450045 	.word	0x00450045
    4a54:	00340030 	.word	0x00340030
    4a58:	00460037 	.word	0x00460037
    4a5c:	0000007d 	.word	0x0000007d
    4a60:	2000ed53 	.word	0x2000ed53
    4a64:	00000001 	.word	0x00000001
    4a68:	00000002 	.word	0x00000002
    4a6c:	2000ed0d 	.word	0x2000ed0d
    4a70:	2000e98c 	.word	0x2000e98c
    4a74:	2000ec84 	.word	0x2000ec84
    4a78:	2000ee3c 	.word	0x2000ee3c
    4a7c:	00000000 	.word	0x00000000
    4a80:	2000ec8e 	.word	0x2000ec8e
    4a84:	00000001 	.word	0x00000001
    4a88:	00000001 	.word	0x00000001
    4a8c:	2000ee10 	.word	0x2000ee10
    4a90:	2000ee30 	.word	0x2000ee30
    4a94:	00000000 	.word	0x00000000
    4a98:	2000ee78 	.word	0x2000ee78
    4a9c:	00000004 	.word	0x00000004
    4aa0:	2000f540 	.word	0x2000f540
    4aa4:	00000000 	.word	0x00000000
    4aa8:	2000eea0 	.word	0x2000eea0
    4aac:	00000001 	.word	0x00000001
    4ab0:	2000f2c0 	.word	0x2000f2c0
    4ab4:	00000000 	.word	0x00000000
    4ab8:	2000eec8 	.word	0x2000eec8
    4abc:	00000004 	.word	0x00000004
    4ac0:	2000f0c0 	.word	0x2000f0c0
	...
    4adc:	2000ee1c 	.word	0x2000ee1c
    4ae0:	2000eec8 	.word	0x2000eec8
    4ae4:	2000ee78 	.word	0x2000ee78
    4ae8:	2000de91 	.word	0x2000de91
    4aec:	2000de9b 	.word	0x2000de9b
	...
    4b00:	00000002 	.word	0x00000002
    4b04:	2000ee1c 	.word	0x2000ee1c
    4b08:	00000000 	.word	0x00000000
    4b0c:	2000eea0 	.word	0x2000eea0
    4b10:	00000000 	.word	0x00000000
    4b14:	2000de0f 	.word	0x2000de0f
	...
    4b28:	00000080 	.word	0x00000080
    4b2c:	2000ee1c 	.word	0x2000ee1c
    4b30:	2000eec8 	.word	0x2000eec8
    4b34:	2000ee78 	.word	0x2000ee78
    4b38:	00000000 	.word	0x00000000
    4b3c:	2000deb7 	.word	0x2000deb7
    4b40:	2000ef00 	.word	0x2000ef00
    4b44:	00000001 	.word	0x00000001
    4b48:	2000f040 	.word	0x2000f040
	...
    4b60:	00000081 	.word	0x00000081
    4b64:	2000ee1c 	.word	0x2000ee1c
    4b68:	2000ef00 	.word	0x2000ef00
	...
    4b74:	2000de0f 	.word	0x2000de0f
    4b78:	20001000 	.word	0x20001000
    4b7c:	00000001 	.word	0x00000001

00004b80 <m0_bin_size>:
    4b80:	00002f30 	.word	0x00002f30
	...

00004b90 <gpio_conf>:
    4b90:	40086000 00000010 40086004 00000010     .`.@.....`.@....
    4ba0:	40086080 00000010 40086084 00000010     .`.@.....`.@....
    4bb0:	40086088 00000010 4008608c 00000010     .`.@.....`.@....
    4bc0:	40086090 00000010 40086094 00000010     .`.@.....`.@....
    4bd0:	40086098 00000010 4008609c 00000010     .`.@.....`.@....
    4be0:	400860a0 00000010 400860a4 00000010     .`.@.....`.@....
    4bf0:	400860a8 00000010 400860ac 00000010     .`.@.....`.@....
    4c00:	400860b0 00000010 400860b4 00000010     .`.@.....`.@....
    4c10:	400860b8 00000000 400860bc 00000010     .`.@.....`.@....
    4c20:	400860c0 00000010 400860c4 00000000     .`.@.....`.@....
    4c30:	400860c8 00000010 400860cc 00000012     .`.@.....`.@....
    4c40:	400860d0 00000010 40086100 00000014     .`.@.....a.@....
    4c50:	40086104 00000014 40086108 00000014     .a.@.....a.@....
    4c60:	4008610c 00000014 40086110 00000014     .a.@.....a.@....
    4c70:	40086114 00000014 40086118 00000014     .a.@.....a.@....
    4c80:	4008611c 00000010 40086120 00000014     .a.@.... a.@....
    4c90:	40086124 00000010 40086128 00000010     $a.@....(a.@....
    4ca0:	4008612c 00000010 40086130 00000010     ,a.@....0a.@....
    4cb0:	40086134 00000000 40086180 00000010     4a.@.....a.@....
    4cc0:	40086184 00000014 40086188 00000014     .a.@.....a.@....
    4cd0:	40086200 00000010 40086204 00000010     .b.@.....b.@....
    4ce0:	40086208 00000010 4008620c 00000010     .b.@.....b.@....
    4cf0:	40086210 00000010 40086214 00000010     .b.@.....b.@....
    4d00:	40086218 00000010 4008621c 00000012     .b.@.....b.@....
    4d10:	40086220 00000014 40086224 00000014      b.@....$b.@....
    4d20:	40086228 00000014 40086280 00000010     (b.@.....b.@....
    4d30:	40086284 00000010 40086288 00000010     .b.@.....b.@....
    4d40:	4008628c 00000010 40086290 00000010     .b.@.....b.@....
    4d50:	40086294 00000010 40086298 00000010     .b.@.....b.@....
    4d60:	4008629c 00000010 40086300 00000010     .b.@.....c.@....
    4d70:	40086304 00000010 40086308 00000010     .c.@.....c.@....
    4d80:	4008630c 00000010 40086310 00000010     .c.@.....c.@....
    4d90:	40086314 00000010 40086318 00000010     .c.@.....c.@....
    4da0:	4008631c 00000010 40086320 00000010     .c.@.... c.@....
    4db0:	40086324 00000010 40086328 00000010     $c.@....(c.@....
    4dc0:	4008632c 00000010 40086330 00000010     ,c.@....0c.@....
    4dd0:	40086380 00000010 40086384 00000010     .c.@.....c.@....
    4de0:	40086388 00000010 4008638c 00000010     .c.@.....c.@....
    4df0:	40086390 00000010 40086394 00000010     .c.@.....c.@....
    4e00:	40086398 00000010 4008639c 00000010     .c.@.....c.@....
    4e10:	40086400 00000010 40086404 00000010     .d.@.....d.@....
    4e20:	40086408 00000010 4008640c 00000010     .d.@.....d.@....
    4e30:	40086410 00000010 40086414 00000010     .d.@.....d.@....
    4e40:	40086418 00000010 4008641c 00000010     .d.@.....d.@....
    4e50:	40086420 00000010 40086500 00000010      d.@.....e.@....
    4e60:	40086504 00000010 40086508 00000010     .e.@.....e.@....
    4e70:	4008650c 00000010 40086510 00000010     .e.@.....e.@....
    4e80:	40086580 00000010 40086584 00000010     .e.@.....e.@....
    4e90:	40086588 00000010 4008658c 00000010     .e.@.....e.@....
    4ea0:	40086590 00000010 40086594 00000010     .e.@.....e.@....
    4eb0:	40086598 00000010 40086600 00000010     .e.@.....f.@....
    4ec0:	40086604 00000014 40086608 00000014     .f.@.....f.@....
    4ed0:	4008660c 00000014 40086610 00000010     .f.@.....f.@....
    4ee0:	40086614 00000010 40086618 00000010     .f.@.....f.@....
    4ef0:	4008661c 00000010 40086620 00000010     .f.@.... f.@....
    4f00:	40086624 00000010 40086628 00000010     $f.@....(f.@....
    4f10:	4008662c 00000010 40086630 00000010     ,f.@....0f.@....
    4f20:	40086634 00000010 40086638 00000010     4f.@....8f.@....
    4f30:	40086680 00000010 40086684 00000010     .f.@.....f.@....
    4f40:	40086688 00000010 4008668c 00000010     .f.@.....f.@....
    4f50:	40086690 00000010 40086694 00000010     .f.@.....f.@....
    4f60:	40086698 00000010 4008669c 00000010     .f.@.....f.@....
    4f70:	400866a0 00000010 400866a4 00000010     .f.@.....f.@....
    4f80:	400866a8 00000010 400866ac 00000010     .f.@.....f.@....
    4f90:	400866b0 00000010 400866b4 00000010     .f.@.....f.@....
    4fa0:	400866b8 00000010 400866bc 00000010     .f.@.....f.@....
    4fb0:	400866c0 00000010 40086700 00000010     .f.@.....g.@....
    4fc0:	40086704 00000010 40086708 00000014     .g.@.....g.@....
    4fd0:	4008670c 00000010 40086710 00000010     .g.@.....g.@....
    4fe0:	40086714 00000010 40086718 00000010     .g.@.....g.@....
    4ff0:	4008671c 00000010 40086720 00000010     .g.@.... g.@....
    5000:	40086724 00000010 40086728 00000010     $g.@....(g.@....
    5010:	4008672c 00000010 40086730 00000010     ,g.@....0g.@....
    5020:	40086734 00000010 40086738 00000010     4g.@....8g.@....
    5030:	4008673c 00000010 40086780 00000011     <g.@.....g.@....
    5040:	40086784 00000010 40086788 00000010     .g.@.....g.@....
    5050:	4008678c 00000010 40086790 000000e9     .g.@.....g.@....
    5060:	40086794 00000010 40086798 00000010     .g.@.....g.@....
    5070:	4008679c 00000010 400867a0 00000010     .g.@.....g.@....
    5080:	400867a4 00000010 400867a8 00000010     .g.@.....g.@....
    5090:	400867ac 00000010 0000ff03 80808010     .g.@............
    50a0:	80808080 00000080 0000c0bb 000092b7     ................
    50b0:	0000acb1 00007e03                       .....~..
